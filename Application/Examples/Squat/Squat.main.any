#include "..\libdef.any"

#include "<ANYBODY_PATH_MODELUTILS>\FootConnections\CreateFootPrintClass.any"
#include "<ANYBODY_PATH_MODELUTILS>\FootConnections\CreateFootConnectionClasses.any"
#include "<ANYBODY_PATH_AMMR>\Tools\GRFPrediction\FootPlateConditionalContact.any" 

Main = {  
  
  // ----------------------------------------------------------
  // Body Model Configuration
  // ----------------------------------------------------------
  #include "Model/BodyModelConfiguration.any"
  
  #include "Input\Parameters.any"
  
  #include "Model\Mannequin.any"
  
//-----------Have to insert code before <ANYMOCAP_MODEL>---------
// Exclude right and/or left knee joint
#define BM_JOINT_TYPE_KNEE_RIGHT _JOINT_TYPE_USERDEFINED_
//#define BM_JOINT_TYPE_KNEE_LEFT _JOINT_TYPE_USERDEFINED_

//What level of personalization is this moving-axis joint
// 0: default positions (cadaver-based and scaled) 
// 1: user-adjusted positions 
#define BM_JOINT_MOVINGAXIS_TYPE_RIGHT 1
//#define BM_JOINT_MOVINGAXIS_TYPE_LEFT 1 

// Need to switch mirroring off (0), in order to define side-specific knee positions.
//#define BM_JOINT_MOVINGAXIS_MIRRORED 1
//#include "<ANYBODY_PATH_MODELUTILS>/MovingAxisKnee/AddOnKnee.any"
#include "<ANYBODY_PATH_MODELUTILS>/MovingAxisKnee/CylinderFitHinge.any"
//---------------------------------------------------------------- 

//   Include default human model'

  #include "<ANYBODY_PATH_BODY>\HumanModel.any"

  AnyFolder Model = 
  {  
    // A link to the human model
    AnyFolder &BodyModel = .HumanModel.BodyModel;
    
    // Environment files are used to include objects surrounding human
    #include "Model\Environment.any"   
    
    AnyFolder ModelEnvironmentConnection = 
    {
      //'JointsAndDrivers.any' file can include all kinematic constraints such as joints and drivers
      #include "Model\JointsAndDrivers.any"
      #include "Model\FootPrintGeneration.any"
      #include "Model\Supports.any"
    };
  };
  
  AnyBodyStudy Study = 
  {
    AnyFolder &Model = .Model;  
    Gravity={0.0, -9.81, 0.0};
    tEnd = ADL_SQUAT_TIME_PERIOD;
    nStep = round(ADL_SQUAT_TIME_PERIOD*ADL_SQUAT_FRAMES_PER_SECOND+1);
  };
  
  #include "<ANYBODY_PATH_MODELUTILS>\Operations\RunAppSequence.any"   
}; //Main


