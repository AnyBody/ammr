//----------------------------------------------------
// Lumbar rhythm
//----------------------------------------------------

AnyFolder LumbarRhythm = {
  
  AnyFolder &TrunkRef = Main.Model.HumanModel.Trunk.Seg;
  AnyFolder &PackageRef = Main.Model.PackageModel.Segs;
  AnyFolder &LegRef = Main.Model.HumanModel.Right.Leg.Seg;
  
  AnyKinLinear PelvisSeatConNodeL2L3TransMeasure = {
    AnyRefFrame &PelvisSeatCon = .TrunkRef.Pelvis.PelvisSeatConNode;
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;
    Ref = -1;
  }; // PelvisSeatConL2L3TransMeasure
  
  AnyKinLinear L = {
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;    
    AnyRefFrame &Seat = .PackageRef.Seat.SeatBackRestJointNode;
    Ref = -1;
  };
  
  AnyKinRotational Theta1RotMeasure = {
    AnyRefFrame &BackRest = .PackageRef.BackRest;  
    AnyRefFrame &Seat = .PackageRef.Seat;    
//    AnyRefFrame &BackRest = .PackageRef.BackRest;
    Type = RotVector;
    Ref = -1;
  }; // Theta1RotMeasure
  
  AnyKinRotational Theta2RotMeasure = {
    AnyRefFrame &Thigh = .LegRef.Thigh;    
    AnyRefFrame &Seat = .PackageRef.Seat;    
//    AnyRefFrame &Thigh = .LegRef.Thigh;
    Type = RotVector;
//    Ref = -1;
    Ref = 1;
  }; // Theta2RotMeasure
  
    AnyKinRotational Theta3RotMeasure = {
    AnyRefFrame &Pelvis = .TrunkRef.Pelvis;    
    AnyRefFrame &Seat = .PackageRef.Seat;    
//    AnyRefFrame &Thorax = .TrunkRef.Thorax;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
//    Ref = -1;
    Ref = 1;
  }; // Theta3RotMeasure
  
  AnyKinRotational Alpha1RotMeasure = {
    AnyRefFrame &Pelvis = .TrunkRef.Pelvis;  
    AnyRefFrame &Thigh = .LegRef.Thigh;
//    AnyRefFrame &Pelvis = .TrunkRef.Pelvis;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
    Ref = -1;
  }; // Alpha1RotMeasure
  
  AnyKinRotational Alpha2RotMeasure = {
    AnyRefFrame &L4L5 = .TrunkRef.L4L5Seg;  
    AnyRefFrame &Pelvis = .TrunkRef.Pelvis;    
//    AnyRefFrame &L4L5 = .TrunkRef.L4L5Seg;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
    Ref = -1;
  }; // Alpha2RotMeasure
  
  AnyKinRotational Alpha3RotMeasure = {
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;  
    AnyRefFrame &L4L5 = .TrunkRef.L4L5Seg;    
//    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
    Ref = -1;
  }; // Alpha3RotMeasure
  
  AnyKinRotational Alpha4RotMeasure = {
    AnyRefFrame &Thorax = .TrunkRef.Thorax;    
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;    
//    AnyRefFrame &Thorax = .TrunkRef.Thorax;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
    Ref = -1;
  }; // Alpha4RotMeasure
  
  AnyKinRotational GammaRotMeasure = {
    AnyRefFrame &Thorax = .TrunkRef.Pelvis;    
    AnyRefFrame &L2L3 = .LegRef.Thigh;    
//    AnyRefFrame &Thorax = .TrunkRef.Thorax;
//    AnyRefFrame &Seat = .PackageRef.Seat;
    Type = RotVector;
    Ref = -1;
  }; // Alpha4RotMeasure


  
  AnyKinLinear a = {
    AnyRefFrame &Seat = .PackageRef.Seat.SeatBackRestJointNode;
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg.L3L4JntNode;
    Ref = -1;
  };
  
  AnyKinLinear b = {
    AnyRefFrame &L2L3Lower = .TrunkRef.L2L3Seg.L3L4JntNode;
    AnyRefFrame &L2L3 = .TrunkRef.L2L3Seg;
    Ref = -1;
  };
  
  AnyKinLinear cd = {
    AnyRefFrame &L4L5Upper = .TrunkRef.L4L5Seg.L3L4JntNode;
    AnyRefFrame &L4L5Lower = .TrunkRef.L4L5Seg.L5PelvisJntNode;
    Ref = -1;
  };

  
  
//----------------------------------------------------
// Drivers
//----------------------------------------------------

/*
  AnyKinEqSimpleDriver LDriver = {
    AnyKinLinear &L = .PelvisSeatConNodeL2L3TransMeasure;
    MeasureOrganizer = {0};
    Reaction.Type = {0};
    DriverPos = {0.02};
    DriverVel = {0};
  };
 */

  AnyVar tanGamma = (sqrt((L.Pos[0])^2)-sqrt((a.Pos[0])^2))/sqrt((b.Pos[1])^2);
  AnyVar tanPsi = (sqrt((cd.Pos[0])^2))/sqrt((cd.Pos[1])^2);
  
  AnyVar Gamma = tanGamma-tanGamma^3/3+tanGamma^5/5-tanGamma^7/7+tanGamma^9/9-tanGamma^11/11+tanGamma^13/13-tanGamma^15/15+tanGamma^17/17;
  AnyVar Psi = tanPsi-tanPsi^3/3+tanPsi^5/5-tanPsi^7/7+tanPsi^9/9-tanPsi^11/11+tanPsi^13/13-tanPsi^15/15+tanPsi^17/17;
  
  AnyKinRotational Test = {
    AnyRefFrame &T1 = .TrunkRef.L2L3Seg;
    AnyRefFrame &T2 = .Main.Model.PackageModel.GlobalRef;
    Type = RotVector;
    Ref = -1;
  };
   

  AnyVar Alpha3 = Gamma+Psi;   
  AnyVar Alpha3Neg = Gamma-Psi;    
  AnyVar GammaDeg = Gamma*180/pi;
  AnyVar PsiDeg = Psi*180/pi;
  
  AnyVar Alpha3Deg = Alpha3*180/pi;
  AnyVar Alpha3NegDeg = Alpha3Neg*180/pi;  
  
  AnyVar Theta2Deg = Theta2RotMeasure.Pos[2]*180/pi;
  AnyVar Theta3Deg = Theta3RotMeasure.Pos[2]*180/pi;  
  
  AnyVar Alpha1RotMeasureDeg = Alpha1RotMeasure.Pos[2]*180/pi;
  AnyVar Alpha2RotMeasureDeg = Alpha2RotMeasure.Pos[2]*180/pi;
  AnyVar Alpha3RotMeasureDeg = Alpha3RotMeasure.Pos[2]*180/pi;
  AnyVar Alpha4RotMeasureDeg = Alpha4RotMeasure.Pos[2]*180/pi;
  
  AnyVar AngleSum = -Theta2Deg+Alpha1RotMeasureDeg+Alpha2RotMeasureDeg+Alpha3RotMeasureDeg;

  AnyVar AngleSum2 = Theta3Deg+Alpha2RotMeasureDeg+Alpha3RotMeasureDeg+Alpha4RotMeasureDeg;  
  AnyVar Hej = Alpha2RotMeasure.Pos[2];
  
  AnyVar Hej2 = 90-GammaRotMeasure.Pos[2]*180/pi;
  
  
}; // LumbarRhythm


  
