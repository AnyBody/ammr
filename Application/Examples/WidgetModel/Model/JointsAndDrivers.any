AnyFolder Reactions ={

  AnyReacForce HipReactions ={
  
  AnyKinLinear Lin ={
  AnyRefFrame &ref1=   Main.Model.EnvironmentModel.GlobalRef;
AnyRefFrame &ref2=  Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
  };
  
    AnyKinRotational rot ={
        AnyRefFrame &ref1=   Main.Model.EnvironmentModel.GlobalRef;

AnyRefFrame &ref=  Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg;
 Type=RotAxesAngles; 
};
  
  
  };

};



AnyFolder Drivers = {
  
  
  // Aliases for convenient referencing
  AnyFolder &JntPos=..Mannequin.Posture;  
  AnyFolder &JntVel=..Mannequin.PostureVel;  
  
  AnyFolder &RefHM = Main.Model.HumanModel;
  
#if BM_ARM_LEFT
  AnyKinEqSimpleDriver SCDriverLeft =
{
  AnyKinMeasureOrg &ref1= Main.HumanModel.BodyModel.Interface.Left.SternoClavicularProtraction;
  AnyKinMeasureOrg &ref2 =Main.HumanModel.BodyModel.Interface.Left.SternoClavicularElevation;
  AnyKinMeasureOrg &ref3 =Main.HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
  DriverPos = pi/180*
  {
    .JntPos.Left.SternoClavicularProtraction,
    .JntPos.Left.SternoClavicularElevation,
    .JntPos.Left.SternoClavicularAxialRotation
  };
  DriverVel = pi/180*
  {
    .JntVel.Left.SternoClavicularProtraction,
    .JntVel.Left.SternoClavicularElevation,
    .JntVel.Left.SternoClavicularAxialRotation
  };
  Reaction.Type={Off,Off,Off};
  CType = {Soft, Soft, Soft};
   WeightFun={&WeightFun2};

  AnyFunConst WeightFun2 ={Value = {0.01,0.2,0.5};};

};

#endif

#if BM_ARM_RIGHT

AnyKinEqSimpleDriver SCDriverRight =
{
  AnyKinMeasureOrg &ref1 =Main.HumanModel.BodyModel.Interface.Right.SternoClavicularProtraction;
  AnyKinMeasureOrg &ref2 =Main.HumanModel.BodyModel.Interface.Right.SternoClavicularElevation;
  AnyKinMeasureOrg &ref3 =Main.HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
  DriverPos = pi/180*
  {
    .JntPos.Right.SternoClavicularProtraction,
    .JntPos.Right.SternoClavicularElevation,
    .JntPos.Right.SternoClavicularAxialRotation
  };
  DriverVel = 
  {
    .JntVel.Right.SternoClavicularProtraction,
    .JntVel.Right.SternoClavicularElevation   ,
   .JntVel.Right.SternoClavicularAxialRotation
  };
  Reaction.Type={Off,Off,Off};
  CType = {Soft, Soft, Soft};
   WeightFun={&WeightFun2};

  AnyFunConst WeightFun2 ={Value = {0.01,0.2,0.5};};


};

#endif
  
  
  Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg={AnyRefNode PelvisNode ={sRel={-0.027, -0.15, 0};};};
  TripodOnPlane Pelvis (
  Base=Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.PelvisNode,
  Study=Main.OnMouseReleaseOperations,
  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  )={
    GlobalPos={0.005250725, 0.9592772, 0.001496087};
    GlobalRotZYX={90,0,-90};
    LocalPos={0,0,0};
    LocalRotZYX={90,90,0};
    TripodSize=0.2;
  };
  
  
  //  
  //
  //   Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg={AnyRefNode ThoraxNode ={sRel={0.15,0.20,0.0};};};
  //
  //    TripodOnPlane Thorax (
  //    Base=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg.ThoraxNode,
  //  Study=Main.OnMouseReleaseOperations,
  //  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  //  )={
  //    GlobalPos={0.204126054, 1.416761, 0.00110688};
  //    GlobalRotZYX={110,0,-89};
  //    LocalPos={0,0,0};
  //    LocalRotZYX={0,60,-89};
  //    TripodSize=0.2;
  //  };
  
  
     Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg={AnyRefNode SkullNode ={sRel={0.1, 0.12, 0.0};};};
  
      TripodOnPlane Skull (
      Base=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.SkullNode,
      Study=Main.OnMouseReleaseOperations,
    LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
    )={
      GlobalPos={0.004126054, 1.816761, 0.00110688};
      GlobalRotZYX={180,0,-90};
      LocalPos={0,0,0};
      LocalRotZYX={0,0,-90};
      TripodSize=0.2;
    };
  
  
  
  
  WidgetMarkerDriver P2 (
  HumanNode=Main.HumanModel.BodyModel.Right.Leg.Seg.Thigh.KneeJoint,
  Operation=Main.Study.InitialConditions,
  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  )= {
    Origin = ({0.008322759, 0.4694201, 0.1135472});
  };
  
  
  
  //  WidgetMarkerDriver P3 (
  //  HumanNode=Main.HumanModel.BodyModel.Right.Leg.Seg.Shank.AnkleJoint,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({-0.009819729, 0.04907709, 0.1297123});
  //  };
  //  
  //  WidgetMarkerDriver P4 (
  //  HumanNode=Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.HeelNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({-0.05606472, 2.220446e-016, 0.1276901});
  //  };
  //  
  //  WidgetMarkerDriver P5 (
  //  HumanNode=Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.ToeLateralContactNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.1163329, -0.01212937, 0.2074283});
  //  };
  //  
  //  
  //  WidgetMarkerDriver P6 (
  //  HumanNode=Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.ToeMedialContactNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.1695771, -0.02237612, 0.1292982});
  //  };
  
  
  Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.HeelContactNodeLow ={AnyRefNode RotNode ={ARel=..ScalingNode.ARel;};};
  TripodOnPlane RightFoot (
  Base=Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.HeelContactNodeLow.RotNode,
  Study=Main.OnMouseReleaseOperations,
  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  )={
    GlobalPos={-0.05610861, -0.003852181, 0.1279523};
    GlobalRotZYX={0,0,90};
    LocalPos={0,0,0};
    LocalRotZYX={0,180,90};
    TripodSize=0.2;
  };
  
  
  Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.HeelContactNodeLow ={AnyRefNode RotNode ={ARel=..ScalingNode.ARel;};};
  TripodOnPlane LeftFoot (
  Base=Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.HeelContactNodeLow.RotNode,
  Study=Main.OnMouseReleaseOperations,
  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  )={
    GlobalPos={-0.05610861, -0.003852181, -0.1279523};
    GlobalRotZYX={0,0,90};
    LocalPos={0,0,0};
    LocalRotZYX={0,180,90};
    TripodSize=0.2;
  };
  
  WidgetMarkerDriver P7 (
  HumanNode=Main.HumanModel.BodyModel.Left.Leg.Seg.Thigh.KneeJoint,
  Operation=Main.Study.InitialConditions,
  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  )= {
    Origin = ({0.008322759, 0.4694201, -0.1135472});
  };
  
  
  //  
  //  WidgetMarkerDriver P8 (
  //  HumanNode=Main.HumanModel.BodyModel.Left.Leg.Seg.Shank.AnkleJoint,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({-0.009819729, 0.04907709,- 0.1297123});
  //  };
  //  
  //  WidgetMarkerDriver P9 (
  //  HumanNode=Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.HeelNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({-0.05606472, 2.220446e-016,- 0.1276901});
  //  };
  //  
  //  WidgetMarkerDriver P10 (
  //  HumanNode=Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.ToeLateralContactNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.1163329, -0.01212937, -0.2074283});
  //  };
  //  
  //  
  //  WidgetMarkerDriver P11 (
  //  HumanNode=Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.ToeMedialContactNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.1695771, -0.02237612, -0.1292982});
  //  };
  //  
  
  
  //  WidgetMarkerDriver P12 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.RightAsisMarker,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.08622453, 0.9457625, 0.1172748});
  //  };
  //  
  //  
  //  WidgetMarkerDriver P13 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.LeftAsisMarker,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({0.08622453, 0.9457625, -0.1172748});
  //  };
  //  
  //  WidgetMarkerDriver P14 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.PelvisSacrumJntNode,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({3.394938e-005, 0.9608839, 5.252277e-005});
  //  };
  //  
  
  
  //  WidgetMarkerDriver P15 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg.ij,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = ({-0.01770534, 1.413863, 1.709354e-005});
  //  };
  //  
  //  
  //  
  //  Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg ={AnyRefNode StrnMarker={sRel=.Scale({0.15,0.24,0.0});};};
  //  WidgetMarkerDriver P16 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg.StrnMarker,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = {0.075681, 1.247523, -1.022358e-005};
  //  };
  ////  
  //  
  //  Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg ={AnyRefNode RFHD={sRel=.Scale({0.08,0.06,0.07});};};
  //  WidgetMarkerDriver P17 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.RFHD,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = {-0.03686949, 1.653989, 0.06971126};
  //    
  //  };
  //  
  //  
  //  
  //  Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg ={AnyRefNode LFHD ={sRel=.Scale({0.08,0.06,-0.07});};};
  //  WidgetMarkerDriver P18 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.LFHD ,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin  = {-0.0367689, 1.653887, -0.07028866};
  //  };
  //  
  //  
  //  
  //  Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg ={AnyRefNode RBHD ={sRel=.Scale({-0.07,0.05,0.08});};};
  //  WidgetMarkerDriver P19 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.RBHD ,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin  = {-0.1831119, 1.619135, 0.07963157} ;
  //  };
  //  
  //  
  //  
  //  Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg ={AnyRefNode LBHD ={sRel=.Scale({-0.07,0.05,-0.08});};};
  //  WidgetMarkerDriver P20 (
  //  HumanNode=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.LBHD ,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = {-0.1829969, 1.619019, -0.08036835};
  //  };
  //  
  
  
  
  //    WidgetMarkerDriverRelative P21 (
  //    This=Main.Model.ModelEnvironmentConnection.Drivers.P21,
  //    HumanNode=Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Scapula.ac,
  //    Operation=Main.Study.InitialConditions,
  //    OriginRefFrame=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg.ij) = {
  //    Pos=   DesignVar( {0.1648392, 0.04497294, 0.106862});
  //    };
  //  
  //
  //  
  //  
  //  WidgetMarkerDriver P22 (
  //  HumanNode=Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Humerus.em,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = {0.06027501, 1.078555, 0.205558};
  //  };
  //  
  //  
  //    
  ////
  //  
  //    WidgetMarkerDriverRelative P23 (
  //    This=Main.Model.ModelEnvironmentConnection.Drivers.P23,
  //    HumanNode=Main.HumanModel.BodyModel.Left.ShoulderArm.Seg.Scapula.ac,
  //    Operation=Main.Study.InitialConditions,
  //    OriginRefFrame=Main.HumanModel.BodyModel.Trunk.SegmentsThorax.ThoraxSeg.iji) = {
  //    Pos=   DesignVar( { -0.1648392, 0.04497294, 0.1068624});
  //    };
  //  
  //  
  //  
  //  
  //  
  //  WidgetMarkerDriver P24 (
  //  HumanNode=Main.HumanModel.BodyModel.Left.ShoulderArm.Seg.Humerus.em,
  //  Operation=Main.Study.InitialConditions,
  //  OriginRefFrame=Main.Model.EnvironmentModel.GlobalRef
  //  )= {
  //    Origin = {0.06027501, 1.078555, -0.205558};
  //  };
  //  
  // 
  
  
  
  //      //Constraint the collective CoM to be right above the GlobalRef
  //      AnyKinEqSimpleDriver CoMDriver = {
  //        AnyKinCoM CoM = {
  //          AnyFolder &Body = Main.Model.HumanModel;
  //        };
  //        MeasureOrganizer = {0,2};  // Only the x and z directions
  //        DriverPos = {0,0};
  //        DriverVel = {0,0};
  //        Reaction.Type = {Off,Off};
  //      };  
  
  
  #if BM_ARM_RIGHT


  TripodOnPlane RightHand (
  Base=Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Hand,
  Study=Main.OnMouseReleaseOperations,
  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  )={
    GlobalPos=Main.HumanModel.BodyModel.Right.ShoulderArm.Seg.Hand.r0;
    GlobalRotZYX={0,0,0};
    LocalPos={0,0.0,0};
    LocalRotZYX={-20,0,0};
    TripodSize=0.2;
  };
  #endif
  
  
  //  
  // 
  ////Sterno clavicular joint driver
  //AnyKinEqSimpleDriver SCDriverRight ={
  ////  AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Right.SternoClavicularProtraction;
  ////  AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Right.SternoClavicularElevation;
  //  AnyKinMeasureOrg &ref3 =Main.HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
  //  DriverPos = pi/180*{
  ////    .JntPos.Right.SternoClavicularProtraction,
  ////    .JntPos.Right.SternoClavicularElevation,
  //    .JntPos.Right.SternoClavicularAxialRotation
  //  };
  //  DriverVel = {
  ////    .JntVel.Right.SternoClavicularProtraction,
  ////    .JntVel.Right.SternoClavicularElevation,
  //    .JntVel.Right.SternoClavicularAxialRotation
  //  };
  //  Reaction.Type={Off};
  //};
  //
  //
  //  
  //  //Sterno clavicular joint driver
  //  AnyKinEqSimpleDriver SCDriverLeft ={
  ////    AnyKinMeasureOrg &ref1 =...HumanModel.Interface.Left.SternoClavicularProtraction;
  ////    AnyKinMeasureOrg &ref2 =...HumanModel.Interface.Left.SternoClavicularElevation;
  //    AnyKinMeasureOrg &ref3 =Main.HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
  //    
  //    DriverPos = pi/180*{
  ////      .JntPos.Left.SternoClavicularProtraction,
  ////      .JntPos.Left.SternoClavicularElevation,
  //      .JntPos.Left.SternoClavicularAxialRotation
  //    };
  //    
  //    DriverVel = pi/180*{
  ////      .JntVel.Left.SternoClavicularProtraction,
  ////      .JntVel.Left.SternoClavicularElevation,
  //      .JntVel.Left.SternoClavicularAxialRotation
  //    };
  //
  //    Reaction.Type={Off};
  //  };
  ////  {0.2,1.3,-0.25}
  //  
  #if BM_ARM_LEFT

  TripodOnPlane LeftHand (
  Base=Main.HumanModel.BodyModel.Left.ShoulderArm.Seg.Hand,
  Study=Main.OnMouseReleaseOperations,
  LinOnOffX=On,LinOnOffY=On,LinOnOffZ=On,RotOnOffX=On,RotOnOffY=On,RotOnOffZ=On
  )={
    GlobalPos=Base.r0;
    GlobalRotZYX={0,0,0};
    LocalPos={0,0,0};
    LocalRotZYX={-20,0,0};
    TripodSize=0.2;
  };
  #endif
  
  
  
  
  
  
  // The body parts are included only if there is no unhallowed combination detected
  #ifdef UNHALLOWED_COMBINATION
  #else
  
  //      #if TRUNK == 1
  //      #include "TrunkDrivers.any"
  //      #else
  //      #endif
  
  
  
  //  
  //  #if RIGHT_ARM == 1
  //  #include "RightArmDrivers.any"
  //  #if RIGHT_DETAILLED_HAND == 1
  //  #include "RightHandDrivers.any"
  //  #endif
  //  #else
  //  #endif
  
  //  
  //  #if LEFT_ARM == 1
  //  #include "LeftArmDrivers.any"
  //  #if LEFT_DETAILLED_HAND == 1
  //  #include "LeftHandDrivers.any"
  //  #endif
  //  #else
  //  #endif
  //  
  
  //  #if RIGHT_LEG == 1
  //  #include "RightLegDrivers.any"
  //  #else
  //  #endif
  
  
  
  //  #include "LeftLegDrivers.any"
  
  
  
  //  #if RIGHT_LEG_TD == 1
  //  #include "RightLegTDDrivers.any"
  //  #else
  //  #endif
  
  
  //  #if LEFT_LEG_TD == 1
  //  #include "LeftLegTDDrivers.any"
  //  #else
  //  #endif
  //  
  
  #endif
  
  
  //Loads from the Mannequin file.
  AnyFolder MannequinLoads = {
    AnyFolder &hm = Main.Model.HumanModel.BodyModel;  // For easy reference
    AnyFolder &mql = Main.Model.Mannequin.Load;
    
    AnyFolder Right = {
      AnyFolder &rhm = .hm.Right;
      AnyFolder &locmql = .mql.Right;
    };  // Right
    
    AnyFolder Left = {
      AnyFolder &lhm = .hm.Left;
      AnyFolder &locmql = .mql.Left;
    };  // Left
  };
  
  
  
  
  
  
  
  
};//Drivers


//
/* ----------------------------------------------------------------
//   Drivers for a standing model:
//   
//   - The two feet are constrained forward/backward and vertically (x & y)
//   - The pelvis is constrained laterally (z)
//   - The CoM is constrained forward/backward and laterally above the origin.
//   
//   The remaining degrees of freedom (with the exception of a few shoulder
//   movements) are controlled by parameters in the mannequin.any file.
//   
//   The forces defined in the mannequin.any file are attached to the body
//   locations at the bottom of this file.
//   
//   John Rasmussen, March 5, 2004.
//   ----------------------------------------------------------------  */
//
//AnyFolder Drivers = {
//  
//  #include "<ANYBODY_PATH_BODY>/BodyModels/include/MannequinDrivers.any"
//  
//  // Aliases for convenient referencing
//  AnyFolder &JntPos=..Mannequin.Posture;  
//  AnyFolder &JntVel=..Mannequin.PostureVel;  
//  
//  AnyFolder &LegR = ..HumanModel.Right.Leg;
//  AnyFolder &LegL = ..HumanModel.Left.Leg;
//  
//  AnyFolder &RefHM = Main.Model.HumanModel;
//
//
//
//  //Constraint the collective CoM to be right above the GlobalRef
//  AnyKinEqSimpleDriver CoMDriver = {
//    AnyKinCoM CoM = {
//      AnyFolder &Body = Main.Model.HumanModel;
//    };
//    MeasureOrganizer = {0,2};  // Only the x and z directions
//    DriverPos = {0,0};
//    DriverVel = {0,0};
//    Reaction.Type = {Off,Off};
//  };  
//  
//  
//  // The body parts are included only if there is no unhallowed combination detected
//  #ifdef UNHALLOWED_COMBINATION
//  #else
//  
//  #include "TrunkDrivers.any"
//  
//  #if BM_ARM_RIGHT == ON
//  #include "RightArmDrivers.any"
//    #if BM_ARM_DETAIL_HAND_RIGHT == ON
//    #include "RightHandDrivers.any"
//    #endif
//  #else
//  #endif
//  
//  
//  #if BM_ARM_LEFT == ON
//  #include "LeftArmDrivers.any"
//    #if BM_ARM_DETAIL_HAND_LEFT == 1
//    #include "LeftHandDrivers.any"
//    #endif
//  #else
//  #endif
//  
//  
//  #if BM_LEG_RIGHT == CONST_LEG_MODEL_Leg
//  #include "RightLegDrivers.any"
//  #else
//  #endif
//  
//  
//  #if BM_LEG_LEFT == CONST_LEG_MODEL_Leg
//  #include "LeftLegDrivers.any"
//  #else
//  #endif
//  
//  
//  #if BM_LEG_RIGHT == CONST_LEG_MODEL_TLEM
//  #include "RightLegTDDrivers.any"
//  #else
//  #endif
//  
//  
//  #if BM_LEG_LEFT == CONST_LEG_MODEL_TLEM
//  #include "LeftLegTDDrivers.any"
//  #else
//  #endif
//  
//  
//  #endif
//  
//  
//  //Loads from the Mannequin file.
//  AnyFolder MannequinLoads = {
//    AnyFolder &hm = Main.Model.HumanModel;  // For easy reference
//    AnyFolder &mql = Main.Model.Mannequin.Load;
//    
//    AnyFolder Right = {
//      AnyFolder &rhm = .hm.Right;
//      AnyFolder &locmql = .mql.Right;
//    };  // Right
//    
//    AnyFolder Left = {
//      AnyFolder &lhm = .hm.Left;
//      AnyFolder &locmql = .mql.Left;
//    };  // Left
//  };
//
//  
//};//Drivers
//

