
// Class template arguments:

// MarkerName: 
// MarkerPlacement,
// Weight<X|Y|Z>: = 1
// Opt<X|Y|Z>: = OFF
// ScaleMarkerPosOnOff: = ON,
// FilterCutOffFrequency: = 0,
// FilterOrder: = 2,
// UseC3DWeightResiduals = OFF,
// PARAMETER_OPT_STUDY = Main.Studies.ParameterIdentification,
// C3D_OBJECT = Main.ModelSetup.C3DFileData,
// BODY_MODEL_FOLDER = Main.HumanModel.BodyModel,
// PlaceMarkerAt = AnatomicalFrame,
// DRAW_SCALE = 1,



#class_template CreateMarkerDriver (MarkerName,
                                    MarkerPlacement,
                                    WeightX=1, WeightY=1, WeightZ=1,
                                    OptX=0, OptY=0, OptZ=0,
                                    ScaleMarkerPosOnOff = 1,
                                    FilterCutOffFrequency = 0,
                                    FilterOrder = 2,
                                    UseC3DWeightResiduals = 0,
                                    PARAMETER_OPT_STUDY = Main.Studies.ParameterIdentification,
                                    C3D_OBJECT = Main.ModelSetup.C3DFileData,
                                    BODY_MODEL_FOLDER = Main.HumanModel.BodyModel,
                                    PlaceMarkerAt = AnatomicalFrame,
                                    USE_BVH_INPUT = 0,
                                    BVH_OBJECT = Main.ModelSetup.BVHFileData,
                                    MarkerPlacementBVH = REQUIRED_FOR_BVH_INPUT,
                                    DRAW_SCALE = 1
                                    ){
                                      
                                      
  #var AnyVar ConstMarkerWeightX = WeightX;  
  #var AnyVar ConstMarkerWeightY = WeightY;
  #var AnyVar ConstMarkerWeightZ = WeightZ;
  
  #if (UseC3DWeightResiduals == 1) & (USE_BVH_INPUT == 0)
    AnyFunSquareWaveThreshold MarkerWeightsFun = 
    {
      #var dT = {C3D_OBJECT.WeightTransitionTime};
      T = C3D_OBJECT.Points.Markers.MarkerName.PosInterpol.T;
      Data = C3D_OBJECT.Points.Markers.MarkerName.Residual;
      OutputValues = 
            {{0, .ConstMarkerWeightX },
             {0, .ConstMarkerWeightY },
             {0, .ConstMarkerWeightZ}};
      #var Threshold = 0.0;
      #var TType = {TransitionStart, TransitionEnd};
    };
  #else
    AnyFunConst MarkerWeightsFun =
    { 
      Value = {.ConstMarkerWeightX , .ConstMarkerWeightY , .ConstMarkerWeightZ };
    };
  #endif
  
  #var AnyObjectPtrVar MarkerWeightsPtr = &MarkerWeightsFun;
    
  #var AnyVec3 sRelOpt; 
  
  #if USE_BVH_INPUT
  #var AnyVec3 sRelOnBVH ; 
  #endif

  #var AnyVec3 sRelOptDelta = {0, 0, 0};
  
  #if OptX ==0 & OptY == 0 & OptZ == 0
        AnyVec3 sRelOptEdit = DesignVar(sRelOptDelta); //make it a design var ! because it will not be otherwise
  #else
        AnyVec3 sRelOptEdit = sRelOptDelta; 
  #endif



  
  
  Main.ModelSetup.Macros={
    AnyStringVar Set##MarkerName = ("classoperation "+  CompleteNameOf(...sRelOptEdit) + " " + strquote("Set Value") +  strformat ("\n")+ "classoperation Main " + strquote("Update Values") + strformat ("\n"));
  };

  
  Main.ModelSetup.ParameterIdentification = {
      AnyDesVar MarkerName##_X = {
        Val = ....sRelOptEdit[0];    
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar MarkerName##_Y = {
        Val = ....sRelOptEdit[1];   
        #var Min=-100;
        #var Max=100;      
      };
      
      AnyDesVar MarkerName##_Z = {
        Val = ....sRelOptEdit[2];   
        #var Min=-100;
        #var Max=100;      
      };
  };
  
 

  AnyFolder &MarkerPlacementSegment = BODY_MODEL_FOLDER.MarkerPlacement;
  MarkerPlacementSegment = {
    
    AnyRefNode MarkerName={
#if USE_BVH_INPUT
       #if ScaleMarkerPosOnOff == 1
         AnyVec3 MarkerOffset = (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
         sRel = .PlaceMarkerAt.sRel + MarkerOffset;
         ARel= .AnatomicalFrame.ARel;
       #else
 //      sRel = .PlaceMarkerAt.sRel + (..sRelOpt + ..sRelOptEdit )*.PlaceMarkerAt.ARel';
 //      ARel= .PlaceMarkerAt.ARel;
         sRel = .PlaceMarkerAt.sRel + ..sRelOpt;
       #endif
#else
      #if ScaleMarkerPosOnOff == 1
        AnyVec3 MarkerOffset = (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
        sRel = .PlaceMarkerAt.sRel + MarkerOffset;
        ARel= .AnatomicalFrame.ARel;
      #else
        sRel = .PlaceMarkerAt.sRel + (..sRelOpt + ..sRelOptEdit )*.PlaceMarkerAt.ARel';
        ARel= .PlaceMarkerAt.ARel;
      #endif
#endif
      
//      This was an attempt to allow PlaceMarkerAt to be anywhere and not only
//      a RefNode on the segments.
//      AnyFunTransform3DLinRef Transform2SegmentFrame = {
//            AnyVec3 test1 = ..PlaceMarkerAt.sRel;
//            AnyMat33 test2 = ..PlaceMarkerAt.ARel;
//            Ref = &..PlaceMarkerAt;
//      };
//      sRel = Transform2SegmentFrame({0.0,0,0}) + MarkerOffset;
      
      
      AnyRefNode Arrows = {  
          #var AnyVar size = DRAW_SCALE*0.05;
          AnyDrawVector X =   {
            AnyInt is_optimized = eqfun(OptX,1);
            Vec = {size,0, 0};            
            #include "DrawVector.any"
            #var Text="X";
          };
          AnyDrawVector Y =  {
            AnyInt is_optimized = eqfun(OptY,1);
            Vec = {0,size, 0};
            #include "DrawVector.any"
            #var Text="Y";
          };
          AnyDrawVector Z =  {
            AnyInt is_optimized = eqfun(OptZ,1);
            Vec = {0,0,size};
            #include "DrawVector.any"
            #var Text="Z";
          };
      };//Arrows    
    }; //MarkerName 
  };// InsertionNode
  
      
      AnyKinDriverMarker Driver = {
        AnyDrawKinMeasure Draw = {
          #if UseC3DWeightResiduals
          #var Visible = iffun(bool(sum(.WeightPos)), On, Off);
          #else
          #var Visible = On;
          #endif
          #var Opacity = iffun(bool(sum(.WeightPos)), 1.0, 0.2);
          #var Label = Off;
          #var Size = DRAW_SCALE*0.01;
          #if USE_BVH_INPUT
          #var Line = DesignVar(Off);
          #else
          #var Line = On;
          #endif
        };
        #if UseC3DWeightResiduals
        AnyDrawKinMeasure DrawDroppedOutMarker = {
          #var Visible = iffun(bool(sum(.WeightPos)), Off, On);
          #var Label = Off;
          #var Size = DRAW_SCALE*0.01;
          #var Opacity = 0.5;
          RGB1 = {0.4, 0.4, 0.4};
          RGB3 = {0.4, 0.4, 0.4};
        };
        #endif
        Linear.Ref=0;
        AnyRefFrame &MarkerRef = BODY_MODEL_FOLDER.MarkerPlacement.MarkerName;
        //AnyFolder &MarkerName = C3D_OBJECT.Points.Markers.MarkerName;
        
        #if FilterCutOffFrequency > 0
   	  /// A lowpass butterworth filter
   	    AnyFunButterworthFilter LowPassFilter = 
   	    {
   	     	#var FilterForwardBackwardOnOff = On;
   	     	#var AutomaticInitialConditionOnOff = On;
   	     	N = FilterOrder;
              W = {1/(C3D_OBJECT.Header.VideoFrameRate*0.5)*FilterCutOffFrequency };
   	      Type = LowPass;
   	    };
  	  
          /// Interpolation function of the lowpass filtered data
          AnyFunInterpol FilteredPosInterpol = 
          {
            #var Type = Bspline;
            BsplineOrder =4;

            #if USE_BVH_INPUT
            T = BVH_OBJECT.Markers.MarkerName.PosInterpol.T;
            Data = .LowPassFilter(BVH_OBJECT.Markers.MarkerName.Pos');
            #else
            T = C3D_OBJECT.Points.Markers.MarkerName.PosInterpol.T;
            Data = .LowPassFilter(C3D_OBJECT.Points.Markers.MarkerName.Pos');
            #endif
          };
          
        #else
        #if USE_BVH_INPUT
        AnyParamFun &InterpolRef = BVH_OBJECT.Markers.MarkerName.PosInterpol;
        #else
        AnyParamFun &InterpolRef = C3D_OBJECT.Points.Markers.MarkerName.PosInterpol;
        #endif
        #endif
        
        WeightFun={.MarkerWeightsPtr};
      };

  PARAMETER_OPT_STUDY ={

    #if OptX ==1 
    AnyDesVar &MarkerName##_X =  Main.ModelSetup.ParameterIdentification.MarkerName##_X;
    #endif
    
    #if OptY ==1
    AnyDesVar &MarkerName##_Y =  Main.ModelSetup.ParameterIdentification.MarkerName##_Y;
    #endif
    
    #if OptZ ==1
    AnyDesVar &MarkerName##_Z =  Main.ModelSetup.ParameterIdentification.MarkerName##_Z;
    #endif        
    
  };
  
#if USE_BVH_INPUT

  
  //AnyFolder &MarkerInsertionNodeBVH = MarkerPlacementBVH;  
  MarkerPlacementBVH = 
  {
    AnyRefNode MarkerName = 
    {
      //sRel = ..sRelOnBVH;
      sRel = Main.ModelSetup.MocapDrivers.MarkerName.sRelOnBVH ;
      AnyDrawNode drw_node = 
      {
        #var RGB = {0, 1, 0};
        #var ScaleXYZ = 0.015*{1, 1, 1};     
        #var Visible = On;
      };
    };
  };//
  
  Main.ModelSetup.BVHFileData.Markers.MarkerName.RefFramePtr = &MarkerPlacementBVH.MarkerName;

  

#endif
  
  
  
  
}; // End of InsertSegmentClass






