#class_template KinLimitsDriver(AnyKinMeasure& KinMeasure ) {

  
#var AnyVar LowerLimit; 
#var AnyVar HighLimit;
  
#var AnyVar DriverPhaseIn = 0.05*(HighLimit - LowerLimit) ;
#var AnyVar LowerLimitHard= LowerLimit - DriverPhaseIn ;
#var AnyVar HighLimitHard= HighLimit + DriverPhaseIn ;

#var AnyVar ErrorAtHardLimit = 0.05;

#var AnyVar MeasureConversion = 1;


AnyFunInterpol JointLimitErrorFunction= 
{
 
  AnyVar x_max = 1e8;
  AnyVar x_min = -1e8;
  AnyFloat x_arr = { x_min , .LowerLimitHard, .LowerLimit, .HighLimit, .HighLimitHard, x_max };
  
  AnyVar ValueAtPositiveExtreame = .ErrorAtHardLimit * (x_max - .HighLimitHard) / ( .HighLimitHard - .HighLimit) +.ErrorAtHardLimit ;
  AnyVar ValueAtNegativeExtreame = .ErrorAtHardLimit * (x_min - .LowerLimitHard ) / ( .LowerLimitHard - .LowerLimit ) +.ErrorAtHardLimit ;
  
  
  AnyFloat data = {  ValueAtNegativeExtreame ,.ErrorAtHardLimit,0,0, .ErrorAtHardLimit, ValueAtPositiveExtreame    };
  
  Type = PiecewiseLinear ;
  T = x_arr ;
  Data = {data } ;
};

AnyFunInterpol &FT = JointLimitErrorFunction;
AnyFloat Test = {FT (-10.0), FT( 5.0), FT (0.0), FT (5.0), FT (10.0)}; 

AnyKinMeasureFunComb1 JointLimitMeasure = {
  AnyKinMeasureLinComb ConvertedMeasure = {
    AnyKinMeasure& ref = ..KinMeasure;
    Coef  = {{..MeasureConversion }};
    OutDim = 1;
  };
  Functions = {&.JointLimitErrorFunction};
};

AnyKinEqSimpleDriver JointLimitDriver = 
{
  AnyKinMeasureFunComb1 & ref = .JointLimitMeasure;
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
  CType = {Soft};
  AnyFunConst ConstFun = { Value = {1}; };
  WeightFun = {&ConstFun};      
};


};




