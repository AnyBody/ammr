//#include "C:\Local folder\ThoraxDev\ammr-spine MOCAP\Application\MocapExamples\Plug-in-gait_MultiTrial_StandingRef/SpineDrivers_Measures.any"
Main.HumanModel.BodyModel.Trunk.Joints = {
AnyFolder &AngleInputs = Main.ModelSetup.SubjectSpecificData;
//AnyFolder &JointsFolder = Main.HumanModel.BodyModel.Trunk.Joints;
//==========================================Angle Driver=================================================
//  AnyKinEqSimpleDriver SpineRhythm = 
//{
////    AnyKinMeasure &SacrumPelvis = .SacrumPelvisRot;
////    AnyKinMeasure &L5Sacrum = .L5SacrumRot;
////    AnyKinMeasure &L4L5 = .L4L5Rot;
////    AnyKinMeasure &L3L4 = .L3L4Rot;
////    AnyKinMeasure &L2L3 = .L2L3Rot;
////    AnyKinMeasure &L1L2 = .L1L2Rot;
////    AnyKinMeasure &T12L1 = .T12L1Rot;
////    AnyKinMeasure &T11T12 = .T11T12Rot;
////    AnyKinMeasure &T10T11 = .T10T11Rot;
////    AnyKinMeasure &T9T10 = .T9T10Rot;
////    AnyKinMeasure &T8T9 = .T8T9Rot;
////    AnyKinMeasure &T7T8 = .T7T8Rot;
////    AnyKinMeasure &T6T7 = .T6T7Rot;
////    AnyKinMeasure &T5T6 = .T5T6Rot;
////    AnyKinMeasure &T4T5 = .T4T5Rot;
////    AnyKinMeasure &T3T4 = .T3T4Rot;
////    AnyKinMeasure &T2T3 = .T2T3Rot;
////    AnyKinMeasure &T1T2 = .T1T2Rot;
//////    AnyKinMeasure &C7T1 = .C7T1Rot;
//
//  AnyKinMeasure &SacrumPelvis = .Lumbar.SacrumPelvis;
//  AnyKinMeasure &L5Sacrum = .Lumbar.L5Sacrum;
//  AnyKinMeasure &L4L5 = .Lumbar.L4L5;
//  AnyKinMeasure &L3L4 = .Lumbar.L3L4;
//  AnyKinMeasure &L2L3 = .Lumbar.L2L3;
//  AnyKinMeasure &L1L2 = .Lumbar.L1L2;
//  AnyKinMeasure &T12L1 = .Lumbar.T12L1;
//  AnyKinMeasure &T11T12 = .Thorax.T11T12;  
//  AnyKinMeasure &T10T11 = .Thorax.T10T11;
//  AnyKinMeasure &T9T10 = .Thorax.T9T10;
//  AnyKinMeasure &T8T9 = .Thorax.T8T9;
//  AnyKinMeasure &T7T8 = .Thorax.T7T8;
//  AnyKinMeasure &T6T7 = .Thorax.T6T7;
//  AnyKinMeasure &T5T6 = .Thorax.T5T6;
//  AnyKinMeasure &T4T5 = .Thorax.T4T5;
//  AnyKinMeasure &T3T4 = .Thorax.T3T4;
//  AnyKinMeasure &T2T3 = .Thorax.T2T3;
//  AnyKinMeasure &T1T2 = .Thorax.T1T2;
//  AnyKinMeasure &C7T1 = .Cervical.T1C7;
//  
//
//  DriverPos = {
//   .AngleInputs.SacrumPelvisJntAngle[0],.AngleInputs.SacrumPelvisJntAngle[1] ,.AngleInputs.SacrumPelvisJntAngle[2] ,
//   .AngleInputs.L5SacrumJntAngle[0],.AngleInputs.L5SacrumJntAngle[1],.AngleInputs.L5SacrumJntAngle[2] ,
//   .AngleInputs.L4L5JntAngle[0],.AngleInputs.L4L5JntAngle[1] ,.AngleInputs.L4L5JntAngle[2] ,
//   .AngleInputs.L3L4JntAngle[0],.AngleInputs.L3L4JntAngle[1] ,.AngleInputs.L3L4JntAngle[2] ,
//   .AngleInputs.L2L3JntAngle[0],.AngleInputs.L2L3JntAngle[1] ,.AngleInputs.L2L3JntAngle[2] ,
//   .AngleInputs.L1L2JntAngle[0],.AngleInputs.L1L2JntAngle[1] ,.AngleInputs.L1L2JntAngle[2] ,
//   .AngleInputs.T12L1JntAngle[0],.AngleInputs.T12L1JntAngle[1] ,.AngleInputs.T12L1JntAngle[2] ,
//   .AngleInputs.T11T12JntAngle[0],.AngleInputs.T11T12JntAngle[1] ,.AngleInputs.T11T12JntAngle[2] ,
//   .AngleInputs.T10T11JntAngle[0],.AngleInputs.T10T11JntAngle[1] ,.AngleInputs.T10T11JntAngle[2] ,
//   .AngleInputs.T9T10JntAngle[0],.AngleInputs.T9T10JntAngle[1] ,.AngleInputs.T9T10JntAngle[2] ,
//   .AngleInputs.T8T9JntAngle[0],.AngleInputs.T8T9JntAngle[1] ,.AngleInputs.T8T9JntAngle[2] ,
//   .AngleInputs.T7T8JntAngle[0],.AngleInputs.T7T8JntAngle[1] ,.AngleInputs.T7T8JntAngle[2] ,
//   .AngleInputs.T6T7JntAngle[0],.AngleInputs.T6T7JntAngle[1] ,.AngleInputs.T6T7JntAngle[2] ,
//   .AngleInputs.T5T6JntAngle[0],.AngleInputs.T5T6JntAngle[1] ,.AngleInputs.T5T6JntAngle[2] ,
//   .AngleInputs.T4T5JntAngle[0],.AngleInputs.T4T5JntAngle[1] ,.AngleInputs.T4T5JntAngle[2] ,
//   .AngleInputs.T3T4JntAngle[0],.AngleInputs.T3T4JntAngle[1] ,.AngleInputs.T3T4JntAngle[2] ,
//   .AngleInputs.T2T3JntAngle[0],.AngleInputs.T2T3JntAngle[1] ,.AngleInputs.T2T3JntAngle[2] ,
//   .AngleInputs.T1T2JntAngle[0],.AngleInputs.T1T2JntAngle[1] ,.AngleInputs.T1T2JntAngle[2] ,
//   0,0,0
//  }*pi/180;
//
//    
//  DriverVel = repmat(nDim, 0);
////  AnyFunConst Weight = {Value = repmat (.nDim,200);};
////  WeightFun={&Weight};
//  Reaction.Type = repmat(nDim, Off);
//  #if BM_TRUNK_THORACIC_RHYTHM == _RHYTHM_SOFT_
//  CType= repmat(nDim,Soft);
//  #endif
//};


AnyKinEqSimpleDriver SpineLateralRhythm = 
{
MeasureOrganizer = iarr(2, 3, 56);
  AnyKinMeasure &SacrumPelvis = .Lumbar.SacrumPelvis;
  AnyKinMeasure &L5Sacrum = .Lumbar.L5Sacrum;
  AnyKinMeasure &L4L5 = .Lumbar.L4L5;
  AnyKinMeasure &L3L4 = .Lumbar.L3L4;
  AnyKinMeasure &L2L3 = .Lumbar.L2L3;
  AnyKinMeasure &L1L2 = .Lumbar.L1L2;
  AnyKinMeasure &T12L1 = .Lumbar.T12L1;
  AnyKinMeasure &T11T12 = .Thorax.T11T12;  
  AnyKinMeasure &T10T11 = .Thorax.T10T11;
  AnyKinMeasure &T9T10 = .Thorax.T9T10;
  AnyKinMeasure &T8T9 = .Thorax.T8T9;
  AnyKinMeasure &T7T8 = .Thorax.T7T8;
  AnyKinMeasure &T6T7 = .Thorax.T6T7;
  AnyKinMeasure &T5T6 = .Thorax.T5T6;
  AnyKinMeasure &T4T5 = .Thorax.T4T5;
  AnyKinMeasure &T3T4 = .Thorax.T3T4;
  AnyKinMeasure &T2T3 = .Thorax.T2T3;
  AnyKinMeasure &T1T2 = .Thorax.T1T2;
  AnyKinMeasure &C7T1 = .Cervical.T1C7;
  
  DriverPos = { .AngleInputs.SacrumPelvisJntAngle[2], .AngleInputs.L5SacrumJntAngle[2], .AngleInputs.L4L5JntAngle[2], .AngleInputs.L3L4JntAngle[2] , .AngleInputs.L2L3JntAngle[2] ,.AngleInputs.L1L2JntAngle[2] ,.AngleInputs.T12L1JntAngle[2] ,.AngleInputs.T11T12JntAngle[2] ,.AngleInputs.T10T11JntAngle[2] ,.AngleInputs.T9T10JntAngle[2] ,.AngleInputs.T8T9JntAngle[2] ,.AngleInputs.T7T8JntAngle[2] ,.AngleInputs.T6T7JntAngle[2] ,.AngleInputs.T5T6JntAngle[2] ,.AngleInputs.T4T5JntAngle[2] ,.AngleInputs.T3T4JntAngle[2] ,.AngleInputs.T2T3JntAngle[2] ,.AngleInputs.T1T2JntAngle[2] ,0}*pi/180 ;
  DriverVel = repmat(nDim, 0);
  Reaction.Type = repmat(nDim, Off);
  
  #ifdef BM_TRUNK_RHYTHM_LATERAL_SOFT_
  CType= repmat(nDim,Soft);  
  #endif
};

AnyKinEqSimpleDriver SpineAxialRhythm = 
{
MeasureOrganizer = iarr(1, 3, 56);
  AnyKinMeasure &SacrumPelvis = .Lumbar.SacrumPelvis;
  AnyKinMeasure &L5Sacrum = .Lumbar.L5Sacrum;
  AnyKinMeasure &L4L5 = .Lumbar.L4L5;
  AnyKinMeasure &L3L4 = .Lumbar.L3L4;
  AnyKinMeasure &L2L3 = .Lumbar.L2L3;
  AnyKinMeasure &L1L2 = .Lumbar.L1L2;
  AnyKinMeasure &T12L1 = .Lumbar.T12L1;
  AnyKinMeasure &T11T12 = .Thorax.T11T12;  
  AnyKinMeasure &T10T11 = .Thorax.T10T11;
  AnyKinMeasure &T9T10 = .Thorax.T9T10;
  AnyKinMeasure &T8T9 = .Thorax.T8T9;
  AnyKinMeasure &T7T8 = .Thorax.T7T8;
  AnyKinMeasure &T6T7 = .Thorax.T6T7;
  AnyKinMeasure &T5T6 = .Thorax.T5T6;
  AnyKinMeasure &T4T5 = .Thorax.T4T5;
  AnyKinMeasure &T3T4 = .Thorax.T3T4;
  AnyKinMeasure &T2T3 = .Thorax.T2T3;
  AnyKinMeasure &T1T2 = .Thorax.T1T2;
  AnyKinMeasure &C7T1 = .Cervical.T1C7;
  
  DriverPos = { .AngleInputs.SacrumPelvisJntAngle[1], .AngleInputs.L5SacrumJntAngle[1], .AngleInputs.L4L5JntAngle[1], .AngleInputs.L3L4JntAngle[1] , .AngleInputs.L2L3JntAngle[1] ,.AngleInputs.L1L2JntAngle[1] ,.AngleInputs.T12L1JntAngle[1] ,.AngleInputs.T11T12JntAngle[1] ,.AngleInputs.T10T11JntAngle[1] ,.AngleInputs.T9T10JntAngle[1] ,.AngleInputs.T8T9JntAngle[1] ,.AngleInputs.T7T8JntAngle[1] ,.AngleInputs.T6T7JntAngle[1] ,.AngleInputs.T5T6JntAngle[1] ,.AngleInputs.T4T5JntAngle[1] ,.AngleInputs.T3T4JntAngle[1] ,.AngleInputs.T2T3JntAngle[1] ,.AngleInputs.T1T2JntAngle[1] ,0}*pi/180 ;
  DriverVel = repmat(nDim, 0);
  Reaction.Type = repmat(nDim, Off);
  
  #ifdef BM_TRUNK_RHYTHM_AXIAL_SOFT_
  CType= repmat(nDim,Soft);
  #endif
};

AnyKinEqSimpleDriver SpineExtensionRhythm = 
{
MeasureOrganizer = iarr(0, 3, 56);
  AnyKinMeasure &SacrumPelvis = .Lumbar.SacrumPelvis;
  AnyKinMeasure &L5Sacrum = .Lumbar.L5Sacrum;
  AnyKinMeasure &L4L5 = .Lumbar.L4L5;
  AnyKinMeasure &L3L4 = .Lumbar.L3L4;
  AnyKinMeasure &L2L3 = .Lumbar.L2L3;
  AnyKinMeasure &L1L2 = .Lumbar.L1L2;
  AnyKinMeasure &T12L1 = .Lumbar.T12L1;
  AnyKinMeasure &T11T12 = .Thorax.T11T12;  
  AnyKinMeasure &T10T11 = .Thorax.T10T11;
  AnyKinMeasure &T9T10 = .Thorax.T9T10;
  AnyKinMeasure &T8T9 = .Thorax.T8T9;
  AnyKinMeasure &T7T8 = .Thorax.T7T8;
  AnyKinMeasure &T6T7 = .Thorax.T6T7;
  AnyKinMeasure &T5T6 = .Thorax.T5T6;
  AnyKinMeasure &T4T5 = .Thorax.T4T5;
  AnyKinMeasure &T3T4 = .Thorax.T3T4;
  AnyKinMeasure &T2T3 = .Thorax.T2T3;
  AnyKinMeasure &T1T2 = .Thorax.T1T2;
  AnyKinMeasure &C7T1 = .Cervical.T1C7;
  
  DriverPos = { .AngleInputs.SacrumPelvisJntAngle[0], .AngleInputs.L5SacrumJntAngle[0], .AngleInputs.L4L5JntAngle[0], .AngleInputs.L3L4JntAngle[0] , .AngleInputs.L2L3JntAngle[0] ,.AngleInputs.L1L2JntAngle[0] ,.AngleInputs.T12L1JntAngle[0] ,.AngleInputs.T11T12JntAngle[0] ,.AngleInputs.T10T11JntAngle[0] ,.AngleInputs.T9T10JntAngle[0] ,.AngleInputs.T8T9JntAngle[0] ,.AngleInputs.T7T8JntAngle[0] ,.AngleInputs.T6T7JntAngle[0] ,.AngleInputs.T5T6JntAngle[0] ,.AngleInputs.T4T5JntAngle[0] ,.AngleInputs.T3T4JntAngle[0] ,.AngleInputs.T2T3JntAngle[0] ,.AngleInputs.T1T2JntAngle[0] ,0}*pi/180 ;
  DriverVel = repmat(nDim, 0);
  Reaction.Type = repmat(nDim, Off);
  
  #ifdef BM_TRUNK_RHYTHM_EXTENSION_SOFT_
  CType= repmat(nDim,Soft);  
  #endif
};


//==========================================Pelvis Rot Driver=================================================
Main.EnvironmentModel.GlobalRef = {
  AnyRefNode AnatomicalFrame = {ARel = RotMat(pi, z) * RotMat(pi/2, x);};
};

AnyKinRotational PelvisRot = {
  Type=RotAxesAngles;
AnyRefFrame &ref1 =Main.EnvironmentModel.GlobalRef.AnatomicalFrame;
AnyRefFrame &ref2 =Main.HumanModel.BodyModel.Trunk.Segments.PelvisSeg.AnatomicalFrame;
};

AnyKinEqSimpleDriver PelvisRot_Driver =
{
  MeasureOrganizer = {0,2};
  AnyKinMeasure &ref = .PelvisRot;
  DriverPos = {0,Main.ModelSetup.SubjectSpecificData.PelvisAngle[2]}*pi/180;
  DriverVel = repmat(nDim, 0);
  Reaction.Type = repmat(nDim, Off);
  #ifdef BM_TRUNK_PELVIS_RHYTHM_SOFT
  CType= repmat(nDim,Soft);
  #endif
};

};






//MechObjectExclude = arrcat(
//&Main.HumanModel.BodyModel.Trunk.Joints.Lumbar.SpineRhythmDrvFlexion,
//&Main.HumanModel.BodyModel.Trunk.Joints.Lumbar.SpineRhythmDrvRotation,
//&Main.HumanModel.BodyModel.Trunk.Joints.Lumbar.SpineRhythmDrvLatBending,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.LateralBendingRhythmDriver,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.AxialRotationRhythmDriver,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.ExtensionRhythmDriver,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.LumbarThroacicExtensionLinkDriver,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.LumbarThroacicLatBendingLinkDriver,
//&Main.HumanModel.BodyModel.Trunk.Joints.Thorax.LumbarThroacicRotationLinkDriver
//);



//Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.SpineAxialRhythm = {
//  AnyFunConst Weight = {Value= 0.01 * repmat(.nDim, 1);}; WeightFun = {&Weight};
//};

//AnyVar RibcageConstraintWeight = 100;
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib12RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib12LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib11RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib11LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib10RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib10LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib9RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib9LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib8RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib8LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib7RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib7LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib6RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib6LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib5RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib5LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib4RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib4LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib3RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib3LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib2RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib2LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib1RDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Rib1LDriver.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1};}; WeightFun = {&Weight}; };
//Main.HumanModel.BodyModel.Trunk.Joints.RibConstraints.Measures.DofDriver = {AnyFunConst Weight = {Value=Main.Studies.ParameterIdentification.KinematicStudyForParameterIdentification.RibcageConstraintWeight*{1,1,1,1,1,1};}; WeightFun = {&Weight}; };


//     AnyKinDriver LegDriver = 
//     {
//       AnyKinMeasure &RAnkle = Main.HumanModel.BodyModel.Right.Leg.Jnt.Ankle;
//       AnyKinMeasure &RTalar = Main.HumanModel.BodyModel.Right.Leg.Jnt.SubTalar;
//       AnyKinMeasure &RKnee = Main.HumanModel.BodyModel.Right.Leg.Jnt.Knee;
//       AnyKinMeasure &RPatella = Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur;
//       AnyKinMeasure &RHip = Main.HumanModel.BodyModel.Right.Leg.Jnt.Hip;
//       
//       AnyKinMeasure &LAnkle = Main.HumanModel.BodyModel.Left.Leg.Jnt.Ankle;
//       AnyKinMeasure &LTalar = Main.HumanModel.BodyModel.Left.Leg.Jnt.SubTalar;
//       AnyKinMeasure &LKnee = Main.HumanModel.BodyModel.Left.Leg.Jnt.Knee;
//       AnyKinMeasure &LPatella = Main.HumanModel.BodyModel.Left.Leg.Jnt.PatellaFemur;
//       AnyKinMeasure &LHip = Main.HumanModel.BodyModel.Left.Leg.Jnt.Hip;
//       
//       CType= repmat(nDim, Soft);
//     };











