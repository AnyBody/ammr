

#class_template CreateMarkerDriverEx (MarkerName, MarkerPlacement, WeightX, WeightY, WeightZ, OptX, OptY,OptZ, Model1, Model2, sRelOptScalingOnOff,ReadsRelOptFromFile,sRelCustomScalingOnOff){
  
  AnyVec3 RGB={1,0,0};  //color of initial markers
  
  
  #var AnyVec3 sRelOpt ;  // Variable with obligatory initialization
  #var AnyVec3 sRelOptDelta = {0, 0, 0};
  
#if ReadsRelOptFromFile == "On"  
  AnyInputFile InputFile = {
    FileName = Main.ModelSetup.FileNames.MarkerPositions+"-"+strformat(#MarkerName)+".txt";
  };
#endif  
  
  
  AnyFolder &Macro=  Main.ModelSetup.Macros ;
  Macro={
    AnyStringVar Set##MarkerName = ("classoperation "+  CompleteNameOf(.sRelOptEdit) + " " + strquote("Set Value") +  strformat ("\n")+ "classoperation Main " + strquote("Update Values") + strformat ("\n"));
  };
  
  #if OptX =="Off" 
  
    #if OptY=="On" 
      #if OptZ=="On" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    
      #if OptZ=="Off" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    #endif        
  

    #if OptY=="Off" 
      #if OptZ=="On" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    
      #if OptZ=="Off" 
        AnyVec3 sRelOptEdit = DesignVar(sRelOptDelta); //make it a design var ! because it will not be otherwise
      #endif      
    #endif        
  

 #endif
              
  
  #if OptX =="On" 
  
    #if OptY=="On" 
      #if OptZ=="On" 
        AnyVec3 sRelOptEdit = (sRelOptDelta); 
      #endif      
    
      #if OptZ=="Off" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    #endif        
  

    #if OptY=="Off" 
      #if OptZ=="On" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    
      #if OptZ=="Off" 
        AnyVec3 sRelOptEdit = (sRelOptDelta);
      #endif      
    #endif        
  
 
 #endif  
  #if Model1 == 1
  
  AnyFolder &InsertionNode1 =Main.Studies.HumanModel.BodyModel.MarkerPlacement;
  
  InsertionNode1 ={
    
    AnyRefNode MarkerName={
      
      
      //sRel=.ScalingNode.sRel+.Scale(..sRelOptEdit*.ScalingNode.ARel');
//      sRel=.ScalingNode.sRel+.GeomScale(..sRelOptEdit)*.ScalingNode.ARel';
//      ARel=.ScalingNode.ARel;
#if sRelCustomScalingOnOff == "On"
       sRel= .CustomMarkerScaling(..sRelOpt) + ..sRelOptEdit*.AnatomicalFrame.ARel';
#else
#if ReadsRelOptFromFile == "Off"  
      #if sRelOptScalingOnOff == "On"
        sRel= .AnatomicalFrame.sRel+ (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      #else
        sRel= .AnatomicalFrame.sRel+ (..sRelOpt + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      #endif
#else
        sRel= .AnatomicalFrame.sRel+ ({..InputFile.Data[0][0],..InputFile.Data[1][0],..InputFile.Data[2][0]}+ ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
#endif
#endif      
      ARel= .AnatomicalFrame.ARel;
      
//      #if OptX =="On" 
//      
//      AnyDrawVector XDir =   {
//        Line.RGB={0,1,0};
//        Vec = {size,0, 0};
//        #include "DrawVector.any"
//        Text="X";
//      };
//      #endif
//      
//      #if OptY =="On" 
//      
//      AnyDrawVector YDir =   {
//        Line.RGB={0,1,0};
//        Vec = {0,size, 0};
//        #include "DrawVector.any"
//        Text="Y";
//      };
//      #endif      
//      
//      #if OptZ =="On" 
//      
//      AnyDrawVector ZDir =   {
//        Line.RGB={0,1,0};
//        Vec = {0,0,size};
//        #include "DrawVector.any"
//        Text="Z";
//      };
//      #endif
//      
//      
//      #if OptX =="Off" 
//      
//      AnyDrawVector XDir =   {
//        Line.RGB={1,0,0};
//        Vec = {size,0, 0};
//        Text="X";
//        #include "DrawVector.any"
//      };
//      #endif
//      
//      #if OptY =="Off" 
//      
//      AnyDrawVector YDir =   {
//        Vec = {0,size, 0};
//        Line.RGB={1,0,0};
//        #include "DrawVector.any"
//        Text="Y";
//      };
//      #endif      
//      
//      #if OptZ =="Off" 
//      
//      AnyDrawVector ZDir =   {
//        Line.RGB={1,0,0};
//        Vec = {0,0,size};
//        #include "DrawVector.any"
//        Text="Z";
//      };
//      #endif      
      
    }; //create the marker 
  };
  
  
  
  AnyFolder &DriverFolder =Main.Studies.KinematicStudyForParameterIdentification.ModelEnvironmentConnection.Drivers;
  DriverFolder ={
    
    
    AnyFolder MarkerName ={
      
      AnyFunConst WeightFun ={Value = {WeightX,WeightY,WeightZ};};
      
      AnyKinDriverMarker Driver =    {
        
        AnyDrawKinMeasure Draw =         {
          Visible = On;
          Opacity = 1;
          Label = Off;
          Size = 0.01;
          Line = On;
          Text = "";
          TextSize = 30;
        };
        
        Linear.Ref=0;
        AnyRefFrame &ref1 = ...InsertionNode1.MarkerName;
        AnyParamFun &ref2 = Main.ModelSetup.C3DFileData.Points.Markers.MarkerName.PosInterpol;
        WeightFun={&.WeightFun};
      };
      
    };
  };  
  
  AnyFolder &ref=  Main.Studies.ParameterIdentification ;
  ref={
    
    #if OptX =="On" 
    AnyDesVar MarkerName##X = {      Val =..sRelOptEdit[0];    
      Min=-100;
      Max=100;      
    };
    #endif
    
    #if OptY =="On"
    AnyDesVar MarkerName##Y = {    Val = ..sRelOptEdit[1];   
      Min=-100;
      Max=100;      
    };
    #endif
    
    #if OptZ =="On"
    AnyDesVar MarkerName##Z = {      Val = ..sRelOptEdit[2];   
      Min=-100;
      Max=100;      
    };
    #endif    
  };
  #endif 
  
  
  
  
  #if Model2 == 1
  
  
  
  AnyFolder &InsertionNode2 =Main.Studies.HumanModel.BodyModel.MarkerPlacement;
  InsertionNode2 ={
    AnyRefNode MarkerName={
      //      sRel=.ScalingNode.sRel+.Scale(DesignVar(..sRelOptEdit)*.ScalingNode.ARel');
      //sRel=.ScalingNode.sRel+.GeomScale((..sRelOptEdit)*.ScalingNode.ARel');
#if sRelCustomScalingOnOff == "On"
       sRel= .CustomMarkerScaling(..sRelOpt) + ..sRelOptEdit*.AnatomicalFrame.ARel';
#else
#if ReadsRelOptFromFile == "Off"       
      #if sRelOptScalingOnOff == "On"
        sRel= .AnatomicalFrame.sRel+ (.GeomScale(..sRelOpt) + ..sRelOptEdit )*.AnatomicalFrame.ARel'  ;
      #else
        sRel= .AnatomicalFrame.sRel+ (..sRelOpt + ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
      #endif      
#else
                sRel= .AnatomicalFrame.sRel+ ({..InputFile.Data[0][0],..InputFile.Data[1][0],..InputFile.Data[2][0]}+ ..sRelOptEdit )*.AnatomicalFrame.ARel' ;
#endif
#endif      
      
      AnyDrawNode DrawMarker = 
      {
        Visible = Off;
        Opacity = 0.5;
        RGB = {1, 0, 0};
        ScaleXYZ = {0.01, 0.01, 0.01};
      };
      
    };//create the marker 
  };
  
  
  Main.Studies.InverseDynamicStudy.EnvironmentModel.DrawC3DMarkers = {
    AnyDrawVector MarkerName = {
      Visible = On;
      Opacity = 0.5;
      Vec = {Main.ModelSetup.C3DFileData.Points.Markers.MarkerName.PosInterpol(Main.Studies.InverseDynamicStudy.t)}[0];
      PointAway = On;
      GlobalCoord = On;
      Line =  {
        Style = Line3DStyleFull;
        Thickness = 0.0000000001;
        RGB = {0, 0, 1};
        End = {
          Style = Line3DCapStyleEllipsoid;
          RGB = {0, 0, 1};
          Thickness = 0.02;
          Length = 0.04;
        };
      };
      AnyRefFrame &Globalref = Main.Studies.InverseDynamicStudy.EnvironmentModel.GlobalRef;
    };
  };
  
  
  
  AnyFolder &ref2=  Main.Studies.LoadParametersOptimizationResults;
  
  ref2={
    #if OptX =="On" 
    
    AnyDesVar MarkerName##X = {      Val =..sRelOptEdit[0];    
      Min=-100;
      Max=100;      
    };
    
    #endif
    
    #if OptY =="On"
    AnyDesVar MarkerName##Y = {    Val = ..sRelOptEdit[1];   
      Min=-100;
      Max=100;      
      
    };
    
    #endif
    
    #if OptZ =="On"
    AnyDesVar MarkerName##Z = {      Val = ..sRelOptEdit[2];   
      Min=-100;
      Max=100;      
    };
    
    #endif
    
  };
  #endif 
  
}; // End of InsertSegmentClass






