  AnyFunTransform3D &CustomMarkerScaling = SubjectSpecificScaling.RegTransform;
  AnyFunTransform3D &Femur2CT = SubjectSpecificScaling.Seg2CT;
  AnyFunTransform3D &Flex2scaledSeg = SubjectSpecificScaling.Flex2scaledSeg;
  AnyFunTransform3D &Femur2Flexed = SubjectSpecificScaling.Seg2Flexed;
  
//------------------------------------------------------------------------------
// Surface fits for entire lateral and medial condyles, for new hinge joint model
//
//  AnyDrawSurf Medial_TF_surf = {
//    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Medial_TF.stl";
//    Visible=Off;
//    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
//    RGB = {0,1,0};
//    AnyFunTransform3D &Scale =.CustomMarkerScaling;
//    Face=-1;
//    AnyInt NumPoints = STL_Size(FileName, 1)[0];
//    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
//  };
  
//  AnyDrawSurf Lateral_TF_surf = {
//    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Lateral_TF.stl";
//    Visible=Off;
//    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
//    RGB = {0,1,0};
//    AnyFunTransform3D &Scale =.CustomMarkerScaling;
//    Face=-1;
//    AnyInt NumPoints = STL_Size(FileName, 1)[0];
//    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
//  };

//  AnyFloat TF_points =arrcat(Medial_TF_surf.points, Lateral_TF_surf.points);
//  FitCylinder(TF)
//  FitCylinder_PC(TF,Medial_TF,Off,Off)
//  FitCylinder_PC(TF,Lateral_TF,Off,Off)
//------------------------------------------------------------------------------

// Bring in STL surfaces to acquire points needed for cylinder fits
AnyDrawSurf Medial_TF_EFC_surf = {
    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Medial_TF_EFC.stl";
    Visible=Off;
    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
    RGB = {0,0,1};
    AnyFunTransform3D &Scale =.CustomMarkerScaling;
    Face=-1;
    AnyInt NumPoints = STL_Size(FileName, 1)[0];
    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
  };
  AnyDrawSurf Lateral_TF_EFC_surf = {
    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Lateral_TF_EFC.stl";
    Visible=Off;
    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
    RGB = {0,0,1};
    AnyFunTransform3D &Scale =.CustomMarkerScaling;
    Face=-1;
    AnyInt NumPoints = STL_Size(FileName, 1)[0];
    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
  };
  
  AnyDrawSurf Medial_TF_FFC_surf = {
    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Medial_TF_FFC.stl";
    Visible=Off;
    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
    RGB = {1,0,0};
    AnyFunTransform3D &Scale =.Flex2scaledSeg;
    Face=-1;
    AnyInt NumPoints = STL_Size(FileName, 1)[0];
    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
  };
  
  AnyDrawSurf Lateral_TF_FFC_surf = {
    FileName = ANYBODY_PATH_MODELUTILS +"\MovingAxisKnee\STLs\Lateral_TF_FFC.stl";
    Visible=Off;
    ScaleXYZ = {1.0, 1.0, 1.0}*..AMirroring;
    RGB = {1,0,0};
    AnyFunTransform3D &Scale =.Flex2scaledSeg;
    Face=-1;
    AnyInt NumPoints = STL_Size(FileName, 1)[0];
    AnyFloat points = GetVertices(iarr(0, 1, NumPoints-1));
  };
  
  // to visualise point clouds (EFC blue, FFC red)
  AddPointCloud(Medial_TF_EFC,0,1)
  AddPointCloud(Medial_TF_FFC,1,0)
  AddPointCloud(Lateral_TF_EFC,0,1)
  AddPointCloud(Lateral_TF_FFC,1,0)

  // combine medial and lateral points together, 
  // fit overall cylinder to achieve z-direction, 
  // use this direction for medial & lateral cylinder fits
  AnyFloat TF_EFC_points =arrcat(Medial_TF_EFC_surf.points, Lateral_TF_EFC_surf.points);
  AnyFloat TF_FFC_points =arrcat(Medial_TF_FFC_surf.points, Lateral_TF_FFC_surf.points);

  FitCylinder(TF_EFC)
  FitCylinder(TF_FFC)

  FitCylinder_PC(TF_EFC,Medial_TF_EFC,On,On)
  FitCylinder_PC(TF_EFC,Lateral_TF_EFC,On,On)
  FitCylinder_PC(TF_FFC,Medial_TF_FFC,On,On)
  FitCylinder_PC(TF_FFC,Lateral_TF_FFC,On,On)
  
  // bring EFC points and necessary anatomical landmarks into CT (TF Extension position) reference frame
  AnyFolder CT_Data={
  AnyVec3 Medial_TF_EFC = .Femur2CT(.Medial_TF_EFC.sRel);
  AnyVec3 Lateral_TF_EFC = .Femur2CT(.Lateral_TF_EFC.sRel);
  AnyVec3 MedialEpicondyle= .Femur2CT(.EpicondylusFemorisMedialis.sRel);
  AnyVec3 LateralEpicondyle= .Femur2CT(.EpicondylusFemorisLateralis.sRel);
  AnyVec3 HipJointCenter= .Femur2CT(.HipJoint.sRel);
  };
  
  // bring FFC points and necessary anatomical landmarks into Flexed (TF Flexion position) reference frame
  AnyFolder Flexed_Data={
  AnyVec3 Medial_TF_FFC = .Femur2Flexed(.Medial_TF_FFC.sRel);
  AnyVec3 Lateral_TF_FFC = .Femur2Flexed(.Lateral_TF_FFC.sRel);
  AnyVec3 MedialEpicondyle= .Femur2Flexed(.EpicondylusFemorisMedialis.sRel);
  AnyVec3 LateralEpicondyle= .Femur2Flexed(.EpicondylusFemorisLateralis.sRel);
  AnyVec3 HipJointCenter= .Femur2Flexed(.HipJoint.sRel);
  };

  AnyVec3 rOffset= KneeJointAnatomicalFrame.sRel;
  AnyMat33 AOffset= KneeJointAnatomicalFrame.ARel;
  
  KneeJointAnatomicalFrame = {
    AnyVec3 rOffset= sRel;
    AnyMat33 AOffset= ARel;

    AnyRefNode Lateral_TF_EFC = {
      DEFINE_LOCAL_COORDINATE(..Lateral_TF_EFC.sRel)
      AnyDrawNode drw={Visible=Off;RGB={0,0,1};ScaleXYZ={1,1,1}*0.002;};
    };
    AnyRefNode Medial_TF_EFC = {
      DEFINE_LOCAL_COORDINATE(..Medial_TF_EFC.sRel)
      AnyDrawNode drw={Visible=Off;RGB={0,0,1};ScaleXYZ={1,1,1}*0.002;};
    }; 
    AnyRefNode TEMP_Lateral_TF_FFC = {
      DEFINE_LOCAL_COORDINATE(..Lateral_TF_FFC.sRel)
    };
    AnyRefNode Medial_TF_FFC = {
      DEFINE_LOCAL_COORDINATE(..Medial_TF_FFC.sRel)
//      AnyDrawNode drw={Visible=On;ScaleXYZ={1,1,1}*0.002;RGB={0,1,0};};
    };
    
  // Unit Vector directed along Tibiofemoral FFCs m->l (Femur Registration)
  AnyVec3 e1 = (TEMP_Lateral_TF_FFC.sRel - Medial_TF_FFC.sRel)/vnorm(TEMP_Lateral_TF_FFC.sRel - Medial_TF_FFC.sRel,2);

    AnyRefNode Lateral_TF_FFC = {
     sRel = (.Medial_TF_FFC.sRel)+(.e1*..L1);
//     AnyDrawNode drw={Visible=On;ScaleXYZ={1,1,1}*0.002;RGB={0,1,0};};
    };
    AnyRefNode InvisibleFemurRotationNode = {
      sRel = ...InvisibleFemur_TF.MA_AnatomicalFrame.sRel;
      ARel = .AOffset'*...InvisibleFemur_TF.MA_AnatomicalFrame.ARel;
      AnyDrawNode drw={Visible=Off;RGB={0,1,0};ScaleXYZ={1,1,1}*0.002;};
    };
    
    //check to see if L is uniform and if the unit vector is pointing in the correct direction  
    AnyVar FFC_mag_check=vnorm(...Sign*(Lateral_TF_FFC.sRel - Medial_TF_FFC.sRel),2.0);
    AnyVec3 FFC_vec_check=(...Sign*(Lateral_TF_FFC.sRel - Medial_TF_FFC.sRel))/vnorm(...Sign*(Lateral_TF_FFC.sRel - Medial_TF_FFC.sRel));
  };

