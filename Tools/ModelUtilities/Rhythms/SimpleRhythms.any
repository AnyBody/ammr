 
 #class_template RhytmDriverLinear(__CLASS__=AnyKinEq, _REDEFINE_VARIABLES=Off){

   #if _REDEFINE_VARIABLES != On
   // The class declares expected RhythmCoefficients variables
   #var AnyVector RhythmCoefficients = ones(1,Measures.Input.nDim)[0];
   #endif
   
   
   
   //AnyInt DependentDOFs = set_difference(iarr(0, InputDim-1), {INDEPENDENT_DOF});
   
   AnyIntVar InputDim = iffun(NumElemOf(Measures.Input.MeasureOrganizer), NumElemOf(Measures.Input.MeasureOrganizer), Measures.Input.nDim);
   
   AnyFolder Measures = 
   {
      AnyKinMeasureOrg Input = 
      {
        #var MeasureOrganizer = #default;
      };
   };
      
   AnyKinMeasureLinComb RhythmMeasure = {
      AnyKinMeasure& ref = .Measures.Input;
      
      OutDim = .InputDim-1;
      #var Const = zeros(1, OutDim)[0];
      
      AnyVector LinWeights = REPLACE_ZEROS(.RhythmCoefficients, 10^-6)^-1;
      #var Coef = reshape(
          arrcat(reshape(diag(take(LinWeights, iarr(0, OutDim-1)))',{OutDim,OutDim}), zeros(1,OutDim))'
          - arrcat(zeros(1,OutDim), diag( take(LinWeights, iarr(1,OutDim))))'
          , {OutDim,OutDim+1});
      
   };
   
   AnyFolder Weights = {
       AnyFunConst Fun ={
           Value ??= repmat(..nDim, 0.01); 
       };  
   };
   
   CType ??= repmat(nDim, Hard);
   WeightFun ??= {&Weights.Fun};
   
    Reaction ={
      Type ??= repmat(nDim, Off);
    };     
 
 };
 
 


#class_template RhytmDriverFunInterpol(IDX=0, ARG1=0.2, ARG2=0, ARG3=0, ARG4=0,
  __CLASS__= AnyFunInterpol) {
    
    
        
    AnyVector x_arr = linspace(ARG1/2, max({20*ARG1/2, 2*pi}), 100);
    Type=Bspline;
    T =     arrcat(-1*flip(x_arr), {0.0}, x_arr); 
    Data = { arrcat(
          .CoefficientsNeg[IDX]*-1*flip(x_arr),
          {0.0}, 
          .CoefficientsPos[IDX]* x_arr
        )};
 //   
//   Type = Bspline;
//   T = arrcat(flip(-1*...abs1), {0.0}, ...abs1);
//   Data = {arrcat( ...RhythmWeightsNegative[IDX]*flip(-1*...abs1), {0.0}, ...RhythmWeights[IDX]*...abs1) };

};


#class_template RhytmDriverTwoWayLinear(__CLASS__=AnyKinEq, NDIM, _REDEFINE_VARIABLES=Off){
     
   #if _REDEFINE_VARIABLES != On
   #var AnyVector RhythmCoefficients;
   #var AnyVector RhythmCoefficientsNegative = RhythmCoefficients;
   
      
   #var AnyVar TransitionInterval=0.1;
   #endif   
   
   
      
   AnyIntVar InputDim = iffun(NumElemOf(Measures.Input.MeasureOrganizer), NumElemOf(Measures.Input.MeasureOrganizer), Measures.Input.nDim);

   
   AnyFolder Weights = {
       AnyFunConst Fun ={
           Value ??= repmat(..nDim, 0.01); 
       };  
   };
   
   CType ??= repmat(nDim, Hard);
   WeightFun ??= {&Weights.Fun};
   
   Reaction ={
     Type ??= repmat(nDim, Off);
   };
   
   
   
   AnyKinMeasureLinComb CombinedMeasure = {
      AnyKinMeasure& GearedMeasureRef = .Measures.GearedMeasure;
      
      OutDim = NDIM-1;
      Const = zeros(1, OutDim)[0];
      
      Coef = reshape(
          arrcat(eye(OutDim), zeros(1,OutDim))'
          - arrcat(zeros(1,OutDim), eye(OutDim))'
          , {OutDim,OutDim+1});
      
   };
   
   AnyFolder Measures = {
      AnyKinMeasureOrg Input = 
      {
         #var MeasureOrganizer = #default;
      };
            
      AnyKinMeasureFunComb1 GearedMeasure =
      {
        AnyKinMeasure& InputRef = .Input;
        
        Functions = ObjSearch("ParamFuns.Fun*", "AnyFunInterpol");
         
         MultipleSubTemplates ParamFuns(
            NUM=NDIM,
            CLASS_TEMPLATE="RhytmDriverFunInterpol",
            NAME_PREFIX=Fun,
            ARG1 = ....TransitionInterval
          ) = {
           #var AnyVector CoefficientsPos = 1/REPLACE_ZEROS(...RhythmCoefficients, 10^-6);
           #var AnyVector CoefficientsNeg = 1/REPLACE_ZEROS(...RhythmCoefficientsNegative, 10^-6); 
        };

      };
      
      
   };
   
};







