#class_template KinMsrClass (
IDX = 0,
ARG1 = BaseObject,
ARG2 = TargetObject,
ARG3 = AnyKinLinear, // Test class creation using ARG3
ARG4 = 0, // Unused
ARG5 = 0, // Unused 
ARG_INI_SWITCH = 0, 
ARG_INI = NOT_DEFINED)

{
  AnyRefFrame &BaseObject = ARG1.Node##IDX;
  AnyRefFrame &TargetObject = ARG2.Node##IDX;
//  AnyRefFrame &StrengthObject = ARG2.Node##IDX;
  AnyComponentDefinition obj = {};
//  AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
  
  AnyKinLinear Lin={
    Ref=0;
    AnyRefFrame &BaseObject=.BaseObject;
    AnyRefFrame &TargetObject=.TargetObject;
  };

  ARG3 testclass={
    Ref=0;
    AnyRefFrame &BaseObject=.BaseObject;
    AnyRefFrame &TargetObject=.TargetObject;
  };

};

  
//#if ARG_INI_SWITCH == 0
//  //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
//  #var AnyVar UserDefinedDistLimitLow = DesignVar(-0.01); 
//  //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
//  #var AnyVar UserDefinedDistLimitHigh = DesignVar(0.01) ;   
//  //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
//  #var AnyVar UserDefinedRadiusLimit= DesignVar(0.02);  
//  //high limit for the strength measure function, if the velocity measured is above this val. the strength will be zero
//  #var AnyVar UserDefinedVelLimitHigh= DesignVar(0.8); 
//  
//  #var AnyVec3 UserDefinedGroundVel = {0,0,0};
//  
//  #var AnyVar Strength = DesignVar(1000);  //strength of muscles
//  #var AnyVar StaticFrictionCoefficient = DesignVar(0.5); //Friction coefficient
//  #var AnyVar ScaleFactor = DesignVar(1); //scale factor for draw vectors it can be set differently than by the drawsettings
//    
//#else
//  AnyFolder& InitializationArgs = ARG_INI;
//  //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
//  #var AnyVar UserDefinedDistLimitLow = ARG_INI.UserDefinedDistLimitLow; 
//  //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
//  #var AnyVar UserDefinedDistLimitHigh = ARG_INI.UserDefinedDistLimitHigh ;   
//  //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
//  #var AnyVar UserDefinedRadiusLimit = ARG_INI.UserDefinedRadiusLimit;  
//  //high limit for the strength measure function, if the velocity measured is above this val. the strength will be zero
//  #var AnyVar UserDefinedVelLimitHigh = ARG_INI.UserDefinedVelLimitHigh; 
//  
//  #var AnyVec3 UserDefinedGroundVel = ARG_INI.UserDefinedGroundVel;
//  
//  #var AnyVar Strength = ARG_INI.Strength;  //strength of muscles
//  #var AnyVar StaticFrictionCoefficient = ARG_INI.StaticFrictionCoefficient; //Friction coefficient
//  #var AnyVar ScaleFactor = ARG_INI.ScaleFactor; //scale factor for draw vectors it can be set differently than by the drawsettings
//  
////  //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
////  #var AnyVar UserDefinedDistLimitLow = InitializationArgs.UserDefinedDistLimitLow; 
////  //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
////  #var AnyVar UserDefinedDistLimitHigh = InitializationArgs.UserDefinedDistLimitHigh ;   
////  //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
////  #var AnyVar UserDefinedRadiusLimit = InitializationArgs.UserDefinedRadiusLimit;  
////  //high limit for the strength measure function, if the velocity measured is above this val. the strength will be zero
////  #var AnyVar UserDefinedVelLimitHigh = InitializationArgs.UserDefinedVelLimitHigh; 
////  
////  #var AnyVec3 UserDefinedGroundVel = InitializationArgs.UserDefinedGroundVel;
////  
////  #var AnyVar Strength = InitializationArgs.Strength;  //strength of muscles
////  #var AnyVar StaticFrictionCoefficient = InitializationArgs.StaticFrictionCoefficient; //Friction coefficient
////  #var AnyVar ScaleFactor = InitializationArgs.ScaleFactor; //scale factor for draw vectors it can be set differently than by the drawsettings
//  
//
//#endif
//  
////  #var AnyInt NormalDirection = Z;
////  #var AnyInt FrictionDirection1 = X;
////  #var AnyInt FrictionDirection2 = Y;
//  
//  
//  
//  #if (ARG3)
//  BaseObject = {
//    AnyRefNode CylRotNode = {
//      sRel = {0,0,0};
//      ARel = RotMat(..RotCoefY*..GlobalRotCoef*pi/2,y)*RotMat(..RotCoefX*..GlobalRotCoef*pi/2,x);
//      AnyRefNode CylNode = {
//        sRel = {0,0,...UserDefinedDistLimitLow};
//        AnySurfCylinder TriggerCyl = 
//        {
//          Radius = ....UserDefinedRadiusLimit;
//          Length = - ....UserDefinedDistLimitLow + ....UserDefinedDistLimitHigh;
//          CapRatio = 0.001;
//          AnyDrawParamSurf Draw = 
//          {
//            Visible = On;
//            Opacity = 0.5;
//          };
//        };
//      };
//    };
//  };
//  #endif
//  
//  #if (ARG4)
//  TargetObject = {
//    AnyDrawNode DrawContactTarget = {
//      ScaleXYZ = {1,1,1}*0.015;
//    };
//  };
//  #endif
//  
//      #if ARG5 == "Z"
//    #var AnyInt NormalDirection = 2;
//    #var AnyInt FrictionDirection1 = 0;
//    #var AnyInt FrictionDirection2 = 1;
//    #endif
//    
//    #if ARG5 == "Y"
//    #var AnyInt NormalDirection = 1;
//    #var AnyInt FrictionDirection1 = 0;
//    #var AnyInt FrictionDirection2 = 2;
//    #endif
//    
//    #if ARG5 == "X"
//    #var AnyInt NormalDirection = 0;
//    #var AnyInt FrictionDirection1 = 1;
//    #var AnyInt FrictionDirection2 = 2;
//    #endif 
//
////  AnyInt X = 0;
////  AnyInt Y = 1;
////  AnyInt Z = 2;
//  
//  AnyVar GlobalRotCoef = iffun(2-NormalDirection,1,0); // 0 if z is normal, if not 1
//  AnyVar RotCoefY = iffun(NormalDirection,0,1);
//  AnyVar RotCoefX = iffun(NormalDirection,-1,0);
//  
//  AnyIntArray Direction = {NormalDirection,FrictionDirection1,FrictionDirection2}; //first element gives normal direction
//  
//  InitializationArgs = {
////        AnyIntArray Direction = Main.Model.Kinetics.ContClassSplit.ContactDetection.ContDet.ContDet_000.Direction;
//        AnyIntArray Direction = .Direction;
//
//};
////  #include  "ContDetAndContEleInclude.any"
//
//  AnyFolder Push = {
//     #include  "ContactDetectionCondition.any"
////     #include  "ContactConditionSmoothing.any"
////     #include  "CreateContactElement.any" 
//   };
//  
//};
//




/*
#class_template ContDetClass (AnyRefFrame &BaseObject, AnyRefFrame &TargetObject, DisplayTriggerVolume = 0, DisplayTargetNode=0)
  {
    AnyComponentDefinition obj = {};
    AnyRefFrame &StrengthObject=TargetObject; //Node used for strength measurement, occasionally this is different from the target object
    
    AnyFolder &DrawRef=Main.DrawSettings; //reference to the folder which contains drawsettings
    //low limit for the strength measure function, if the distance measured along Direction[0] is below this val. the strength will be zero (negative)
    #var AnyVar UserDefinedDistLimitLow; 
    //high limit for the strength measure function, if the distance measured along Direction[0] is above this val. the strength will be zero
    #var AnyVar UserDefinedDistLimitHigh ; 

    //high limit for the strength measure function, if the radius measured along the plane with Direction[0] as normal is above this val. the strength will be zero
    #var AnyVar UserDefinedRadiusLimit;

    //high limit for the strength measure function, if the velocity measured is above this val. the strength will be zero
    #var AnyVar UserDefinedVelLimitHigh; 
    
    #var AnyVec3 UserDefinedGroundVel = {0,0,0};
    
    #if (DisplayTriggerVolume)
    BaseObject = {
      AnyRefNode CylRotNode = {
        sRel = {0,0,0};
        ARel = RotMat(..RotCoefY*..GlobalRotCoef*pi/2,y)*RotMat(..RotCoefX*..GlobalRotCoef*pi/2,x);
        AnyRefNode CylNode = {
          sRel = {0,0,...UserDefinedDistLimitLow};
          AnySurfCylinder TriggerCyl = 
          {
            Radius = ....UserDefinedRadiusLimit;
            Length = - ....UserDefinedDistLimitLow + ....UserDefinedDistLimitHigh;
            CapRatio = 0.001;
            AnyDrawParamSurf Draw = 
            {
              Visible = On;
              Opacity = 0.5;
            };
          };
        };
      };
    };
    #endif
    
    #if (DisplayTargetNode)
    TargetObject = {
      AnyDrawNode DrawContactTarget = {
        ScaleXYZ = {1,1,1}*0.015;
      };
    };
    #endif
    
    #var AnyVar Strength;  //strength of muscles
    #var AnyVar StaticFrictionCoefficient; //Friction coefficient
    #var AnyVar ScaleFactor =1; //scale factor for draw vectors it can be set differently than by the drawsettings
    
    #var AnyInt NormalDirection = Z;
    #var AnyInt FrictionDirection1 = X;
    #var AnyInt FrictionDirection2 = Y;
    
    AnyInt X = 0;
    AnyInt Y = 1;
    AnyInt Z = 2;
    
    AnyVar GlobalRotCoef = iffun(2-NormalDirection,1,0); // 0 if z is normal, if not 1
    AnyVar RotCoefY = iffun(NormalDirection,0,1);
    AnyVar RotCoefX = iffun(NormalDirection,-1,0);
    
    AnyIntArray Direction = {NormalDirection,FrictionDirection1,FrictionDirection2}; //first element gives normal direction
   
    #include  "ContDetAndContEleInclude.any"
  };