//define = (
//  [
//    {'TEST_CUSTOM_SCALING': 'ON'},
//    {'TEST_CUSTOM_SCALING': 'OFF'},
//  ],
//  [
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_NONE_'},
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_TRUNK_TO_LEG_'},
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_LEG_TO_TRUNK_'},
//  ],
//  [
//    {'BM_TRUNK_CAVITY_MODEL': '_CAVITY_MODEL_BUCKLE_'},
//    {'BM_TRUNK_CAVITY_MODEL': '_CAVITY_MODEL_VOLUME_'},
//  ],
//  [
//    {'BM_TRUNK_THORACIC_MODEL': '_THORACIC_MODEL_RIGID_'},
//    {'BM_TRUNK_THORACIC_MODEL': '_THORACIC_MODEL_FLEXIBLE_'},
//  ],
//)
//ignore_errors = ['BodyModel.UnallowedCombination','Model loading skipped']

#include "../libdef.any"

#ifndef TEST_NAME
  #define BM_SCALING 0
  #define TEST_CUSTOM_SCALING ON
//  #define BM_LEG_TRUNK_INTERFACE 1
  #define TEST_NAME "test_trunk_load_pos_2"
  #define BM_TRUNK_THORACIC_MODEL 0
  #define BM_TRUNK_CAVITY_MODEL 0
#endif

// Ensure zero posture when using flexible thorax
#if BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_
  #define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION OFF
  #define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION OFF
  #define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING OFF
  #define BM_TRUNK_LUMBAR_THORACIC_LINK OFF
  #define BM_TRUNK_THORACIC_RHYTHM OFF
#endif

// Volume model requires muscles to work
#if BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_
  #define BM_TRUNK_MUSCLES ON
#else
  #define BM_TRUNK_MUSCLES OFF
#endif

#define BM_ARM_RIGHT OFF
#define BM_ARM_LEFT OFF
#define BM_LEG_MODEL _LEG_MODEL_TLEM2_
#define BM_LEG_MUSCLES_BOTH OFF
#define BM_MANNEQUIN_DRIVER_DEFAULT ON

Main = {
  #include "<ANYBODY_PATH_BODY>/HumanModel.any"
  
  // This test aims at verifying that all segments and nodes 
  // are in the correct position after loading the model.
  // and after running kinematics.
  #include "load_pos.any"
  
  #if TEST_CUSTOM_SCALING == ON
  // Custom scaling is enebaled for one of the tests to ensure that system is maintained
  AnyFixedRefFrame Glb = {
    AnySeg Box = {
      AnyVar Width = 0.2;
      AnyVar Bottom = -0.2;
      AnyVar Front = 0.2;
      AnyVar Top = 0.4;

      Mass = 1;
      Jii = {1,1,1}*0.01;
      r0 = {0.3, 0.1, 0.0};
      // Bottom four nodes
      AnyRefNode RB = {
        sRel = {0, .Bottom, .Width-0.1};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LB = {
        sRel = {0, .Bottom, -.Width+0.1};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RB2 = {
        sRel = {.Front, .Bottom, .Width-0.1};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LB2 = {
        sRel = {.Front, .Bottom, -.Width+0.1};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      // Mid points
      AnyRefNode RM = {
        sRel = {0, 0, .Width+0.15};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LM = {
        sRel = {0, 0, -.Width-0.15};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RM2 = {
        sRel = {.Front, 0, .Width+0.15};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LM2 = {
        sRel = {.Front, 0, -.Width-0.15};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      // Top four nodes
      AnyRefNode RT= {
        sRel = {0, .Top, .Width-0.1};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LT= {
        sRel = {0, .Top, -.Width+0.1};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RT2 = {
        sRel = {.Front, .Top, .Width-0.1};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LT2 = {
        sRel = {.Front, .Top, -.Width+0.1};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
    };
  };
  
  Main.HumanModel.BodyModel.Trunk.Segments.PelvisSeg = {
    AnyRefNode CustomScalingPoints = {
      AnyRefNode RB = {
        sRel = {0, Main.Glb.Box.Bottom, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LB = {
        sRel = {0, Main.Glb.Box.Bottom, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RB2 = {
        sRel = {Main.Glb.Box.Front, Main.Glb.Box.Bottom, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LB2 = {
        sRel = {Main.Glb.Box.Front, Main.Glb.Box.Bottom, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={1,0,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
    };
  };

  Main.HumanModel.BodyModel.Trunk.Segments.T10Seg = {
    AnyRefNode CustomScalingPoints = {
      AnyRefNode RM = {
        sRel = {0, 0.1, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LM = {
        sRel = {0, 0.1, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RM2 = {
        sRel = {Main.Glb.Box.Front, 0.1, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LM2 = {
        sRel = {Main.Glb.Box.Front, 0.1, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,0,1}; ScaleXYZ = {0.05,0.05,0.05};};
      };
    };
  };

  Main.HumanModel.BodyModel.Trunk.Segments.T1Seg = {
    AnyRefNode CustomScalingPoints = {
      AnyRefNode RT= {
        sRel = {0, Main.Glb.Box.Top, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LT= {
        sRel = {0, Main.Glb.Box.Top, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode RT2 = {
        sRel = {Main.Glb.Box.Front, Main.Glb.Box.Top, Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
      AnyRefNode LT2 = {
        sRel = {Main.Glb.Box.Front, Main.Glb.Box.Top, -Main.Glb.Box.Width};
        AnyDrawNode drw = {RGB={0,1,0}; ScaleXYZ = {0.05,0.05,0.05};};
      };
    };
  };
  
  
  AnyFunTransform3DLin2 CustomScaling = {
    AnyFolder &src = Main.HumanModel.BodyModel.Trunk.Segments;
    AnyFolder &target = Main.Glb.Box;
    
    Points0 = {
      src.PelvisSeg.CustomScalingPoints.RB.sRel,
      src.PelvisSeg.CustomScalingPoints.LB.sRel,
      src.PelvisSeg.CustomScalingPoints.RB2.sRel,
      src.PelvisSeg.CustomScalingPoints.LB2.sRel,
      src.T10Seg.CustomScalingPoints.RM.sRel,
      src.T10Seg.CustomScalingPoints.LM.sRel,
      src.T10Seg.CustomScalingPoints.RM2.sRel,
      src.T10Seg.CustomScalingPoints.LM2.sRel,
      src.T1Seg.CustomScalingPoints.RT.sRel,
      src.T1Seg.CustomScalingPoints.LT.sRel,
      src.T1Seg.CustomScalingPoints.RT2.sRel,
      src.T1Seg.CustomScalingPoints.LT2.sRel,
    };
    Points1 = {
      target.RB.sRel,
      target.LB.sRel,
      target.RB2.sRel,
      target.LB2.sRel,
      target.RM.sRel,
      target.LM.sRel,
      target.RM2.sRel,
      target.LM2.sRel,
      target.RT.sRel,
      target.LT.sRel,
      target.RT2.sRel,
      target.LT2.sRel,
    };
    Mode = VTK_LANDMARK_AFFINE;
  };
  
  Main.HumanModel.Scaling.GeometricalScaling.Pelvis.ScaleFunction.Custom = &CustomScaling;
  Main.HumanModel.Scaling.GeometricalScaling.Lumbar.ScaleFunction.Custom = &CustomScaling;
  Main.HumanModel.Scaling.GeometricalScaling.Thorax.ScaleFunction.Custom = &CustomScaling;
  Main.HumanModel.Scaling.GeometricalScaling.Cervical.ScaleFunction.Custom = &CustomScaling;
  
  #endif 
  
  // In this test model, the norm exponent power set to -2000 instead of -400, to make more accurate kinematics to fulfill the 1e-10 tolerance.
  #ifdef RECTUS_MUSCLE_LINE_CONTROL
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Constraints_RectusLine.Layer1.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Constraints_RectusLine.Layer2.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Constraints_RectusLine.Layer3.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Constraints_RectusLine.Layer4.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Constraints_RectusLine.Layer5.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Pelvic_Constraints_RectusLine.Layer_Pelvic1.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Pelvic_Constraints_RectusLine.Layer_Pelvic2.Norm.a = -4000;
  HumanModel.BodyModel.Trunk.Abdominal.Layer_Pelvic_Constraints_RectusLine.Layer_Pelvic3.Norm.a = -4000;
  #endif
  
  AnyKinStudy Study = {
    AnyFolder& BodyModel = Main.HumanModel.BodyModel;
    AnyFolder& DefaultDrivers = Main.HumanModel.DefaultMannequinDrivers;
    // Correct the load time position of the Pelvis so we can drive the AnatomicalFrameTrunk to zero, without the model moving
    Main.HumanModel.Mannequin.Posture.PelvisPosX = Main.HumanModel.BodyModel.Trunk.Segments.PelvisSeg.AnatomicalFrameTrunk.sRel[0];
    Main.HumanModel.Mannequin.Posture.PelvisPosY = Main.HumanModel.BodyModel.Trunk.Segments.PelvisSeg.AnatomicalFrameTrunk.sRel[1];
    Main.HumanModel.Mannequin.Posture.PelvisPosZ = Main.HumanModel.BodyModel.Trunk.Segments.PelvisSeg.AnatomicalFrameTrunk.sRel[2];
    
    // Set spine to zero when using the flexible thorax
    #if BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_
    
      Main.HumanModel.Mannequin.Posture.PelvisT12Extension = 0;
      Main.HumanModel.Mannequin.Posture.T12T1Extension = 0;
      
      AnyKinEq extension_constraint = {
        AnyKinMeasure &pelvis_t12_ext = Main.HumanModel.BodyModel.Interface.Trunk.PelvisT12Extension;
        AnyKinMeasure &t12_t1_ext = Main.HumanModel.BodyModel.Interface.Trunk.T12T1Extension;
        AnyKinMeasure& PelvisT12_Rot_ref = Main.HumanModel.BodyModel.Interface.Trunk.PelvisT12Rotation;      
        AnyKinMeasure& T12T1_Rot_ref = Main.HumanModel.BodyModel.Interface.Trunk.T12T1Rotation;
        AnyKinMeasure& PelvisT12_Latbend_ref = Main.HumanModel.BodyModel.Interface.Trunk.PelvisT12LateralBending;      
        AnyKinMeasure& T12T1_latbend_ref = Main.HumanModel.BodyModel.Interface.Trunk.T12T1LateralBending; 
      };
      
      AnyKinEqSimpleDriver spine_driver = {
        AnyKinMeasure& T11T12_1 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T11T12.Extension;      
        AnyKinMeasure& T10T11_2 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T10T11.Extension;      
        AnyKinMeasure& T9T10_3 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T9T10.Extension;      
        AnyKinMeasure& T8T9_4 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T8T9.Extension;      
        AnyKinMeasure& T7T8_5 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T7T8.Extension;      
        AnyKinMeasure& T6T7_6 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T6T7.Extension;      
        AnyKinMeasure& T5T6_7 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T5T6.Extension;      
        AnyKinMeasure& T4T5_8 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T4T5.Extension;      
        AnyKinMeasure& T3T4_9 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T3T4.Extension;      
        AnyKinMeasure& T2T3_10 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T2T3.Extension;      
        AnyKinMeasure& T1T2_11 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T1T2.Extension;
        AnyKinMeasure& T11T12_12 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T11T12.LateralBending;      
        AnyKinMeasure& T10T11_13 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T10T11.LateralBending;      
        AnyKinMeasure& T9T10_14 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T9T10.LateralBending;      
        AnyKinMeasure& T8T9_15 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T8T9.LateralBending;      
        AnyKinMeasure& T7T8_16 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T7T8.LateralBending;      
        AnyKinMeasure& T6T7_17 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T6T7.LateralBending;      
        AnyKinMeasure& T5T6_18 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T5T6.LateralBending;      
        AnyKinMeasure& T4T5_19 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T4T5.LateralBending;      
        AnyKinMeasure& T3T4_20 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T3T4.LateralBending;      
        AnyKinMeasure& T2T3_21 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T2T3.LateralBending;      
        AnyKinMeasure& T1T2_22 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T1T2.LateralBending;
        AnyKinMeasure& T11T12_23 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T11T12.Rotation;      
        AnyKinMeasure& T10T11_24 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T10T11.Rotation;      
        AnyKinMeasure& T9T10_25 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T9T10.Rotation;      
        AnyKinMeasure& T8T9_26 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T8T9.Rotation;      
        AnyKinMeasure& T7T8_27 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T7T8.Rotation;      
        AnyKinMeasure& T6T7_28 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T6T7.Rotation;      
        AnyKinMeasure& T5T6_29 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T5T6.Rotation;      
        AnyKinMeasure& T4T5_30 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T4T5.Rotation;      
        AnyKinMeasure& T3T4_31 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T3T4.Rotation;      
        AnyKinMeasure& T2T3_32 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T2T3.Rotation;      
        AnyKinMeasure& T1T2_33 = Main.HumanModel.BodyModel.Interface.Trunk.IntervertebralAngles.T1T2.Rotation;

        DriverPos = repmat(nDim, 0);
        DriverVel = repmat(nDim, 0);
      };
    #endif
    nStep = 1;
  };
};