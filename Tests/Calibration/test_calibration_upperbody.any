//ignore_errors = ['Currently, no room for tendon']
//fatal_warnings = [
//    "Penetration of surface",
//]
//define = (
//   [
//    {'BM_CALIBRATION_TYPE':'1'},
//    {'BM_CALIBRATION_TYPE':'2'},
//    {'BM_CALIBRATION_TYPE':'3'},
//   ]
//)
//
#include "libdef.any"

#ifndef TEST_NAME
  #define BM_CALIBRATION_TYPE 3
  #define TEST_NAME "test_calibration_upperbody.any_1"
#endif


#define BM_ARM_SHOULDER_RHYTHM ON

#define BM_ARM_MUSCLES_RIGHT _MUSCLES_3E_HILL_
#define BM_ARM_MUSCLES_LEFT _MUSCLES_3E_HILL_

#define BM_TRUNK_LUMBAR_LIGAMENTS OFF
#define BM_TRUNK_CERVICAL_MUSCLES OFF

#define BM_LEG_LEFT OFF
#define BM_LEG_RIGHT OFF



Main = 
{
  #include "<ANYBODY_PATH_BODY>/HumanModel.any"  

  AnyOperation& RunTest = Main.HumanModel.Calibration.CalibrationSequence;

  // Test to check that all muscles in the model are part of the calibration studies.
  // the test is excluded for the calibration combinations that do not make sense / are unimplemented
  #if BM_CALIBRATION_TYPE != 3
    AnyObjectPtrArray muscles_from_cal_studies = unique(flattenptr(ObjSearchRecursive(&Main.HumanModel.Calibration, "MuscleArr")));
    AnyObjectPtrArray muscles_right = unique(flattenptr(ObjSearchRecursive(&Main.HumanModel.BodyModel.Right.ShoulderArm.Muscles, "*", "AnyMuscle")));
    AnyObjectPtrArray muscles_left = unique(flattenptr(ObjSearchRecursive(&Main.HumanModel.BodyModel.Left.ShoulderArm.Muscles, "*", "AnyMuscle")));
    AnyObjectPtrArray muscles_from_model = arrcat(muscles_right, muscles_left);
  
    AnyInt test_all_mus_in_cal = expect(
      eqfun(
      NumElemOf(muscles_from_cal_studies),
      NumElemOf(muscles_from_model)
      ),
      "The number of muscles in the calibration studies do not match the number of muscles in the model!"
    );
  #endif
};


