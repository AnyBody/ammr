//fatal_warnings = [
//    "Penetration of surface",
//    "Number of allowed iterations for contact solution has been exceeded",
//]
//save_study= "Main.Study"

#define ANYBODY_PATH_OUTPUT "."


#include "libdef.any"
#include "../tools.any"
// ----------------------------------------------------------
// Model configuration:
// For more info on body model configuration options please load the model and double click on: 
// #path HTML_DOC "<AMMR_PATH_DOC>/bm_config/index.html"
// ----------------------------------------------------------

#define BM_LEG_RIGHT OFF
#define BM_LEG_LEFT OFF

#define BM_ARM_DELTOID_WRAPPING ON
#define BM_TRUNK_CAVITY_MODEL _CAVITY_MODEL_BUCKLE_

#define BM_SCALING _SCALING_LENGTHMASSFAT_

#define TEST_SEVERITY assert

// Use interpolation drivers to define motion
#define DriverSelection "FreePostureMove"

// actual model  
#include "DynamicTest/FreePostureFullBodyStatic.Main.any" 
Main = {
  
  Main.HumanModel.Anthropometrics.SegmentDimensions.Right.UpperArmLength = 0.35;
  Main.HumanModel.Anthropometrics.SegmentDimensions.Right.LowerArmLength = 0.35;
  Main.HumanModel.Anthropometrics.SegmentDimensions.Right.HandLength = 0.15;  
  Main.HumanModel.Anthropometrics.SegmentDimensions.Left.UpperArmLength = 0.35;
  Main.HumanModel.Anthropometrics.SegmentDimensions.Left.LowerArmLength = 0.35;
  Main.HumanModel.Anthropometrics.SegmentDimensions.Left.HandLength = 0.15;

  
  AnyInt TestTrigger = DesignVar(0);
 
  OPERATION_TEST_TRIGGER(Main.Study.InverseDynamics.PreOperation, Main.TestTrigger);

  Study ={
    
    Main.Study.InverseDynamics.Criterion.Type = MR_Quadratic;
    AnyFloat kin_tol = 2*Kinematics.KinematicTol;
    AnyFloat force_tol = 2*InverseDynamics.Criterion.SolverTolerance*InverseDynamics.Criterion.SolverNearSolutionFactor;
    InverseDynamics.Criterion.SolverNearSolutionFactor = 1;
    
    AnyFloat wrapping_tol = 1e-6;
    
    AnyInt ArmPositions = TEST_SEVERITY( 
      orfun( 
        not(Main.TestTrigger),  
        ltfun(Main.Study.SymmetryCheck.Arm.Kinematics.pos.NormalizedDifference, kin_tol)
      ),
      "Arm model positions asymmetric"
    );
    
    AnyInt ArmMuscleLengths = TEST_SEVERITY(
      orfun(
        not(Main.TestTrigger),
        ltfun(Main.Study.SymmetryCheck.Arm.Muscle.lmt.NormalizedDifference, kin_tol)
      ),
      "Arm muscle lengths asymmetric"
    );
    
    AnyInt ArmMuscleLengthVelocities = TEST_SEVERITY(
      orfun(
        not(Main.TestTrigger),
        ltfun(Main.Study.SymmetryCheck.Arm.Muscle.lmtDot.NormalizedDifference, kin_tol),
      ),
      "Arm muscle length velocities asymmetric"
    );

    AnyInt ArmMuscleStrengths = TEST_SEVERITY(
      orfun(
        not(Main.TestTrigger),
        ltfun(Main.Study.SymmetryCheck.Arm.Muscle.strength.NormalizedDifference, kin_tol),
      ),
      "Arm muscle strength asymmetric"
    );

    AnyInt ArmMuscleForces = TEST_SEVERITY(
      orfun(
        not(Main.TestTrigger),
        ltfun(Main.Study.SymmetryCheck.Arm.Muscle.ft.NormalizedDifference, force_tol),
      ),
      "Arm model symmetry: "+strval(max(Main.Study.SymmetryCheck.Arm.Muscle.ft.NormalizedDifference))
    );

    AnyInt ArmPolylinePoints = TEST_SEVERITY(
      orfun(
        not(Main.TestTrigger),
        ltfun(Main.Study.SymmetryCheck.Arm.Wrapping.AbsDifference, wrapping_tol),
      ),
      "Arm wrapping polyline points asymmetric"
    );
  };
  AnyOperation& RunTest = Main.RunApplication;
};