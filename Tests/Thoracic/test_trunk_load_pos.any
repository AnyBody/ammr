//define = (
//  [
//    {'BM_SCALING': '_SCALING_NONE_'},
//    {'BM_SCALING': '_SCALING_UNIFORM_'},
//    {'BM_SCALING': '_SCALING_XYZ_'},
//  ],
//  [
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_NONE_'},
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_TRUNK_TO_LEG_'},
//    {'BM_LEG_TRUNK_INTERFACE': '_MORPH_LEG_TO_TRUNK_'},
//  ] 
//)

#include "../libdef.any"
#include "../tools.any"

#ifndef TEST_NAME
  #define BM_SCALING _SCALING_NONE_
  #define BM_LEG_TRUNK_INTERFACE _MORPH_NONE_
  #define TEST_NAME "TrunkLoadPosTest"
#endif

#define BM_MANNEQUIN_DRIVER_DEFAULT ON
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION OFF
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION OFF
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING OFF

Main = {
  #include "<ANYBODY_PATH_BODY>/HumanModel.any"
    
  AnyFolder Tests = {
    AnyFloatVar abs_tol = 1e-15;
    
    AnyInt test_load_positions = expect(
      orfun(
        not(Main.Operations.TestLoadTrigger),
        eqfun(SegmentPositions.diff, 0)
      )
    );
    AnyInt test_initial_positions = expect(
      orfun(
        not(Main.Operations.TestInitPosTrigger), 
        ltfun(SegmentPositions.diff, abs_tol)
      )
    );
    
    AnyFolder SegmentPositions = {
      AnyObjectPtrArray all_segments = ObjSearchRecursive("Main.HumanModel.BodyModel.Trunk", "*", "AnySeg");
      AnyObjectPtrArray buckle = ObjSearchRecursive("Main.HumanModel.BodyModel.Trunk.Buckle", "*", "AnySeg");
      /// Array of all relevant segments to compare positions for
      /// The buckle segments are removed since their positions are solved during the kinematic analysis
      AnyObjectPtrArray segments = set_difference(all_segments,buckle);
      
      AnyObjectPtrArray seg_r0 = ObjGetMember(segments, "r0");
      AnyFloat seg_r0_vals = Obj2Num(seg_r0) + (0 * Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.r[0]);
      
      AnyObjectPtrArray seg_pos = ObjGetMember(segments, "r"); 
      AnyFloat seg_pos_vals = Obj2Num(seg_pos) + (0 * Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.r[0]);
      
      AnyFloat diff = ObjSort(max(abs(seg_r0_vals - seg_pos_vals))); 
      AnyObjectPtrArray segment_sorted_by_diff = ObjSort(segments, &diff);
    };
  };
  
  AnyOperationSequence RunTest = {
    AnyOperation& test_load_pos = Main.Operations.TestLoadPos;
    AnyOperation& test_init_pos = Main.Operations.TestInitPos;
  };

  AnyBodyStudy Study = {
    AnyFolder& BodyModel = Main.HumanModel.BodyModel;
    AnyFolder& DefaultDrivers = Main.HumanModel.DefaultMannequinDrivers;

    // Drive the model to zero
    AnyKinMotion TrunkExtension = {
      AnyKinMeasure &ref1 = .BodyModel.Interface.Trunk.PelvisThoraxExtension;
      AnyKinMeasure &ref2 = .BodyModel.Interface.Trunk.PelvisThoraxLateralBending;
      AnyKinMeasure &ref3 = .BodyModel.Interface.Trunk.PelvisThoraxRotation;

      DriverPos0 = {0,0,0};
      DriverVel0 = {0,0,0};
    };
    
    tEnd = 1;
    Gravity = {0, -9.81, 0};
    nStep = 1;
  };
  
  // Place the pelvis at global origin
  Main.HumanModel.Mannequin.Posture.PelvisPosX = 0;
  Main.HumanModel.Mannequin.Posture.PelvisPosY = 0;
  Main.HumanModel.Mannequin.Posture.PelvisPosZ = 0;

  Main.HumanModel.DefaultMannequinDrivers = {
    PelvisGroundDriverPosX.Reaction.Type = {On};
    PelvisGroundDriverPosY.Reaction.Type = {On};
    PelvisGroundDriverPosZ.Reaction.Type = {On};
    PelvisGroundDriverRotZ.Reaction.Type = {On};
    PelvisGroundDriverRotY.Reaction.Type = {On};
    PelvisGroundDriverRotX.Reaction.Type = {On};
  };
  
  AnyFolder Operations = {
    AnyOperationMacro UpdateValues = {
      MacroStr = {"classoperation Main " + strquote("Update Values")};
    };
    
    AnyOperationSetValue SetLoadTestTrigger = {
      AnyInt dummy = 1;
      Source = {&dummy};
      Target = {&.TestLoadTrigger};
    };
    AnyOperationSetValue ResetLoadTestTrigger = {
      AnyInt dummy = 0;
      Source = {&dummy};
      Target = {&.TestLoadTrigger};
    };
    AnyOperationSetValue SetInitPosTestTrigger = {
      AnyInt dummy = 1;
      Source = {&dummy};
      Target = {&.TestInitPosTrigger};
    };
    
    AnyOperationSequence TestLoadPos = {
      AnyOperation& set_trigger = .SetLoadTestTrigger;
      AnyOperation& reevaluate_test = .UpdateValues;
      AnyOperation& reset_trigger = .ResetLoadTestTrigger;
    };
    
    AnyOperationSequence TestInitPos = {
      AnyOperation& init_cond = Main.Study.InitialConditions;
      AnyOperation& set_trigger = .SetInitPosTestTrigger;
      AnyOperation& reevaluate_test = .UpdateValues;
    };
    
    AnyInt TestLoadTrigger = DesignVar(0);
    AnyInt TestInitPosTrigger = DesignVar(0);
  };
};