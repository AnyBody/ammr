//
// !!! THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT MODIFY IT !!! 
//

//
AnyFolder Config = {


#if BM_CONFIG_MESSAGES == ON
AnyFolder Messages = {
// Definition of an anthropometric scaling law
AnyMessage msg_BM_SCALING = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_SCALING);};

// File with all anthropometric measurements
AnyMessage msg_BM_SCALING_ANTHRO_FILE = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_SCALING_ANTHRO_FILE;};

// Custom anthopometric scaling law, used when BM_SCALING is CONST_SCALING_CUSTOM.
AnyMessage msg_BM_SCALING_MY_FILE = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_SCALING_MY_FILE;};

// Switch for automatic display of all configuration values
AnyMessage msg_BM_CONFIG_MESSAGES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_CONFIG_MESSAGES);};

// Switch for enabling configuration value information in the model tree
AnyMessage msg_BM_CONFIG_VALUES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_CONFIG_VALUES);};

// A file with draw settings
AnyMessage msg_BM_DRAWSETTINGS_FILE = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_DRAWSETTINGS_FILE;};

// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
AnyMessage msg_BM_DRAWSETTINGS_SKIP = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_DRAWSETTINGS_SKIP);};

// Switch defining left leg model and its presence
AnyMessage msg_BM_LEG_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_LEG_LEFT;};

// Switch defining right leg model and its presence
AnyMessage msg_BM_LEG_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_LEG_RIGHT;};

// Index parameter to specify muscle strength for lower extremities
AnyMessage msg_BM_LEG_STRENGTH_INDEX = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_LEG_STRENGTH_INDEX, "%5.3f");};

// Parameter to define muscle behavior of both right and left leg
AnyMessage msg_BM_LEG_MUSCLES_BOTH = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_LEG_MUSCLES_BOTH);};

// Parameter to define muscle behavior of the left leg
AnyMessage msg_BM_LEG_MUSCLES_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_LEG_MUSCLES_LEFT);};

// Parameter to define muscle behavior of the right leg
AnyMessage msg_BM_LEG_MUSCLES_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_LEG_MUSCLES_RIGHT);};

// Parameter for the TLEM model version.
AnyMessage msg_TLEM_VERSION = { TriggerPreProcess = On; Type = MSG_Message; Message = TLEM_VERSION;};

// Parameter for the morphology method for the TLEM model.
AnyMessage msg_TLEM_MORPHOLOGY = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(TLEM_MORPHOLOGY);};

// Parameter to define a trunk model dataset.
AnyMessage msg_BM_TRUNK_DATASET = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_TRUNK_DATASET;};

// Index parameter to specify strength for trunk muscles.
AnyMessage msg_BM_TRUNK_STRENGTH_INDEX = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_STRENGTH_INDEX, "%5.3f");};

// Definition of the type of all spine muscles.
AnyMessage msg_BM_TRUNK_MUSCLES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_MUSCLES);};

// Definition of the lumbar spine muscles type.
AnyMessage msg_BM_TRUNK_LUMBAR_MUSCLES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_LUMBAR_MUSCLES);};

// Definition of the thoracic spine muscles type.
AnyMessage msg_BM_TRUNK_THORACIC_MUSCLES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_THORACIC_MUSCLES);};

// Definition of the cervical spine muscles type.
AnyMessage msg_BM_TRUNK_CERVICAL_MUSCLES = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_CERVICAL_MUSCLES);};

// Definition of the disc model of all spine parts.
AnyMessage msg_BM_TRUNK_DISC_STIFNESS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_DISC_STIFNESS);};

// Definition of the lumbar spine disc model.
AnyMessage msg_BM_TRUNK_LUMBAR_DISC_STIFNESS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_LUMBAR_DISC_STIFNESS);};

// Definition of the thoracic spine disc model.
AnyMessage msg_BM_TRUNK_THORACIC_DISC_STIFNESS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_THORACIC_DISC_STIFNESS);};

// Definition of the cervical spine disc model.
AnyMessage msg_BM_TRUNK_CERVICAL_DISC_STIFNESS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_CERVICAL_DISC_STIFNESS);};

// A switch to use a kinematic rhythm for the whole spine.
AnyMessage msg_BM_TRUNK_RHYTHM = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_RHYTHM);};

// A switch to use a kinematic rhythm for the lumbar spine.
AnyMessage msg_BM_TRUNK_LUMBAR_RHYTHM = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_LUMBAR_RHYTHM);};

// A switch to use a kinematic rhythm for the thoracic spine.
AnyMessage msg_BM_TRUNK_THORACIC_RHYTHM = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_THORACIC_RHYTHM);};

// A switch to use a kinematic rhythm for the cervical spine.
AnyMessage msg_BM_TRUNK_CERVICAL_RHYTHM = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_CERVICAL_RHYTHM);};

// A switch to control all the ligaments in the spine.
AnyMessage msg_BM_TRUNK_LIGAMENTS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_LIGAMENTS);};

// A switch to control the lumbar spine ligaments.
AnyMessage msg_BM_TRUNK_LUMBAR_LIGAMENTS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_LUMBAR_LIGAMENTS);};

// A switch to control the thoracic spine ligaments.
AnyMessage msg_BM_TRUNK_THORACIC_LIGAMENTS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_THORACIC_LIGAMENTS);};

// A switch to control the cervical spine ligaments.
AnyMessage msg_BM_TRUNK_CERVICAL_LIGAMENTS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_TRUNK_CERVICAL_LIGAMENTS);};

// Index parameter to specify muscle strength for upper extremities.
AnyMessage msg_BM_ARM_STRENGTH_INDEX = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_STRENGTH_INDEX, "%5.3f");};

// Switch for the left arm model being present or not.
AnyMessage msg_BM_ARM_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_LEFT);};

// Keyword for the type of left hand.
AnyMessage msg_BM_ARM_DETAIL_HAND_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_DETAIL_HAND_LEFT);};

// Switch for the shoulder rhythm constraints for the left arm being present or not.
AnyMessage msg_BM_ARM_SHOULDER_RHYTHM_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_SHOULDER_RHYTHM_LEFT);};

// Switch for the right arm model being present or not.
AnyMessage msg_BM_ARM_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_RIGHT);};

// Keyword for the type of right hand.
AnyMessage msg_BM_ARM_DETAIL_HAND_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_DETAIL_HAND_RIGHT);};

// Switch for the shoulder rhythm constraints for the right arm being present or not.
AnyMessage msg_BM_ARM_SHOULDER_RHYTHM_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_SHOULDER_RHYTHM_RIGHT);};

// Keyword for the muscle model type for both left and right arms.
AnyMessage msg_BM_ARM_MUSCLES_BOTH = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_MUSCLES_BOTH);};

// Keyword for the muscle model type for the left arm.
AnyMessage msg_BM_ARM_MUSCLES_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_MUSCLES_LEFT);};

// Keyword for the muscle model type for only the left neck muscle.
AnyMessage msg_BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT);};

// Keyword for the muscle model for both the right arm.
AnyMessage msg_BM_ARM_MUSCLES_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_MUSCLES_RIGHT);};

// Keyword for the muscle model type for only the right neck muscle.
AnyMessage msg_BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT);};

// Keyword to choose the option of the joint axes defintion based on the anatomical landmarks.
AnyMessage msg_BM_BONY_LANDMARK_DEFINED_JOINTAXIS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_BONY_LANDMARK_DEFINED_JOINTAXIS);};

// Keyword for pelvis display setting.
AnyMessage msg_BM_PELVIS_DISPLAY = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_PELVIS_DISPLAY);};

// File name of the mannequin definition file. Default is a file in the body model, but this can be copied to and modified in your model directory.
AnyMessage msg_BM_MANNEQUIN_FILE = { TriggerPreProcess = On; Type = MSG_Message; Message = BM_MANNEQUIN_FILE;};

// Setting of the default value for all mannequin drivers.
AnyMessage msg_BM_MANNEQUIN_DRIVER_DEFAULT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_DEFAULT);};

// By default constraint type of mannequin drivers will be soft.
AnyMessage msg_BM_MANNEQUIN_DRIVER_WEAK_SWITCH = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_WEAK_SWITCH);};

// Allows for individual weights if the BM mannequin drivers are soft. Weights are set by assigning the BM_MANNEQUIN_DRIVER_* switches a value instead of ON/OFF.
AnyMessage msg_BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS);};

// Keyword for the interface morhping between the trunk and the leg pelvis segments.
AnyMessage msg_BM_LEG_TRUNK_INTERFACE = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_LEG_TRUNK_INTERFACE);};

// Parameter to choose type of muscle tendon calibration
AnyMessage msg_BM_CALIBRATION_TYPE = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_CALIBRATION_TYPE);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_POS_X = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_POS_X);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_POS_Y = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_POS_Y);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_POS_Z = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_POS_Z);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_ROT_X = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_ROT_X);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_NECK = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_NECK);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT);};

// Switch for the mannequin driver being active or not
AnyMessage msg_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT);};

// A switch to use different ref. frame than the default global reference frame
AnyMessage msg_BM_GLOBAL_REFERENCE_FRAME_SWITCH = { TriggerPreProcess = On; Type = MSG_Message; Message = strval(BM_GLOBAL_REFERENCE_FRAME_SWITCH);};


}; // AnyFolder Messages
#endif

#if BM_CONFIG_VALUES == ON
AnyFolder Values = {

// Definition of an anthropometric scaling law
AnyIntVar value_BM_SCALING=BM_SCALING;

// File with all anthropometric measurements
AnyStringVar value_BM_SCALING_ANTHRO_FILE=BM_SCALING_ANTHRO_FILE;

// Custom anthopometric scaling law, used when BM_SCALING is CONST_SCALING_CUSTOM.
AnyStringVar value_BM_SCALING_MY_FILE=BM_SCALING_MY_FILE;

// Switch for automatic display of all configuration values
AnyIntVar value_BM_CONFIG_MESSAGES=BM_CONFIG_MESSAGES;

// Switch for enabling configuration value information in the model tree
AnyIntVar value_BM_CONFIG_VALUES=BM_CONFIG_VALUES;

// A file with draw settings
AnyStringVar value_BM_DRAWSETTINGS_FILE=BM_DRAWSETTINGS_FILE;

// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
AnyIntVar value_BM_DRAWSETTINGS_SKIP=BM_DRAWSETTINGS_SKIP;

// Switch defining left leg model and its presence
AnyStringVar value_BM_LEG_LEFT=BM_LEG_LEFT;

// Switch defining right leg model and its presence
AnyStringVar value_BM_LEG_RIGHT=BM_LEG_RIGHT;

// Index parameter to specify muscle strength for lower extremities
AnyFloatVar value_BM_LEG_STRENGTH_INDEX=BM_LEG_STRENGTH_INDEX;

// Parameter to define muscle behavior of both right and left leg
AnyIntVar value_BM_LEG_MUSCLES_BOTH=BM_LEG_MUSCLES_BOTH;

// Parameter to define muscle behavior of the left leg
AnyIntVar value_BM_LEG_MUSCLES_LEFT=BM_LEG_MUSCLES_LEFT;

// Parameter to define muscle behavior of the right leg
AnyIntVar value_BM_LEG_MUSCLES_RIGHT=BM_LEG_MUSCLES_RIGHT;

// Parameter for the TLEM model version.
AnyStringVar value_TLEM_VERSION=TLEM_VERSION;

// Parameter for the morphology method for the TLEM model.
AnyIntVar value_TLEM_MORPHOLOGY=TLEM_MORPHOLOGY;

// Parameter to define a trunk model dataset.
AnyStringVar value_BM_TRUNK_DATASET=BM_TRUNK_DATASET;

// Index parameter to specify strength for trunk muscles.
AnyFloatVar value_BM_TRUNK_STRENGTH_INDEX=BM_TRUNK_STRENGTH_INDEX;

// Definition of the type of all spine muscles.
AnyIntVar value_BM_TRUNK_MUSCLES=BM_TRUNK_MUSCLES;

// Definition of the lumbar spine muscles type.
AnyIntVar value_BM_TRUNK_LUMBAR_MUSCLES=BM_TRUNK_LUMBAR_MUSCLES;

// Definition of the thoracic spine muscles type.
AnyIntVar value_BM_TRUNK_THORACIC_MUSCLES=BM_TRUNK_THORACIC_MUSCLES;

// Definition of the cervical spine muscles type.
AnyIntVar value_BM_TRUNK_CERVICAL_MUSCLES=BM_TRUNK_CERVICAL_MUSCLES;

// Definition of the disc model of all spine parts.
AnyIntVar value_BM_TRUNK_DISC_STIFNESS=BM_TRUNK_DISC_STIFNESS;

// Definition of the lumbar spine disc model.
AnyIntVar value_BM_TRUNK_LUMBAR_DISC_STIFNESS=BM_TRUNK_LUMBAR_DISC_STIFNESS;

// Definition of the thoracic spine disc model.
AnyIntVar value_BM_TRUNK_THORACIC_DISC_STIFNESS=BM_TRUNK_THORACIC_DISC_STIFNESS;

// Definition of the cervical spine disc model.
AnyIntVar value_BM_TRUNK_CERVICAL_DISC_STIFNESS=BM_TRUNK_CERVICAL_DISC_STIFNESS;

// A switch to use a kinematic rhythm for the whole spine.
AnyIntVar value_BM_TRUNK_RHYTHM=BM_TRUNK_RHYTHM;

// A switch to use a kinematic rhythm for the lumbar spine.
AnyIntVar value_BM_TRUNK_LUMBAR_RHYTHM=BM_TRUNK_LUMBAR_RHYTHM;

// A switch to use a kinematic rhythm for the thoracic spine.
AnyIntVar value_BM_TRUNK_THORACIC_RHYTHM=BM_TRUNK_THORACIC_RHYTHM;

// A switch to use a kinematic rhythm for the cervical spine.
AnyIntVar value_BM_TRUNK_CERVICAL_RHYTHM=BM_TRUNK_CERVICAL_RHYTHM;

// A switch to control all the ligaments in the spine.
AnyIntVar value_BM_TRUNK_LIGAMENTS=BM_TRUNK_LIGAMENTS;

// A switch to control the lumbar spine ligaments.
AnyIntVar value_BM_TRUNK_LUMBAR_LIGAMENTS=BM_TRUNK_LUMBAR_LIGAMENTS;

// A switch to control the thoracic spine ligaments.
AnyIntVar value_BM_TRUNK_THORACIC_LIGAMENTS=BM_TRUNK_THORACIC_LIGAMENTS;

// A switch to control the cervical spine ligaments.
AnyIntVar value_BM_TRUNK_CERVICAL_LIGAMENTS=BM_TRUNK_CERVICAL_LIGAMENTS;

// Index parameter to specify muscle strength for upper extremities.
AnyFloatVar value_BM_ARM_STRENGTH_INDEX=BM_ARM_STRENGTH_INDEX;

// Switch for the left arm model being present or not.
AnyIntVar value_BM_ARM_LEFT=BM_ARM_LEFT;

// Keyword for the type of left hand.
AnyIntVar value_BM_ARM_DETAIL_HAND_LEFT=BM_ARM_DETAIL_HAND_LEFT;

// Switch for the shoulder rhythm constraints for the left arm being present or not.
AnyIntVar value_BM_ARM_SHOULDER_RHYTHM_LEFT=BM_ARM_SHOULDER_RHYTHM_LEFT;

// Switch for the right arm model being present or not.
AnyIntVar value_BM_ARM_RIGHT=BM_ARM_RIGHT;

// Keyword for the type of right hand.
AnyIntVar value_BM_ARM_DETAIL_HAND_RIGHT=BM_ARM_DETAIL_HAND_RIGHT;

// Switch for the shoulder rhythm constraints for the right arm being present or not.
AnyIntVar value_BM_ARM_SHOULDER_RHYTHM_RIGHT=BM_ARM_SHOULDER_RHYTHM_RIGHT;

// Keyword for the muscle model type for both left and right arms.
AnyIntVar value_BM_ARM_MUSCLES_BOTH=BM_ARM_MUSCLES_BOTH;

// Keyword for the muscle model type for the left arm.
AnyIntVar value_BM_ARM_MUSCLES_LEFT=BM_ARM_MUSCLES_LEFT;

// Keyword for the muscle model type for only the left neck muscle.
AnyIntVar value_BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT=BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT;

// Keyword for the muscle model for both the right arm.
AnyIntVar value_BM_ARM_MUSCLES_RIGHT=BM_ARM_MUSCLES_RIGHT;

// Keyword for the muscle model type for only the right neck muscle.
AnyIntVar value_BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT=BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT;

// Keyword to choose the option of the joint axes defintion based on the anatomical landmarks.
AnyIntVar value_BM_BONY_LANDMARK_DEFINED_JOINTAXIS=BM_BONY_LANDMARK_DEFINED_JOINTAXIS;

// Keyword for pelvis display setting.
AnyIntVar value_BM_PELVIS_DISPLAY=BM_PELVIS_DISPLAY;

// File name of the mannequin definition file. Default is a file in the body model, but this can be copied to and modified in your model directory.
AnyStringVar value_BM_MANNEQUIN_FILE=BM_MANNEQUIN_FILE;

// Setting of the default value for all mannequin drivers.
AnyIntVar value_BM_MANNEQUIN_DRIVER_DEFAULT=BM_MANNEQUIN_DRIVER_DEFAULT;

// By default constraint type of mannequin drivers will be soft.
AnyIntVar value_BM_MANNEQUIN_DRIVER_WEAK_SWITCH=BM_MANNEQUIN_DRIVER_WEAK_SWITCH;

// Allows for individual weights if the BM mannequin drivers are soft. Weights are set by assigning the BM_MANNEQUIN_DRIVER_* switches a value instead of ON/OFF.
AnyIntVar value_BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS=BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS;

// Keyword for the interface morhping between the trunk and the leg pelvis segments.
AnyIntVar value_BM_LEG_TRUNK_INTERFACE=BM_LEG_TRUNK_INTERFACE;

// Parameter to choose type of muscle tendon calibration
AnyIntVar value_BM_CALIBRATION_TYPE=BM_CALIBRATION_TYPE;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_X=BM_MANNEQUIN_DRIVER_PELVIS_POS_X;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_Y=BM_MANNEQUIN_DRIVER_PELVIS_POS_Y;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_POS_Z=BM_MANNEQUIN_DRIVER_PELVIS_POS_Z;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z=BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y=BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_ROT_X=BM_MANNEQUIN_DRIVER_PELVIS_ROT_X;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_NECK=BM_MANNEQUIN_DRIVER_NECK;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION=BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT=BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT=BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT=BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT=BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT=BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT=BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT=BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT=BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT=BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT;

// Switch for the mannequin driver being active or not
AnyIntVar value_BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT=BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT;

// A switch to use different ref. frame than the default global reference frame
AnyIntVar value_BM_GLOBAL_REFERENCE_FRAME_SWITCH=BM_GLOBAL_REFERENCE_FRAME_SWITCH;


};// AnyFolder Values
#endif


};// AnyFolder Config

