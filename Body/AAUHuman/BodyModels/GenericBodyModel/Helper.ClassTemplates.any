#ifndef HELPER_CLASSTEMPLATES_ANY
#define HELPER_CLASSTEMPLATES_ANY


// Utility macros to search for objects, Bool, Float, Int, String variables returning
// default value if they are not founds
#define GET_OBJ_DEFAULT(SEARCH_STR, DEFAULT) arrcat(ObjSearch(SEARCH_STR), & DEFAULT)[0]
#define GET_FLOAT_DEFAULT(SEARCH_STR, DEFAULT) arrcat(Obj2Num(ObjSearch(SEARCH_STR)),DEFAULT)[0]
#define GET_INT_DEFAULT(SEARCH_STR, DEFAULT) arrcat(round(Obj2Num(ObjSearch(SEARCH_STR))),round(DEFAULT))[0]
#define GET_STRING_DEFAULT(SEARCH_STR, DEFAULT) arrcat(Obj2Str(ObjSearch(SEARCH_STR)),DEFAULT)[0]


// Create a mesh grid for evaluating functions. This is similar to `[xx, yy, zz] = numpy.meshgrid(X,Y,Z)`
 #define MESHGRID(X,Y,Z) { reshape(repmat(NumElemOf(Y), flatten(repmat(1, NumElemOf(Z), X))), {NumElemOf(Y), NumElemOf(X), NumElemOf(Z)}), \
                                      reshape(flatten(repmat(1, NumElemOf(Z)*NumElemOf(X), Y)) , {NumElemOf(Y), NumElemOf(X), NumElemOf(Z)}), \
                                      reshape(flatten(repmat(NumElemOf(X)* NumElemOf(Y), Z)), {NumElemOf(Y), NumElemOf(X), NumElemOf(Z)}) }

// Create a array of x,y,z triples for a 3D grid, defined by the vectors aa, bb,cc. This is similar to np.vstack([XX.ravel(), YY.ravel(), ZZ.ravel()].T  where xx,yy,zz are outputs of meshgrid
 #define MESHTRIPLES(X,Y,Z) reshape( MESHGRID(X,Y,Z), {3, NumElemOf(X)*NumElemOf(Y)*NumElemOf(Z) })'


#define REPLACE_ZEROS(x, replacement) ((x) + not(x)*(replacement))



// Projection of P onto the line BA
#define VECTOR_PROJECTION(P, A, B) (A) + ( ((P)-(A))*((B)-(A))' / ( ((B)-(A))*((B)-(A))') )*((B)-(A))
// Normal vector for the non-coliniar points A,B,C 
#define NORMAL_VECTOR(A,B,C) cross((B)-(A), (C)-(B)) / vnorm( cross((B)-(A), (C)-(B)) )
// Projection of the point P on the plane defined by A,B,C
#define PLANE_PROJECTION(P,A,B,C) (P) - (((P)-(A))*(NORMAL_VECTOR(A,B,C))')*NORMAL_VECTOR(A,B,C)
  
// Remove artificial muscles' contribution to the total Pmet calculation
// Is defined in all relevant AnyMuscles and some AnyMusclesViaPoint
#define EXCLUDE_MUSCLE_METABOLISM AnyMetabModelSimple ZeroMetabolicMdl = {EtaCon = 2e22; EtaEcc = 2e22;}; MetabModel = &ZeroMetabolicMdl;

// Extract non unique elements from an array
// one version for pointers and one for values
// we sort the array and take two indexes shifted by one element
// by comparing the two adjecant elements we identify duplicates
#define NON_UNIQUE_VALUES(A) take( \
    ObjSort(A), \
    take( \
      unique( \
        mult( \
          iarr(1, NumElemOf(ObjSort(A)) -1),  \
          eqfun( \
            take(ObjSort(A), iarr(1, NumElemOf(ObjSort(A)) - 1)), \
            take(ObjSort(A), iarr(0, NumElemOf(ObjSort(A)) - 2)) \
          ) \
        ) \
      ), \
      iarr(1, NumElemOf( \
        unique( \
          mult( \
            iarr(1, NumElemOf(ObjSort(A)) -1),  \
            eqfun( \
              take(ObjSort(A), iarr(1, NumElemOf(ObjSort(A)) - 1)), \
              take(ObjSort(A), iarr(0, NumElemOf(ObjSort(A)) - 2)) \
            ) \
          ) \
        ) \
      ) -1) \
    ) \
  )

// Same as NON_UNIQUE_VALUES but for pointers and returning a pointer array
#define NON_UNIQUE_POINTERS(A) ObjSearch( \
  take( \
    ObjSort(CompleteNameOf(A)), \
    take( \
      unique( \
        mult( \
          iarr(1, NumElemOf(ObjSort(CompleteNameOf(A))) -1),  \
          eqfun( \
            take(ObjSort(CompleteNameOf(A)), iarr(1, NumElemOf(ObjSort(CompleteNameOf(A))) - 1)), \
            take(ObjSort(CompleteNameOf(A)), iarr(0, NumElemOf(ObjSort(CompleteNameOf(A))) - 2)) \
          ) \
        ) \
      ), \
      iarr(1, NumElemOf( \
        unique( \
          mult( \
            iarr(1, NumElemOf(ObjSort(CompleteNameOf(A))) -1),  \
            eqfun( \
              take(ObjSort(CompleteNameOf(A)), iarr(1, NumElemOf(ObjSort(CompleteNameOf(A))) - 1)), \
              take(ObjSort(CompleteNameOf(A)), iarr(0, NumElemOf(ObjSort(CompleteNameOf(A))) - 2)) \
            ) \
          ) \
        ) \
      ) -1) \
    ) \
  ) \
)



#define SET_DEFAULT_ACTUATOR_VOLUME Volume = 1e-6

// Add backwards compatible macro to set the operation display priority for the 
// for the dropdown operations menu. PRIORITY can be
// PriorityLow: The operation will never show in the dropdown menu.
// PriorityNormal: Default rules apply to when operations are shown.
// PriorityHigh: Opeartion will always appear in the dropdown menu.
#if (ANYBODY_V1 > 7)|(ANYBODY_V1 == 7 & ANYBODY_V2 > 1)
#define OPERATION_DISPLAY_PRIORITY(PRIORITY) Settings.DisplayPriority = PRIORITY
#define OPERATION_SELECT_ON_LOAD Settings.SelectOnLoad = On
#else
#define OPERATION_DISPLAY_PRIORITY(PRIORITY) Settings = {}
#define OPERATION_SELECT_ON_LOAD Settings = {}

#endif
 


/*  this piece of code ensures backcompatibility of AMMR using AnyComponentDefinition 
 with versions of AMS below 7.2.x */
#if (ANYBODY_V1 > 7)|(ANYBODY_V1 == 7 & ANYBODY_V2 > 1)
#else
#class_template AnyComponentDefinition
{
  #var AnyStringVar NameCast = "";
  #var AnyStringVar SubGroupRegexSearch = "";
  #var AnyStringVar SubGroupRegexReplace = "";
  #var AnyIntVar Hidden = 0;
  #var AnySwitchVar IsBranch = Off;
};
#endif


/* Creates a Folder with and AnyFunConst member. This is useful for creating 
   weight function with weight that can later be overridden by the user.
*/
#class_template Template_AnyFunConst (NUMBER_OF_ELEMENTS=1, WEIGHT=0.01, _NAME=Fun) {
 AnyFunConst _NAME={
      #var Value=repmat(NUMBER_OF_ELEMENTS, WEIGHT); 
  };  
};



#class_template Template_OperationSaveValues(__CLASS__= AnyOperationSequence, _REDEFINE_INPUTS=Off) {

   #if _REDEFINE_INPUTS == Off
   #var AnyObjectPtrArray ObjectsMarkedAsModified = ObjSearch("");
   #var AnyObjectPtrVar Folder = &Main;
   #var AnyFileVar FileName;
   #endif
     
     AnyOperationSetValue MarkAsModified = {
        Source = .ObjectsMarkedAsModified;
        Target = .ObjectsMarkedAsModified;
     };
     
  AnyOperationMacro SaveValuesToFile = {
     MacroStr = {
       ("classoperation "
        + CompleteNameOf(.Folder)
        + strquote("Save Values")
        + " --file="
        + strquote(FilePathCompleteOf(.FileName))
       )
     }; 
   };
};

#class_template Template_OperationUpdateValues(__CLASS__= AnyOperationMacro) {
     MacroStr = {"classoperation Main " + strquote("Update Values") }; 
};


#class_template Template_OperationLoadValues(__CLASS__= AnyOperationSequence, _REDEFINE_INPUTS=Off) {

   #if _REDEFINE_INPUTS == Off
   #var AnyFileVar FileName;
   #endif

  AnyOperationMacro LoadValuesFromFile = {
     MacroStr = {"classoperation Main " + strquote("Load Values") + " --file=" + strquote(FilePathCompleteOf(.FileName) }; 
   };
};




/*
Create a sorted string array of {Name, value} pairs. 

Arrays in AMS must all have only one type (no dictionary objects). So this functions
creates a string represenation of the values.

E.g.:

 {"Main.HumanModel.BodyModel.Right.Leg.Mus.VastusIntermedius6.Activity", "0.10421"},
 {"Main.HumanModel.BodyModel.Right.Leg.Mus.VastusIntermedius5.Activity", "0.03122"},
 {"Main.HumanModel.BodyModel.Right.Leg.Mus.VastusIntermedius4.Activity", "0.01232"}, 

 This template is useful for attaching names to values which are searched out using functions
 such as ObjectSearch or ObjectSearch recursive. 
 
 Arguments:
 
   NAME_OF_FUN = CompleteNameOf
     The funciton use to generate the names in the map. 
     Default is the complete name of the objects. 
   ORDER = "Desending"
     The order which the values are sorted. Default is desending.
     Anything else will give Assending order
    FORMAT="%.4f"
      The format specifier used when generating a string represenation of the values
      default is 4 digits.
    STUDY_T = .t
      A link to a t (time) value. In either a study or mechanical object. This is a necesssary 
      hack to make sure the values are evaluated at every time step. 
      This has a default value which allows the class_template to be used in studies or
      in mechanical objects without modifing the default value.
      
 Members:

   ValuePtrs: AnyObjectPtr (Required)
     - An array of pointers to AnyValues objects which will be used to generate 
       the <Name, Value> map
   NamePtr : AnyObjectPtr (Optional)
     - An array of pointers to AnyObjects which will be used when generating the names 
       in the <name, values> map. This default to the `ValuePtrs` array, but can be different 
       if needed. 
       
    
  Output member:
  
    Output: AnyString
       A string array of sorted <name, value> pairs 
  
       
       
 Examples: 
    
  NameValueMap RightLegActivity() = {
     ValuePtrs = ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Mus", "Activity", "AnyVar"); 
  };      
  
  
   NameValueMap AllMuscleActivity(
   NAMEOF_FUN=NameOf
   ) = {
     ValuePtrs = ObjSearchRecursive(NamePtrs, "Activity", "AnyVar", 1); 
     NamePtrs = ObjSearchRecursive("Main", "*", "AnyMuscle"); 
   };
   
  
*/



#class_template NameValueMap(
   NAMEOF_FUN = CompleteNameOf,
   ORDER = "Desending",
   FORMAT="%.4f",
   STUDY_T = .MaxMuscleActivity,
   AGGEGRATION=max,
){
  #var AnyObjectPtr ValuePtrs;
  #var AnyObjectPtr NamePtrs = ValuePtrs;
   
    AnyInt ValueSizes = arrcat(SizesOf(Obj2Num(ValuePtrs)),  {1,1,1,1,1,1,1});
    AnyInt FirstDim = ValueSizes[0];
    AnyInt SecondDim = prod(take(ValueSizes, iarr(1,NumElemOf(ValueSizes)-1) ));

    
    AnyFloat Values = AGGEGRATION(reshape(Obj2Num(ValuePtrs), {FirstDim,SecondDim})) + 0*STUDY_T;
    AnyString Names = NAMEOF_FUN(NamePtrs);

    #if ORDER == "Desending"
    AnyString Output = flip(transpose( {ObjSort(Names, &Values), strval(ObjSort(Values), FORMAT) }),0);
    #else
    AnyString Output = transpose( {ObjSort(Names, &Values), strval( ObjSort(Values), FORMAT) });
    #endif
  
};









#class_template MultipleSubTemplates(
   NUM,
   CLASS_TEMPLATE,
   _PRE="",
   NAME_PREFIX=ELEM,
   ARG1=0,
   ARG2=0,
   ARG3=0,
   ARG4=0
) {
                 
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_000(IDX=0, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #if NUM > 1
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_001(IDX=1, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 2
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_002(IDX=2, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 3
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_003(IDX=3, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 4
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_004(IDX=4, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 5
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_005(IDX=5, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 6
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_006(IDX=6, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 7
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_007(IDX=7, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 8
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_008(IDX=8, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 9
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_009(IDX=9, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 10
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_010(IDX=10, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 11
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_011(IDX=11, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 12
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_012(IDX=12, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 13
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_0013(IDX=13, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 14
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_014(IDX=14, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 15
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_015(IDX=15, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 16
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_016(IDX=16, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 17
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_017(IDX=17, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 18
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_018(IDX=18, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 19
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_019(IDX=19, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 20
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_020(IDX=20, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 21
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_021(IDX=21, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 22
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_022(IDX=22, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 23
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_023(IDX=23, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 24
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_024(IDX=24, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 25
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_025(IDX=25, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 26
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_026(IDX=26, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 27
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_027(IDX=27, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 28
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_028(IDX=28, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 29
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_029(IDX=29, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 30
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_030(IDX=30, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 31
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_031(IDX=31, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 32
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_032(IDX=32, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 33
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_033(IDX=33, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 34
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_034(IDX=34, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 35
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_035(IDX=35, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 36
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_036(IDX=36, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 37
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_037(IDX=37, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 38
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_038(IDX=38, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 31
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_031(IDX=31, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 39
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_039(IDX=39, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 40
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_040(IDX=40, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 41
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_041(IDX=41, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 42
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_042(IDX=42, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 43
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_043(IDX=43, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 44
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_044(IDX=44, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 45
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_045(IDX=45, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 46
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_046(IDX=46, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 47
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_047(IDX=47, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 48
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_048(IDX=48, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 49
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_049(IDX=49, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 50
  _PRE##CLASS_TEMPLATE NAME_PREFIX##_050(IDX=50, ARG1=ARG1,ARG2=ARG2,ARG3=ARG3,ARG4=ARG4) = {};
  #endif
  #if NUM > 51
  #ERROR_Not_implemented_for_more_than_50_elements
  #endif
};




#endif


