//
// !!! THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT MODIFY IT !!! 
//

// Definition of an anthropometric scaling law
#ifndef BM_SCALING
#define BM_SCALING _SCALING_STANDARD_
#endif

// Specifies if the standard parameters and anthropometrics parameters are given as external measurements. This defaults to OFF, which means that all segment length are joint-joint distances. This is set automatically based on the ``BM_SCALING`` parameter, but can be overridden if you implement your own scaling law and need to use external mesaurements.
#ifndef BM_SCALING_STANDARDPARAM_EXTERIOR
#define BM_SCALING_STANDARDPARAM_EXTERIOR OFF
#endif

// Switch for automatic display of all configuration values
#ifndef BM_CONFIG_MESSAGES
#define BM_CONFIG_MESSAGES OFF
#endif

// Switch for enabling configuration value information in the model tree
#ifndef BM_CONFIG_VALUES
#define BM_CONFIG_VALUES OFF
#endif

// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
#ifndef BM_DRAWSETTINGS_SKIP
#define BM_DRAWSETTINGS_SKIP OFF
#endif

// Parameter defining the foot model used.
#ifndef BM_FOOT_MODEL
#define BM_FOOT_MODEL _FOOT_MODEL_DEFAULT_
#endif

// Parameter defining the Leg model used.
#ifndef BM_LEG_MODEL
#define BM_LEG_MODEL _LEG_MODEL_TLEM2_
#endif

// Parameter defining the contact type between Thorax and Scapula
#ifndef BM_ARM_THORAX_SCAPULA_CONTACT
#define BM_ARM_THORAX_SCAPULA_CONTACT _ELLIPSOID_CONTACT_
#endif

// Parameter for switching the left leg On/Off. To control which leg model is used, please use the {any}`BM_LEG_MODEL` parameter.
#ifndef BM_LEG_LEFT
#define BM_LEG_LEFT ON
#endif

// Parameter for switching the right leg On/Off. To control which leg model is used, please use the {any}`BM_LEG_MODEL` parameter.
#ifndef BM_LEG_RIGHT
#define BM_LEG_RIGHT ON
#endif

// Index parameter to specify muscle strength for lower extremities
#ifndef BM_LEG_STRENGTH_INDEX
#define BM_LEG_STRENGTH_INDEX 1.0
#endif

// Parameter to define muscle behavior of both right and left leg
#ifndef BM_LEG_MUSCLES_BOTH
#define BM_LEG_MUSCLES_BOTH _MUSCLES_SIMPLE_
#endif

// Parameter to define muscle behavior of the left leg
#ifndef BM_LEG_MUSCLES_LEFT
#define BM_LEG_MUSCLES_LEFT BM_LEG_MUSCLES_BOTH
#endif

// Parameter to define muscle behavior of the right leg
#ifndef BM_LEG_MUSCLES_RIGHT
#define BM_LEG_MUSCLES_RIGHT BM_LEG_MUSCLES_BOTH
#endif

// Parameter to define a trunk model dataset.
#ifndef BM_TRUNK_DATASET
#define BM_TRUNK_DATASET "TrunkData1.1"
#endif

// Index parameter to specify strength for trunk muscles.
#ifndef BM_TRUNK_STRENGTH_INDEX
#define BM_TRUNK_STRENGTH_INDEX 1.0
#endif

// Internal swtich to enable some of the future detailed thoracic components in the model. This switch is for internal development use.
#ifndef BM_TRUNK_THORACIC_FUTURE
#define BM_TRUNK_THORACIC_FUTURE OFF
#endif

// Definition of the type of all spine muscles.
#ifndef BM_TRUNK_MUSCLES
#define BM_TRUNK_MUSCLES _MUSCLES_SIMPLE_
#endif

// Definition of the lumbar spine muscles type.
#ifndef BM_TRUNK_LUMBAR_MUSCLES
#define BM_TRUNK_LUMBAR_MUSCLES BM_TRUNK_MUSCLES
#endif

// Definition of the cervical spine muscles type.
#ifndef BM_TRUNK_CERVICAL_MUSCLES
#define BM_TRUNK_CERVICAL_MUSCLES OFF
#endif

// Definition of the disc model of all spine parts.
#ifndef BM_TRUNK_DISC_STIFNESS
#define BM_TRUNK_DISC_STIFNESS _DISC_STIFFNESS_NONE_
#endif

// Definition of the lumbar spine disc model.
#ifndef BM_TRUNK_LUMBAR_DISC_STIFNESS
#define BM_TRUNK_LUMBAR_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
#endif

// Definition of the cervical spine disc model.
#ifndef BM_TRUNK_CERVICAL_DISC_STIFNESS
#define BM_TRUNK_CERVICAL_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
#endif

// A switch to use a kinematic rhythm for the whole spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
#ifndef BM_TRUNK_RHYTHM
#define BM_TRUNK_RHYTHM ON
#endif

// A switch to use a kinematic rhythm for the lumbar spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
#ifndef BM_TRUNK_LUMBAR_RHYTHM
#define BM_TRUNK_LUMBAR_RHYTHM BM_TRUNK_RHYTHM
#endif

// A switch to use a kinematic rhythm for the cervical spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
#ifndef BM_TRUNK_CERVICAL_RHYTHM
#define BM_TRUNK_CERVICAL_RHYTHM BM_TRUNK_RHYTHM
#endif

// A switch to control all the ligaments in the spine.
#ifndef BM_TRUNK_LIGAMENTS
#define BM_TRUNK_LIGAMENTS OFF
#endif

// A switch to control the lumbar spine ligaments.
#ifndef BM_TRUNK_LUMBAR_LIGAMENTS
#define BM_TRUNK_LUMBAR_LIGAMENTS BM_TRUNK_LIGAMENTS
#endif

// Index parameter to specify muscle strength for upper extremities.
#ifndef BM_ARM_STRENGTH_INDEX
#define BM_ARM_STRENGTH_INDEX 1.0
#endif

// Switch for the left arm model being present or not.
#ifndef BM_ARM_LEFT
#define BM_ARM_LEFT ON
#endif

// Keyword for the type of left hand.
#ifndef BM_ARM_DETAIL_HAND_LEFT
#define BM_ARM_DETAIL_HAND_LEFT OFF
#endif

// Switch for the shoulder rhythm constraints for the left arm being present or not.
#ifndef BM_ARM_SHOULDER_RHYTHM_LEFT
#define BM_ARM_SHOULDER_RHYTHM_LEFT OFF
#endif

// Switch for the right arm model being present or not.
#ifndef BM_ARM_RIGHT
#define BM_ARM_RIGHT ON
#endif

// Keyword for the type of right hand.
#ifndef BM_ARM_DETAIL_HAND_RIGHT
#define BM_ARM_DETAIL_HAND_RIGHT OFF
#endif

// Switch for the shoulder rhythm constraints for the right arm being present or not.
#ifndef BM_ARM_SHOULDER_RHYTHM_RIGHT
#define BM_ARM_SHOULDER_RHYTHM_RIGHT OFF
#endif

// Switch for the shoulder rhythm constraints. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
#ifndef BM_ARM_SHOULDER_RHYTHM
#define BM_ARM_SHOULDER_RHYTHM OFF
#endif

// Switch for the clavicula rotation rhythm. If enabled axial rotation of the clavicula will be distributed evenly between the sterno-clavicula and acromio-clavicula joint. Effectively removing clavicula axial rotation as an independent degree of freedom.resterno-clavicula axial rotation.
#ifndef BM_ARM_CLAVICULA_ROTATION_RHYTHM
#define BM_ARM_CLAVICULA_ROTATION_RHYTHM ON
#endif

// Switch for enabling the detailed hand.
#ifndef BM_ARM_DETAILED_HAND
#define BM_ARM_DETAILED_HAND OFF
#endif

// Switch for deltoid wrapping. Setting this to OFF or _DELTOID_WRAPPING_RAKE_ will revert to the older rake based implementation of the deltoid.
#ifndef BM_ARM_DELTOID_WRAPPING
#define BM_ARM_DELTOID_WRAPPING _DELTOID_WRAPPING_ELIPSOIDS_
#endif

// Keyword for the muscle model type for both left and right arms.
#ifndef BM_ARM_MUSCLES_BOTH
#define BM_ARM_MUSCLES_BOTH _MUSCLES_SIMPLE_
#endif

// Keyword for the muscle model type for the left arm.
#ifndef BM_ARM_MUSCLES_LEFT
#define BM_ARM_MUSCLES_LEFT BM_ARM_MUSCLES_BOTH
#endif

// Keyword for the muscle model for both the right arm.
#ifndef BM_ARM_MUSCLES_RIGHT
#define BM_ARM_MUSCLES_RIGHT BM_ARM_MUSCLES_BOTH
#endif

// Keyword for pelvis display setting.
#ifndef BM_PELVIS_DISPLAY
#define BM_PELVIS_DISPLAY _PELVIS_DISPLAY_LEGPELVIS_ONLY_
#endif

// Setting of the default value for all mannequin drivers.
#ifndef BM_MANNEQUIN_DRIVER_DEFAULT
#define BM_MANNEQUIN_DRIVER_DEFAULT ON
#endif

// By default constraint type of mannequin drivers will be soft.
#ifndef BM_MANNEQUIN_DRIVER_WEAK_SWITCH
#define BM_MANNEQUIN_DRIVER_WEAK_SWITCH ON
#endif

// Keyword for the interface morhping between the trunk and the leg pelvis segments.
#ifndef BM_LEG_TRUNK_INTERFACE
#define BM_LEG_TRUNK_INTERFACE _MORPH_TRUNK_TO_LEG_
#endif

// Parameter to choose type of muscle tendon calibration
#ifndef BM_CALIBRATION_TYPE
#define BM_CALIBRATION_TYPE _CALIBRATION_TYPE_1PAR_
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_X
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_X BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_Y
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_Y BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_Z
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_Z BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_X
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_X BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_NECK
#define BM_MANNEQUIN_DRIVER_NECK BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_SKULL_THORAX_FLEXION
#define BM_MANNEQUIN_DRIVER_SKULL_THORAX_FLEXION BM_MANNEQUIN_DRIVER_NECK
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_SKULL_THORAX_LATERALBENDING
#define BM_MANNEQUIN_DRIVER_SKULL_THORAX_LATERALBENDING BM_MANNEQUIN_DRIVER_NECK
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_SKULL_THORAX_ROTATION
#define BM_MANNEQUIN_DRIVER_SKULL_THORAX_ROTATION BM_MANNEQUIN_DRIVER_NECK
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for all the mannequin drivers for the sterno clavicular degrees of freedom.
#ifndef BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
#define BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_RIGHT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_RIGHT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_RIGHT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT
#define BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HAND_RIGHT
#define BM_MANNEQUIN_DRIVER_HAND_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for all the mannequin drivers for the sterno clavicular degrees of freedom.
#ifndef BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
#define BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_LEFT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_LEFT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
#endif

// Switch for the mannequin driver being active or not.
#ifndef BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_LEFT
#define BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT
#define BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HAND_LEFT
#define BM_MANNEQUIN_DRIVER_HAND_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_HIP_RIGHT
#define BM_JOINT_TYPE_HIP_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_HIP_LEFT
#define BM_JOINT_TYPE_HIP_LEFT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_KNEE_RIGHT
#define BM_JOINT_TYPE_KNEE_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_KNEE_LEFT
#define BM_JOINT_TYPE_KNEE_LEFT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_PATELLOFEMORAL_RIGHT
#define BM_JOINT_TYPE_PATELLOFEMORAL_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_PATELLOFEMORAL_LEFT
#define BM_JOINT_TYPE_PATELLOFEMORAL_LEFT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_ANKLE_RIGHT
#define BM_JOINT_TYPE_ANKLE_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_ANKLE_LEFT
#define BM_JOINT_TYPE_ANKLE_LEFT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_SUBTALAR_RIGHT
#define BM_JOINT_TYPE_SUBTALAR_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_SUBTALAR_LEFT
#define BM_JOINT_TYPE_SUBTALAR_LEFT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_PATELLATENDON_RIGHT
#define BM_JOINT_TYPE_PATELLATENDON_RIGHT _JOINT_TYPE_DEFAULT_
#endif

// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
#ifndef BM_JOINT_TYPE_PATELLATENDON_LEFT
#define BM_JOINT_TYPE_PATELLATENDON_LEFT _JOINT_TYPE_DEFAULT_
#endif

// A switch to use different ref. frame than the default global reference frame
#ifndef BM_GLOBAL_REFERENCE_FRAME_SWITCH
#define BM_GLOBAL_REFERENCE_FRAME_SWITCH OFF
#endif

// An object path leading to the selected global reference frame
#ifndef BM_GLOBAL_REFERENCE_FRAME
#define BM_GLOBAL_REFERENCE_FRAME ..GenericGlobalRefFrame
#endif

// A compatability switch to include the trunk selected outputs joint reaction force from AMMR 2.4
#ifndef BM_COMPATIBILITY_24_TRUNK_SELECTED_OUTPUTS_JRF
#define BM_COMPATIBILITY_24_TRUNK_SELECTED_OUTPUTS_JRF OFF
#endif
