//
// !!! THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT MODIFY IT !!! 
//

// Definition of an anthropometric scaling law
#ifndef BM_SCALING
#define BM_SCALING CONST_SCALING_STANDARD
#endif

// File with all anthropometric measurements
#ifndef BM_SCALING_ANTHRO_FILE
#path BM_SCALING_ANTHRO_FILE "<ANYBODY_PATH_BODY>\BodyModels\GenericBodyModel\BodyModel.AnyMan.any"
#endif

// Custom anthopometric scaling law, used when BM_SCALING is CONST_SCALING_CUSTOM.
#ifndef BM_SCALING_MY_FILE
#path BM_SCALING_MY_FILE "<ANYBODY_PATH_BODY>\Scaling\MyScalingLaw.any"
#endif

// Switch for automatic display of all configuration values
#ifndef BM_CONFIG_MESSAGES
#define BM_CONFIG_MESSAGES OFF
#endif

// Switch for enabling configuration value information in the model tree
#ifndef BM_CONFIG_VALUES
#define BM_CONFIG_VALUES OFF
#endif

// A file with draw settings
#ifndef BM_DRAWSETTINGS_FILE
#path BM_DRAWSETTINGS_FILE "<ANYBODY_PATH_BODY>\DrawSettings\DrawSettings.any"
#endif

// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
#ifndef BM_DRAWSETTINGS_SKIP
#define BM_DRAWSETTINGS_SKIP OFF
#endif

// Switch defining left leg model and its presence
#ifndef BM_LEG_LEFT
#define BM_LEG_LEFT CONST_LEG_MODEL_TLEM
#endif

// Switch defining right leg model and its presence
#ifndef BM_LEG_RIGHT
#define BM_LEG_RIGHT CONST_LEG_MODEL_TLEM
#endif

// Index parameter to specify muscle strength for lower extremities
#ifndef BM_LEG_STRENGTH_INDEX
#define BM_LEG_STRENGTH_INDEX 1.0
#endif

// Parameter to define muscle behavior of both right and left leg
#ifndef BM_LEG_MUSCLES_BOTH
#define BM_LEG_MUSCLES_BOTH CONST_MUSCLES_SIMPLE
#endif

// Parameter to define muscle behavior of the left leg
#ifndef BM_LEG_MUSCLES_LEFT
#define BM_LEG_MUSCLES_LEFT BM_LEG_MUSCLES_BOTH
#endif

// Parameter to define muscle behavior of the right leg
#ifndef BM_LEG_MUSCLES_RIGHT
#define BM_LEG_MUSCLES_RIGHT BM_LEG_MUSCLES_BOTH
#endif

// Parameter for the TLEM model version.
#ifndef TLEM_VERSION
#define TLEM_VERSION "1.1"
#endif

// Parameter for the morphology method for the TLEM model.
#ifndef TLEM_MORPHOLOGY
#define TLEM_MORPHOLOGY 1
#endif

// Parameter to define a trunk model dataset.
#ifndef BM_TRUNK_DATASET
#define BM_TRUNK_DATASET "TrunkData1.1"
#endif

// Index parameter to specify strength for trunk muscles.
#ifndef BM_TRUNK_STRENGTH_INDEX
#define BM_TRUNK_STRENGTH_INDEX 1.0
#endif

// Definition of the type of all spine muscles.
#ifndef BM_TRUNK_MUSCLES
#define BM_TRUNK_MUSCLES CONST_MUSCLES_SIMPLE
#endif

// Definition of the lumbar spine muscles type.
#ifndef BM_TRUNK_LUMBAR_MUSCLES
#define BM_TRUNK_LUMBAR_MUSCLES BM_TRUNK_MUSCLES
#endif

// Definition of the thoracic spine muscles type.
#ifndef BM_TRUNK_THORACIC_MUSCLES
#define BM_TRUNK_THORACIC_MUSCLES CONST_MUSCLES_NONE
#endif

// Definition of the cervical spine muscles type.
#ifndef BM_TRUNK_CERVICAL_MUSCLES
#define BM_TRUNK_CERVICAL_MUSCLES CONST_MUSCLES_NONE
#endif

// Definition of the disc model of all spine parts.
#ifndef BM_TRUNK_DISC_STIFNESS
#define BM_TRUNK_DISC_STIFNESS CONST_DISC_STIFFNESS_LINEAR
#endif

// Definition of the lumbar spine disc model.
#ifndef BM_TRUNK_LUMBAR_DISC_STIFNESS
#define BM_TRUNK_LUMBAR_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
#endif

// Definition of the thoracic spine disc model.
#ifndef BM_TRUNK_THORACIC_DISC_STIFNESS
#define BM_TRUNK_THORACIC_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
#endif

// Definition of the cervical spine disc model.
#ifndef BM_TRUNK_CERVICAL_DISC_STIFNESS
#define BM_TRUNK_CERVICAL_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
#endif

// A switch to use a kinematic rhythm for the whole spine.
#ifndef BM_TRUNK_RHYTHM
#define BM_TRUNK_RHYTHM ON
#endif

// A switch to use a kinematic rhythm for the lumbar spine.
#ifndef BM_TRUNK_LUMBAR_RHYTHM
#define BM_TRUNK_LUMBAR_RHYTHM BM_TRUNK_RHYTHM
#endif

// A switch to use a kinematic rhythm for the thoracic spine.
#ifndef BM_TRUNK_THORACIC_RHYTHM
#define BM_TRUNK_THORACIC_RHYTHM BM_TRUNK_RHYTHM
#endif

// A switch to use a kinematic rhythm for the cervical spine.
#ifndef BM_TRUNK_CERVICAL_RHYTHM
#define BM_TRUNK_CERVICAL_RHYTHM BM_TRUNK_RHYTHM
#endif

// A switch to control all the ligaments in the spine.
#ifndef BM_TRUNK_LIGAMENTS
#define BM_TRUNK_LIGAMENTS OFF
#endif

// A switch to control the lumbar spine ligaments.
#ifndef BM_TRUNK_LUMBAR_LIGAMENTS
#define BM_TRUNK_LUMBAR_LIGAMENTS BM_TRUNK_LIGAMENTS
#endif

// A switch to control the thoracic spine ligaments.
#ifndef BM_TRUNK_THORACIC_LIGAMENTS
#define BM_TRUNK_THORACIC_LIGAMENTS BM_TRUNK_LIGAMENTS
#endif

// A switch to control the cervical spine ligaments.
#ifndef BM_TRUNK_CERVICAL_LIGAMENTS
#define BM_TRUNK_CERVICAL_LIGAMENTS BM_TRUNK_LIGAMENTS
#endif

// Index parameter to specify muscle strength for upper extremities.
#ifndef BM_ARM_STRENGTH_INDEX
#define BM_ARM_STRENGTH_INDEX 1.0
#endif

// Switch for the left arm model being present or not.
#ifndef BM_ARM_LEFT
#define BM_ARM_LEFT ON
#endif

// Keyword for the type of left hand.
#ifndef BM_ARM_DETAIL_HAND_LEFT
#define BM_ARM_DETAIL_HAND_LEFT CONST_HAND_SIMPLE
#endif

// Switch for the shoulder rhythm constraints for the left arm being present or not.
#ifndef BM_ARM_SHOULDER_RHYTHM_LEFT
#define BM_ARM_SHOULDER_RHYTHM_LEFT OFF
#endif

// Switch for the right arm model being present or not.
#ifndef BM_ARM_RIGHT
#define BM_ARM_RIGHT ON
#endif

// Keyword for the type of right hand.
#ifndef BM_ARM_DETAIL_HAND_RIGHT
#define BM_ARM_DETAIL_HAND_RIGHT CONST_HAND_SIMPLE
#endif

// Switch for the shoulder rhythm constraints for the right arm being present or not.
#ifndef BM_ARM_SHOULDER_RHYTHM_RIGHT
#define BM_ARM_SHOULDER_RHYTHM_RIGHT OFF
#endif

// Keyword for the muscle model type for both left and right arms.
#ifndef BM_ARM_MUSCLES_BOTH
#define BM_ARM_MUSCLES_BOTH CONST_MUSCLES_SIMPLE
#endif

// Keyword for the muscle model type for the left arm.
#ifndef BM_ARM_MUSCLES_LEFT
#define BM_ARM_MUSCLES_LEFT BM_ARM_MUSCLES_BOTH
#endif

// Keyword for the muscle model type for only the left neck muscle.
#ifndef BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT
#define BM_ARM_MUSCLES_ONLY_ON_NECK_LEFT CONST_MUSCLES_NONE
#endif

// Keyword for the muscle model for both the right arm.
#ifndef BM_ARM_MUSCLES_RIGHT
#define BM_ARM_MUSCLES_RIGHT BM_ARM_MUSCLES_BOTH
#endif

// Keyword for the muscle model type for only the right neck muscle.
#ifndef BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT
#define BM_ARM_MUSCLES_ONLY_ON_NECK_RIGHT CONST_MUSCLES_NONE
#endif

// Keyword to choose the option of the joint axes defintion based on the anatomical landmarks.
#ifndef BM_BONY_LANDMARK_DEFINED_JOINTAXIS
#define BM_BONY_LANDMARK_DEFINED_JOINTAXIS OFF
#endif

// Keyword for pelvis display setting.
#ifndef BM_PELVIS_DISPLAY
#define BM_PELVIS_DISPLAY CONST_PELVIS_DISPLAY_LEGPELVIS_ONLY
#endif

// File name of the mannequin definition file. Default is a file in the body model, but this can be copied to and modified in your model directory.
#ifndef BM_MANNEQUIN_FILE
#path BM_MANNEQUIN_FILE "<ANYBODY_PATH_BODY>\BodyModels\GenericBodyModel\BodyModel.mannequin.any"
#endif

// Setting of the default value for all mannequin drivers.
#ifndef BM_MANNEQUIN_DRIVER_DEFAULT
#define BM_MANNEQUIN_DRIVER_DEFAULT ON
#endif

// By default constraint type of mannequin drivers will be soft.
#ifndef BM_MANNEQUIN_DRIVER_WEAK_SWITCH
#define BM_MANNEQUIN_DRIVER_WEAK_SWITCH ON
#endif

// Allows for individual weights if the BM mannequin drivers are soft. Weights are set by assigning the BM_MANNEQUIN_DRIVER_* switches a value instead of ON/OFF.
#ifndef BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS
#define BM_MANNEQUIN_DRIVER_INDIVIDUAL_WEIGHTS OFF
#endif

// Keyword for the interface morhping between the trunk and the leg pelvis segments.
#ifndef BM_LEG_TRUNK_INTERFACE
#define BM_LEG_TRUNK_INTERFACE CONST_MORPH_TRUNK_TO_LEG
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_X
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_X BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_Y
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_Y BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_POS_Z
#define BM_MANNEQUIN_DRIVER_PELVIS_POS_Z BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_ROT_X
#define BM_MANNEQUIN_DRIVER_PELVIS_ROT_X BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_NECK
#define BM_MANNEQUIN_DRIVER_NECK BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION
#define BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
#define BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT
#define BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
#define BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT
#define BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT
#define BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT
#define BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT
#define BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT
#define BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// Switch for the mannequin driver being active or not
#ifndef BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT
#define BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
#endif

// A switch to use different ref. frame than the default global reference frame
#ifndef BM_GLOBAL_REFERENCE_FRAME_SWITCH
#define BM_GLOBAL_REFERENCE_FRAME_SWITCH OFF
#endif

// An object path leading to the selected global reference frame
#ifndef BM_GLOBAL_REFERENCE_FRAME
#define BM_GLOBAL_REFERENCE_FRAME ..GenericGlobalRefFrame
#endif

