/** 
  Class template for creating a model that can be used to calibrate the legs 
*/
#class_template LegCalibrationModel(Side, BodyModelRef) {
  AnyComponentDefinition CDef = {};
  
  #var AnyObjectPtr HipPositions;
  #var AnyObjectPtr KneePositions;
  #var AnyObjectPtr AnklePositions;
  #var AnyObjectPtr SubTalarPositions;
  
  AnyFolder &Pelvis = BodyModelRef.Trunk.Segments.PelvisSeg;
  AnyFolder &Sacrum = BodyModelRef.Trunk.Segments.SacrumSeg;
  AnyFolder &Thorax = BodyModelRef.Trunk.Segments.ThoraxSeg;
  
  AnySeg &L1 = BodyModelRef.Trunk.Segments.L1Seg;
  AnySeg &L2 = BodyModelRef.Trunk.Segments.L2Seg;
  AnySeg &L3 = BodyModelRef.Trunk.Segments.L3Seg;
  AnySeg &L4 = BodyModelRef.Trunk.Segments.L4Seg;
  AnySeg &L5 = BodyModelRef.Trunk.Segments.L5Seg;
  
  AnyFolder &LumbarJoints = BodyModelRef.Trunk.Joints.Lumbar;
  
  AnyFolder &LegSegments = BodyModelRef.Side.Leg.Seg;
  AnyFolder &LegJoints = BodyModelRef.Side.Leg.Jnt;
  
  AnyFolder &Muscles = BodyModelRef.Side.Leg.Mus;
  
  // Constraints
  AnyFixedRefFrame ground = {
    AnyRefNode node = {
      ARel = ..Pelvis.Axes0;
      sRel = ..Pelvis.r0;
    };
  };
  
  AnyKinEq ThoraxFix = {
    AnyKinMeasure& PelvisThoraxExtension = BodyModelRef.Interface.Trunk.PelvisThoraxExtension;
    AnyKinMeasure& PelvisThoraxLateralBending = BodyModelRef.Interface.Trunk.PelvisThoraxLateralBending;
    AnyKinMeasure& PelvisThoraxRotation = BodyModelRef.Interface.Trunk.PelvisThoraxRotation;
  };
  
  AnyKinEq PelvisFix = {
    AnyKinLinear Lin = {
      AnyRefFrame &ground = ..ground.node;
      AnyRefFrame &Pelvis = ..Pelvis;
    };
    AnyKinRotational Rot = {
      Type = RotAxesAngles;
      AnyRefFrame &ground = ..ground.node;
      AnyRefFrame &Pelvis = ..Pelvis;
    };
  };
  
  AnyKinEqInterPolDriver Hip = {
    AnyKinRotational &Spherical = .BodyModelRef.Interface.Side.HipFlexion.HipMeasure;
    Type = PiecewiseLinear;
    T = linspace(0,1,SizesOf(Data)[1]);
    Data = Obj2Num(.HipPositions)' * pi/180;
    Reaction.Type = {Off, Off, Off};
    AnyInt expect_nPos_to_match_nStep = warn(eqfun(NumElemOf(T), ..nStep), strformat("The number of calibration positions (Data) in the: " + NameOf(ObjGetParent(0)) + " driver does not match the number of positions (nStep) in the study."));
    
  };
  
  AnyKinEqInterPolDriver Knee = {
    AnyKinMeasure& Hinge = .BodyModelRef.Interface.Side.KneeFlexion;
    Type = PiecewiseLinear;
    T = linspace(0,1,SizesOf(Data)[1]);
    Data = {Obj2Num(.KneePositions)} * pi/180;
    Reaction.Type = {Off};
    AnyInt expect_nPos_to_match_nStep = warn(eqfun(NumElemOf(T), ..nStep), strformat("The number of calibration positions (Data) in the: " + NameOf(ObjGetParent(0)) + " driver does not match the number of positions (nStep) in the study."));
    
  };
  
  AnyKinEqInterPolDriver Ankle = {
    AnyKinMeasure& Hinge = .BodyModelRef.Interface.Side.AnklePlantarFlexion;
    Type = PiecewiseLinear;
    T = linspace(0,1,SizesOf(Data)[1]);
    Data = {Obj2Num(.AnklePositions)} * pi/180;
    Reaction.Type = {Off};
    AnyInt expect_nPos_to_match_nStep = warn(eqfun(NumElemOf(T), ..nStep), strformat("The number of calibration positions (Data) in the: " + NameOf(ObjGetParent(0)) + " driver does not match the number of positions (nStep) in the study."));
    
  };
  
  AnyKinEqInterPolDriver SubTalar = {
    AnyKinMeasure& Hinge = .BodyModelRef.Interface.Side.SubTalarEversion;
    Type = PiecewiseLinear;
    T = linspace(0,1,SizesOf(Data)[1]);
    Data = {Obj2Num(.SubTalarPositions)} * pi/180;
    Reaction.Type = {Off};
    AnyInt expect_nPos_to_match_nStep = warn(eqfun(NumElemOf(T), ..nStep), strformat("The number of calibration positions (Data) in the: " + NameOf(ObjGetParent(0)) + " driver does not match the number of positions (nStep) in the study."));
    
  };
};


/**
  Class template for creating calibrationstudies with same settings
 */
#class_template LegCalibrationStudy(
  __CLASS__ = AnyBodyCalibrationStudy,
  BodyModelRef,
  Side,
) {
  // Study settings
  FiberAndTendonLengthAdjustment.CalibrateTendonAtMaxForceOnOff = Off;
  Kinematics.SmallStepAssumptionOnOff = Off;
  InitialConditions.SmallStepAssumptionOnOff = Off;
  Kinematics.PosAnalysisOnlyOnOff = On;
  InitialConditions.PosAnalysisOnlyOnOff = On;
  
  LegCalibrationModel ModelRef(Side=Side, BodyModelRef=BodyModelRef) = {
    HipPositions = .HipPositions;
    KneePositions = .KneePositions;
    AnklePositions = .AnklePositions;
    SubTalarPositions = .SubTalarPositions;
  };
};

