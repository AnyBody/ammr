/// Folder for data across all layers
AnyFolder AllLayers = {
  
  /// The idea is to utilize existing
  /// interpolation functions to generate a set of points which has an offset to existing points
  AnyFolder AbdominalPoints = {
    
    AnyFolder calculations = {
      
      AnyInt N_points ??=39;
      
      AnyFolder Right ={
        // Function to generate points on the inside of each layer. The function takes an index of
        // what layer to generate n points for. calling InnerPointFun(1.0) will give n_points
        // along layer 1 
        #define _SIDE_ Right
        AnyFolder Layer_L1 ={
          #define _LAYER_ Layer_L1
          AnyIntVar n_layers = 11; ///< number of layers per side in the body
          AnyFloatVar first_layer = 1.0; ///< we want layer one data when calling the function with param=1
          AnyInt n_points = ..N_points; ///< number of data points along each layer
          

          AnyFloat indexes = {0.0, 0.15, 0.4, 0.5, 0.7, 1.0, 1.3, 1.5, 1.6, 1.85, 2};

          AnyFloat thickness_array =   {0.015,0.01,0.003,0.0025,0.0,0.0,0.0,0.0025,0.003,0.01,0.015};
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
        
        AnyFolder Layer_L2 ={
          #define _LAYER_ Layer_L2
          AnyIntVar n_layers = 11; ///< number of layers per side in the body
          AnyFloatVar first_layer = 2.0; ///< we want layer one data when calling the function with param=1
          AnyInt n_points = ..N_points; ///< number of data points along each layer
          
          
          AnyFloat indexes =1+ .Layer_L1.indexes;
          
                  AnyFloat thickness_array =   .Layer_L1.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
        
        AnyFolder Layer_L3 ={
          #define _LAYER_ Layer_L3
          AnyIntVar n_layers = 11; ///< number of layers per side in the body
          AnyFloatVar first_layer = 3.0; ///< we want layer one data when calling the function with param=1
          AnyInt n_points = ..N_points; ///< number of data points along each layer
          AnyFloat indexes =2+ .Layer_L1.indexes;
          
          AnyFloat thickness_array =   .Layer_L1.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
        
        AnyFolder Layer_L4 ={
          #define _LAYER_ Layer_L4
          AnyIntVar n_layers = 11; ///< number of layers per side in the body
          AnyFloatVar first_layer = 4.0; ///< we want layer one data when calling the function with param=1
          AnyInt n_points = ..N_points; ///< number of data points along each layer
          
          AnyFloat indexes =3+ .Layer_L1.indexes;
          
                 AnyFloat thickness_array =   .Layer_L1.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
        
        AnyFolder Layer_L5 ={
          #define _LAYER_ Layer_L5
          AnyIntVar n_layers = 11; ///< number of layers per side in the body
          AnyFloatVar first_layer = 5.0; ///< we want layer one data when calling the function with param=1
          AnyInt n_points = ..N_points; ///< number of data points along each layer
          
          AnyFloat indexes =4+.Layer_L1.indexes;
          
          AnyFloat thickness_array =  .Layer_L1.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
        
        
        #undef    _SIDE_
        
      }; //right
      
      
      AnyFolder Left ={ 
        
        
        // Function to generate points on the inside of each layer. The function takes an index of
        // what layer to generate n points for. calling InnerPointFun(1.0) will give n_points
        // along layer 1 
        #define _SIDE_ Left
        AnyFolder Layer_L1 ={
          #define _LAYER_ Layer_L1
           AnyIntVar n_layers = ..Right._LAYER_.n_layers; ///< number of layers per side in the body
          AnyFloatVar first_layer =..Right._LAYER_.first_layer; ///< we want layer one data when calling the function with param=1
          AnyInt n_points ??= ..Right._LAYER_.n_points; ///< number of data points along each layer
          AnyFloat indexes = ..Right._LAYER_.indexes;
          AnyFloat thickness_array = -..Right._LAYER_.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
         AnyFolder Layer_L2 ={
          #define _LAYER_ Layer_L2
           AnyIntVar n_layers = ..Right._LAYER_.n_layers; ///< number of layers per side in the body
          AnyFloatVar first_layer =..Right._LAYER_.first_layer; ///< we want layer one data when calling the function with param=1
          AnyInt n_points ??= ..Right._LAYER_.n_points; ///< number of data points along each layer
          AnyFloat indexes = ..Right._LAYER_.indexes;
          AnyFloat thickness_array = -..Right._LAYER_.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
         AnyFolder Layer_L3 ={
          #define _LAYER_ Layer_L3
           AnyIntVar n_layers = ..Right._LAYER_.n_layers; ///< number of layers per side in the body
          AnyFloatVar first_layer =..Right._LAYER_.first_layer; ///< we want layer one data when calling the function with param=1
          AnyInt n_points ??= ..Right._LAYER_.n_points; ///< number of data points along each layer
          AnyFloat indexes = ..Right._LAYER_.indexes;
          AnyFloat thickness_array = -..Right._LAYER_.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
      AnyFolder Layer_L4 ={
          #define _LAYER_ Layer_L4
           AnyIntVar n_layers = ..Right._LAYER_.n_layers; ///< number of layers per side in the body
          AnyFloatVar first_layer =..Right._LAYER_.first_layer; ///< we want layer one data when calling the function with param=1
          AnyInt n_points ??= ..Right._LAYER_.n_points; ///< number of data points along each layer
          AnyFloat indexes = ..Right._LAYER_.indexes;
          AnyFloat thickness_array = -..Right._LAYER_.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };
       AnyFolder Layer_L5 ={
          #define _LAYER_ Layer_L5
           AnyIntVar n_layers = ..Right._LAYER_.n_layers; ///< number of layers per side in the body
          AnyFloatVar first_layer =..Right._LAYER_.first_layer; ///< we want layer one data when calling the function with param=1
          AnyInt n_points ??= ..Right._LAYER_.n_points; ///< number of data points along each layer
          AnyFloat indexes = ..Right._LAYER_.indexes;
          AnyFloat thickness_array = -..Right._LAYER_.thickness_array;
          #include "PointsCalculationsForWrapSurfacesOnLayers.any"
          AnyFloat points = transpose(reshape(PointFun7(indexes)', {3, ..N_points, NumElemOf(indexes)}));
          AnyFloat inner_points =  reshape(InnerPointFun(indexes), {NumElemOf(indexes), SizesOf(InnerPointFun.data_values)[1], 3,});
          #undef _LAYER_ 
        };

        

        
      #undef    _SIDE_
      
    };//left

   
    // Drawings for development and debugging
//      AnyFixedRefFrame ref = {
//       
//        AnyDrawPointCloud drw_data_values_R = {
//          AnyFloat idx = farr(1.0,1.0,5);
//          Points =  transpose(reshape(..Right.Layer_L1.PointFun7(idx)', {3, Main.HumanModel.BodyModel.Trunk.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.N_points, NumElemOf(idx)}));
//          RGB = {0.5,0.5,0.5};
//          Points3D = On;
//          // Vectors3D = On;
//          PointStyle.Size = 0.005;
//        };
// 
//        
//           AnyDrawPointCloud drw_points_R = {
//          Points = ..Right.Layer_L1.points;
//          RGB = {0,0,1};
//          Points3D = On;
//          // Vectors3D = On;
//           PointStyle.Size = 0.005;
//        };
// 
//        
//         AnyDrawPointCloud drw_inner_R = {
//          Points = ..Right.Layer_L1.inner_points;
//          RGB = {1,0,0};
//          Points3D = On;
//          // Vectors3D = On;
//           PointStyle.Size = 0.005;
//        };
//      
//      
//        AnyDrawPointCloud drw_points_L = {
//          Points = ..Left.Layer_L1.points;
//          RGB = {0,0,1};
//          Points3D = On;
//          // Vectors3D = On;
//           PointStyle.Size = 0.005;
//        };
// 
//        
//         AnyDrawPointCloud drw_inner_L = {
//          Points = ..Left.Layer_L1.inner_points;
//          RGB = {1,0,0};
//          Points3D = On;
//          // Vectors3D = On;
//           PointStyle.Size = 0.005;
//        };
//
// 
//      
//      };

      
      
 
      
    };

//    #undef LAYER_POINTS_RIGHT
//    #undef INNER_LAYER_POINTS_RIGHT
//    #undef LAYER_POINTS_LEFT
//    #undef INNER_LAYER_POINTS_LEFT

  };
};