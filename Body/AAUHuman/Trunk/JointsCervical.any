/**
Definitions of the Joints of the cervical spine spine. From T1C7 to Skull
*/
AnyFolder JointsCervicalSpine = {
  
  AnySphericalJoint T1C7Jnt = {
    AnyRefNode &T1Node = ..SegmentsThorax.T1Seg.T1C7JntNode;
    AnyRefNode &C7Node = ..SegmentsCervicalSpine.C7Seg.T1C7JntNode;
  };
  
  AnySphericalJoint C7C6Jnt = {
    AnyRefNode &C7Node = ..SegmentsCervicalSpine.C7Seg.C7C6JntNode;
    AnyRefNode &C6Node = ..SegmentsCervicalSpine.C6Seg.C7C6JntNode;
  };
  
  AnySphericalJoint C6C5Jnt = {
    AnyRefNode &C6Node = ..SegmentsCervicalSpine.C6Seg.C6C5JntNode;
    AnyRefNode &C5Node = ..SegmentsCervicalSpine.C5Seg.C6C5JntNode;
  };
  
  AnySphericalJoint C5C4Jnt = {
    AnyRefNode &C5Node = ..SegmentsCervicalSpine.C5Seg.C5C4JntNode;
    AnyRefNode &C4Node = ..SegmentsCervicalSpine.C4Seg.C5C4JntNode;
  };
  
  AnySphericalJoint C4C3Jnt = {
    AnyRefNode &C4Node = ..SegmentsCervicalSpine.C4Seg.C4C3JntNode;
    AnyRefNode &C3Node = ..SegmentsCervicalSpine.C3Seg.C4C3JntNode;
  };
  
  AnySphericalJoint C3C2Jnt = {
    AnyRefNode &C3Node = ..SegmentsCervicalSpine.C3Seg.C3C2JntNode;
    AnyRefNode &C2Node = ..SegmentsCervicalSpine.C2Seg.C3C2JntNode;
  };
  
  AnyRevoluteJoint C2C1Jnt = {
    Axis = y;
    AnyRefNode &C2Node = ..SegmentsCervicalSpine.C2Seg.C2C1JntNode;
    AnyRefNode &C1Node = ..SegmentsCervicalSpine.C1Seg.C2C1JntNode;
  };
  
  AnyRevoluteJoint C1C0Jnt = {
    Axis = z;
    AnyRefNode &C1Node = ..SegmentsCervicalSpine.C1Seg.C1C0JntNode;
    AnyRefNode &C0Node = ..SegmentsCervicalSpine.SkullSeg.C1C0JntNode;
  };
  

  AnyKinRotational SkullThoraxRotMeasure = {
    AnyRefFrame &Skull = ..SegmentsCervicalSpine.SkullSeg.AnatomicalFrame; 
    AnyRefFrame &Thorax = ..SegmentsThorax.T1Seg.AnatomicalFrame;  
    Type = RotVector;
  };
  
  
  // CervicalRhythm
  
  AnyFolder Flexion = {
    
    AnyKinMeasureOrg Measure  = {
      AnyKinMeasure& ref1 = ..C3C2Jnt;
      AnyKinMeasure& ref2 = ..C4C3Jnt;
      AnyKinMeasure& ref3 = ..C5C4Jnt;
      AnyKinMeasure& ref4 = ..C6C5Jnt;
      AnyKinMeasure& ref5 = ..C7C6Jnt;
      AnyKinMeasure& ref6 = ..T1C7Jnt;
      MeasureOrganizer = iarr(0, 3, 17)+2;
    };   
    
    #if BM_TRUNK_CERVICAL_RHYTHM != OFF
    AnyKinEqSimpleDriver RhythmDriver = {
      
      AnyKinMeasureLinComb Measure = {
        
        AnyKinMeasure& u0 = ..SkullThoraxFlexion;
        AnyKinMeasure& u1 = ...C1C0Jnt;  // z direction
        AnyKinMeasure& u2 = ..Measure;

        OutDim = 6;
        Const = {0, 0, 0, 0, 0, 0};
        Coef = {
          {40/122, 1, 0, 0, 0, 0, 0, 0},
          {0, 0, 1, -1, 0, 0,  0,  0},
          {0, 0, 0, 1, -1, 0,  0,  0},
          {0, 0, 0, 0, 1, -1,  0,  0},
          {0, 0, 0, 0, 0,  1, -1,  0},
          {0, 0, 0, 0, 0,  0,  1, -1}};
      }; // Measure      
      
    #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
      // Use a template to create the weight function, so
      // the weight values can be overridden by the user. 
      Template_AnyFunConst Weights (NUMBER_OF_ELEMENTS=..nDim) = {};
      
        CType= repmat(nDim,Soft); 
        WeightFun ={&Weights.Fun};
    #endif
      
      DriverPos = repmat(nDim, 0);
      DriverVel = repmat(nDim, 0);
      Reaction.Type = repmat(nDim, Off);
      
    }; // CervicalFlexionRhythmDrv
    #endif
        
    AnyKinMeasureOrg SkullThoraxFlexion  = {
      MeasureOrganizer = {2};
      AnyKinMeasure& ref = ..SkullThoraxRotMeasure;
    };
    
  };//Flexion
  
  
  AnyFolder LateralBending = {
    
    AnyKinMeasureOrg Measure  = {
      AnyKinMeasure& ref1 = ..C3C2Jnt;
      AnyKinMeasure& ref2 = ..C4C3Jnt;
      AnyKinMeasure& ref3 = ..C5C4Jnt;
      AnyKinMeasure& ref4 = ..C6C5Jnt;
      AnyKinMeasure& ref5 = ..C7C6Jnt;
      AnyKinMeasure& ref6 = ..T1C7Jnt;
      MeasureOrganizer = iarr(0, 3, 17)+0;
    };  
    
    
    #if BM_TRUNK_CERVICAL_RHYTHM != OFF
    AnyKinEqSimpleDriver RhythmDriver = {
      
      AnyKinMeasureLinComb Measure = {        
        AnyKinMeasure& u = ..Measure;

        OutDim = 5;
        Const = {0, 0, 0, 0, 0};
        Coef = {
          {1, -1, 0, 0,  0,  0},
          {0, 1, -1, 0,  0,  0},
          {0, 0, 1, -1,  0,  0},
          {0, 0, 0,  1, -1,  0},
          {0, 0, 0,  0,  1, -1}};
        
      }; // Measure
     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
      // Use a template to create the weight function, so
      // the weight values can be overridden by the user. 
      Template_AnyFunConst Weights (NUMBER_OF_ELEMENTS=..nDim) = {};
      CType= repmat(nDim,Soft);
      WeightFun ={&Weights.Fun};
     #endif

      DriverPos = repmat(nDim, 0);
      DriverVel = repmat(nDim, 0);
      Reaction.Type = repmat(nDim, Off);
      
    }; // CervicalLateralBendingRhythmDrv
    #endif
    
    AnyKinMeasureOrg SkullThoraxLateralBending  = {
      MeasureOrganizer = {0};
      AnyKinMeasure& ref = ..SkullThoraxRotMeasure;
    };
    
  };//LateralBending
  
  AnyFolder Rotation = {
    
    AnyKinMeasureOrg Measure  = {
      AnyKinMeasure& ref1 = ..C3C2Jnt;
      AnyKinMeasure& ref2 = ..C4C3Jnt;
      AnyKinMeasure& ref3 = ..C5C4Jnt;
      AnyKinMeasure& ref4 = ..C6C5Jnt;
      AnyKinMeasure& ref5 = ..C7C6Jnt;
      AnyKinMeasure& ref6 = ..T1C7Jnt;
      MeasureOrganizer = iarr(0, 3, 17)+1;
    };  
    
    #if BM_TRUNK_CERVICAL_RHYTHM != OFF
    AnyKinEqSimpleDriver RhythmDriver = {
      
      AnyKinMeasureLinComb Measure = {
        
        AnyKinMeasure& u0 = ..SkullThoraxRotation;
        AnyKinMeasure& u1 = ...C2C1Jnt;  // y direction
        AnyKinMeasure& u2 = ..Measure;
        OutDim = 6;
        Const = {0, 0, 0, 0, 0, 0};
        Coef = {
          {77/132, 1, 0, 0, 0, 0, 0, 0},
          {0, 0, 1, -1, 0, 0,  0,  0},
          {0, 0, 0, 1, -1, 0,  0,  0},
          {0, 0, 0, 0, 1, -1,  0,  0},
          {0, 0, 0, 0, 0,  1, -1,  0},
          {0, 0, 0, 0, 0,  0,  1, -1}};        
      }; // Measure

      
    #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
      // Use a template to create the weight function, so
      // the weight values can be overridden by the user. 
      Template_AnyFunConst Weights (NUMBER_OF_ELEMENTS=..nDim) = {};
      CType= repmat(nDim,Soft);
      WeightFun ={&Weights.Fun};
     #endif

      DriverPos = repmat(nDim, 0);
      DriverVel = repmat(nDim, 0);
      Reaction.Type = repmat(nDim, Off);
      
    }; // CervicalRotationRhythmDrv
    #endif
    
    AnyKinMeasureOrg SkullThoraxRotation  = {
      MeasureOrganizer = {1};
      AnyKinMeasure& ref = ..SkullThoraxRotMeasure;
    };
    
  };//Rotation
  
  
}; //End of JointsCervicalSpine

