/**
Definitions of the Joints of the cervical spine spine. From T1C7 to Skull
*/
AnySphericalJoint T1C7 = {
  AnyRefNode &T1Node = ...Segments.T1Seg.T1C7JntNode;
  AnyRefNode &C7Node = ...Segments.C7Seg.T1C7JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.T1Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {
    #if BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_RIGID_
      &....Segments.ThoraxSeg
    #else
      &....Segments.T1Seg
    #endif
    };
    AnyFloat Flocal = -F * .T1Node.RotNode.Axes;
  };
};

AnySphericalJoint C7C6 = {
  AnyRefNode &C7Node = ...Segments.C7Seg.C7C6JntNode;
  AnyRefNode &C6Node = ...Segments.C6Seg.C7C6JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C7Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C7Seg};
    AnyFloat Flocal = -F * .C7Node.RotNode.Axes;
  };
};

AnySphericalJoint C6C5 = {
  AnyRefNode &C6Node = ...Segments.C6Seg.C6C5JntNode;
  AnyRefNode &C5Node = ...Segments.C5Seg.C6C5JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C6Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C6Seg};
    AnyFloat Flocal = -F * .C6Node.RotNode.Axes;
  };
};

AnySphericalJoint C5C4 = {
  AnyRefNode &C5Node = ...Segments.C5Seg.C5C4JntNode;
  AnyRefNode &C4Node = ...Segments.C4Seg.C5C4JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C5Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C5Seg};
    AnyFloat Flocal = -F * .C5Node.RotNode.Axes;
  };
};

AnySphericalJoint C4C3 = {
  AnyRefNode &C4Node = ...Segments.C4Seg.C4C3JntNode;
  AnyRefNode &C3Node = ...Segments.C3Seg.C4C3JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C4Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C4Seg};
    AnyFloat Flocal = -F * .C4Node.RotNode.Axes;
  };
};

AnySphericalJoint C3C2 = {
  AnyRefNode &C3Node = ...Segments.C3Seg.C3C2JntNode;
  AnyRefNode &C2Node = ...Segments.C2Seg.C3C2JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C3Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C3Seg};
    AnyFloat Flocal = -F * .C3Node.RotNode.Axes;
  };
};

AnyRevoluteJoint C2C1 = {
  Axis = y;
  AnyRefNode &C2Node = ...Segments.C2Seg.C2C1JntNode;
  AnyRefNode &C1Node = ...Segments.C1Seg.C2C1JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C2Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C2Seg};
    AnyFloat Flocal = -F * .C2Node.RotNode.Axes;
  };
};

AnyRevoluteJoint C1C0 = {
  Axis = z;
  AnyRefNode &C1Node = ...Segments.C1Seg.C1C0JntNode;
  AnyRefNode &C0Node = ...Segments.SkullSeg.C1C0JntNode;
  //Joint reaction force transformed to the rotated reference node aligned with the vertebral body.
  AnyForceMomentMeasure2 ReactionForceRotated = {
    RefPoint = &.C1Node.RotNode;
    IncludeForces = {&.Constraints.Reaction};
    IncludeSegments = {&....Segments.C1Seg};
    AnyFloat Flocal = -F * .C1Node.RotNode.Axes;
  };
};


AnyKinRotational SkullThoraxRotMeasure = {
  AnyRefFrame &Thorax = ...Segments.T1Seg.AnatomicalFrameTrunk;
  AnyRefFrame &Skull = ...Segments.SkullSeg.AnatomicalFrame;
  Type = RotVector;
};


// CervicalRhythm

AnyFolder Flexion = {

  #if BM_TRUNK_CERVICAL_RHYTHM != OFF
  RhythmDriverLinear rhythmC2C7(RELATIVE_TO_DOF=5, _REDEFINE_VARIABLES=On) =
  {
     AnyFloat RhythmCoefficients ??= {0.086, 0.175, 0.22, 0.223, 0.18, 0.116};
     Measures.Input  = {
       AnyKinMeasure& ref1 = ....C3C2;
       AnyKinMeasure& ref2 = ....C4C3;
       AnyKinMeasure& ref3 = ....C5C4;
       AnyKinMeasure& ref4 = ....C6C5;
       AnyKinMeasure& ref5 = ....C7C6;
       AnyKinMeasure& ref6 = ....T1C7;
       MeasureOrganizer = iarr(0, 3, 17)+2;
    };

     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
     CType = repmat(nDim, Soft);
     #endif

   };

   RhythmDriverLinear rhythmC1C0SkullThoraxFlexion( _REDEFINE_VARIABLES=On) =
   {
     // The -1 is because C1C0Jnt is a revolute jnt and has the opposite signs for output.
     AnyVector RhythmCoefficients ??= {122/40,-1};

     Measures.Input  = {
       AnyKinMeasure& ref = ...SkullThoraxFlexion;
       AnyKinMeasure& u1 = ....C1C0;  // z direction
       MeasureOrganizer = {0, 1};
     };

     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
     CType = repmat(nDim, Soft);
     #endif
  };
  #endif

  AnyKinMeasureLinComb SkullThoraxFlexion  = {
    AnyKinMeasureOrg select ={
      AnyKinMeasure& ref = ...SkullThoraxRotMeasure;
      MeasureOrganizer = {2};
    };
    Coef ={{-1}};
    Const = {0};
    OutDim=1;
  };

};//Flexion


AnyFolder LateralBending = {

  #if BM_TRUNK_CERVICAL_RHYTHM != OFF
  RhythmDriverLinear rhythmC2C7(RELATIVE_TO_DOF=5, _REDEFINE_VARIABLES=On) =
  {
     AnyVector RhythmCoefficients ??= {0.123, 0.164, 0.179, 0.19, 0.181, 0.163};
     Measures.Input  = {
       AnyKinMeasure& ref1 = ....C3C2;
       AnyKinMeasure& ref2 = ....C4C3;
       AnyKinMeasure& ref3 = ....C5C4;
       AnyKinMeasure& ref4 = ....C6C5;
       AnyKinMeasure& ref5 = ....C7C6;
       AnyKinMeasure& ref6 = ....T1C7;
       MeasureOrganizer = iarr(0, 3, 17)+0;
    };

     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
     CType = repmat(nDim, Soft);
     #endif

   };
  #endif

  AnyKinMeasureOrg SkullThoraxLateralBending  = {
    MeasureOrganizer = {0};
    AnyKinMeasure& ref = ..SkullThoraxRotMeasure;
  };

};//LateralBending

AnyFolder Rotation = {

  #if BM_TRUNK_CERVICAL_RHYTHM != OFF
  RhythmDriverLinear rhythmC2C7(RELATIVE_TO_DOF=5, _REDEFINE_VARIABLES=On) =
  {
     AnyVector RhythmCoefficients ??= {0.0722, 0.1413, 0.2175, 0.2337, 0.2175, 0.1179};
     Measures.Input  = {
       AnyKinMeasure& ref1 = ....C3C2;
       AnyKinMeasure& ref2 = ....C4C3;
       AnyKinMeasure& ref3 = ....C5C4;
       AnyKinMeasure& ref4 = ....C6C5;
       AnyKinMeasure& ref5 = ....C7C6;
       AnyKinMeasure& ref6 = ....T1C7;
       MeasureOrganizer = iarr(0, 3, 17)+1;
    };
     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
     CType = repmat(nDim, Soft);
     #endif
   };

   RhythmDriverLinear rhythmC2C1SkullThoraxRotation( _REDEFINE_VARIABLES=On) =
   {
     AnyVector RhythmCoefficients ??= {0.2721+0.3061, 0.2721};

     Measures.Input  = {
       AnyKinMeasure& ref = ...SkullThoraxRotation;
       AnyKinMeasure& u1 = ....C2C1;  // y direction
       MeasureOrganizer = {0, 1};
     };

     #if BM_TRUNK_CERVICAL_RHYTHM == _RHYTHM_SOFT_
     CType = repmat(nDim, Soft);
     #endif
  };
  #endif

  AnyKinMeasureOrg SkullThoraxRotation  = {
    MeasureOrganizer = {1};
    AnyKinMeasure& ref = ..SkullThoraxRotMeasure;
  };

};//Rotation


#if BM_TRUNK_CERVICAL_THORACIC_LINK
// See the documentation for the rhythms/links for better understanding of the numbers
// used for the coefficients.
RhythmDriverLinear CervicalThroacicRotationLinkDriver(_REDEFINE_VARIABLES=On) =
{
    AnyVector RhythmCoefficients ??= {0.272+0.306, 0.102+0.32};
    Measures.Input = {
     AnyKinMeasure& SkullThoraxRotation_ref = ......Interface.Trunk.SkullThoraxRotation;
     AnyKinMeasure& T12T1_Rot_ref = ......Interface.Trunk.PelvisThoraxRotation;
    };

};


RhythmDriverLinear CervicalThroacicLatBendingLinkDriver(_REDEFINE_VARIABLES=On) =
{
    AnyVector RhythmCoefficients ??= {0.45, 0.275+0.275};
    Measures.Input = {
     AnyKinMeasure& SkullThoraxLateralBending_ref = ......Interface.Trunk.SkullThoraxLateralBending;
     AnyKinMeasure& T12T1_latbend_ref = ......Interface.Trunk.PelvisThoraxLateralBending;
    };
};


RhythmDriverBiLinear CervicalThroacicExtensionLinkDriver(NDIM=2, _REDEFINE_VARIABLES=On) =
{
    AnyVector RhythmCoefficients ??= {0.311+0.115, -1*(0.144+0.430)};
    AnyFloat RhythmCoefficientsNegative ??= {0.383+0.142, -1*(0.217+0.258)};

    // +/- 5 degree interval where rhythm transitions from one set of coefficients to the other
    AnyFloat TransitionInterval ??= 5*pi/180;

    Measures.Input = {
      AnyKinMeasure& SkullThoraxFlexion_ref = ......Interface.Trunk.SkullThoraxFlexion;
      AnyKinMeasure& T12T1_ext_ref = ......Interface.Trunk.PelvisThoraxExtension;
    };
};
#endif

