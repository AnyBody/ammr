/**
Definitions of Segments in the Thorax Part of the Spine.

Abbrevitations:
ALL = Anterior Longitudinal Ligament
PLL = Posterior Longitudinal Ligament
LS = Ligamentum Supraspinale
LI = Ligamentum Interspinalia

MF = Multifidi
ILpl = Iliocostalis Lumborum pars lumborum (part of Erector Spinae)
LTpl = Longissimus Thoracis pars lumborum (part of Erector Spinae)
ILpt = Iliocostalis Lumborum pars thoracis (part of Erector Spinae)
ICpt = Iliocostalis Cervicis pars cervicis (part of Erector Spinae)
LTpt = Longissimus Thoracis pars thoracis (part of Erector Spinae)
PM = Psoas Major
QL = Quadratus Lumborum
RA = Rectus Abdominis
OE = Obliquus Externus
OI = Obliquus Internus

C = Costae
CI = Crista Iliaca
CP = Crista Pubica
SIPS = Spina iliaca posterior superior
SIPI = Spina iliaca Posterior inferior
T = Thoracal hvirvel
L = Lumbal hvirvel
S = Sacral segment
*/ 
AnySeg ThoraxSeg = {

  AnyFolder &Data = ..Data.unscaled.ModelParameters;
  
  r0=.L1Seg.T12L1JntNode.sRel*.L1Seg.Axes0'+.L1Seg.r0-T12.T12L1JntNode.sRel*Axes0';
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ..PelvisSeg,
  ) = {};

  #include "TrunkAnatomicalFrame.any"

  // Inertia properties for the segment
  UseInertiaObjects = On;
  AnyInertiaMatrix InertiaObject = {
    BodyMassCorrectionCompatibility massCorrection() = {
      DensityTheoretical = ....Data.unscaled.StandardParameters.Trunk.Mass;
    };
         
    AnyVar Radius = (Mass / (pi * .Data.Thorax.UBHeight * 1000))^0.5;
    AnyVar Ixx = 0.25 * Mass*Radius^2 + 1/12 * Mass * .Data.Thorax.UBHeight^2;
    AnyVar Izz = Ixx;
    AnyVar Iyy = 0.5*Mass*Radius^2;
    
    AnyMat33 JMatRot = (
      .AnatomicalFrameTrunk.ARel * 
      {{Ixx,0,0}, {0,Iyy,0}, {0,0,Izz}} * 
      .AnatomicalFrameTrunk.ARel'
    );

    Jii = {JMatRot[0][0], JMatRot[1][1], JMatRot[2][2]};
    Jij = {JMatRot[1][0], JMatRot[2][1], JMatRot[2][0]};
    
    sCoM = .Scale(.Data.Thorax.sCoM_pos);
    JaboutCoMOnOff = On;
  };
 
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatibility with AMMR 2.4 MoCap Marker protocols  AnyRefNode& ScalingNode = AnatomicalFrame;

  AnyRefNode CTCVJntNode = {}; ///<placeholder for the rigid thorax
  AnyRefNode CS          = {}; ///<placeholder for the rigid thorax
  AnyRefNode RibNodes = {
    AnyRefNode CTCVJntNodeR = {};    
    AnyRefNode CTCVJntNodeL = {};    
  };
  
  AnyRefNode ForceVectorNode = {sRel = .Scale(.Data.Thorax.ForceVectorNode_pos);};
  
  AnyDrawSurf BoneDraw = {
    FileName = ...Data.unscaled.STL.FilenameThoraxSegWithoutNeck; 
    RGB = ...ColorRef.Segments;
    ScaleXYZ={1.0,1.0,1.0};
    Opacity = Main.DrawSettings.BonesOpacity.Thorax;
    AnyFunTransform3D &Scale =.Scale;
  };

  // For the rigid thorax we define nodes to represent the individual segments
  // these nodes ensure we have separate scope for inserting nodes and naming of nodes
  AnyRefNode Right ={
    AnyVar Sign = 1;
    #include "sharedSegmentalAttributes.any"
    AnyRefNode R12 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R11 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R10 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R9 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R8 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R7 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R6 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R5 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R4 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R3 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R2 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R1 = {#include "sharedSegmentalAttributes.any"};
  };
  AnyRefNode Left ={
    AnyVar Sign = -1;
    #include "sharedSegmentalAttributes.any"
    AnyRefNode R12 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R11 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R10 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R9 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R8 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R7 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R6 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R5 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R4 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R3 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R2 = {#include "sharedSegmentalAttributes.any"};
    AnyRefNode R1 = {#include "sharedSegmentalAttributes.any"};
  };    

  AnyRefNode T12 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T11T12JntNode = {sRel = .Scale(.Data.T12.T11T12JntNode_pos);};    
    AnyRefNode T12L1JntNode = {sRel = .Scale(.Data.T12.T12L1JntNode_pos);};
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T11 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T10T11JntNode = {sRel = .Scale(.Data.T11.T10T11JntNode_pos);};
    AnyRefNode T11T12JntNode = {sRel = .Scale(.Data.T11.T11T12JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T10 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T9T10JntNode = {sRel = .Scale(.Data.T10.T9T10JntNode_pos);};
    AnyRefNode T10T11JntNode = {sRel = .Scale(.Data.T10.T10T11JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T9 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T8T9JntNode = {sRel = .Scale(.Data.T9.T8T9JntNode_pos);};
    AnyRefNode T9T10JntNode = {sRel = .Scale(.Data.T9.T9T10JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T8 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T7T8JntNode = {sRel = .Scale(.Data.T8.T7T8JntNode_pos);};
    AnyRefNode T8T9JntNode = {sRel = .Scale(.Data.T8.T8T9JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T7 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T6T7JntNode = {sRel = .Scale(.Data.T7.T6T7JntNode_pos);};
    AnyRefNode T7T8JntNode = {sRel = .Scale(.Data.T7.T7T8JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T6 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T6T7JntNode = {sRel = .Scale(.Data.T6.T6T7JntNode_pos);};
    AnyRefNode T5T6JntNode = {sRel = .Scale(.Data.T6.T5T6JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T5 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T4T5JntNode = {sRel = .Scale(.Data.T5.T4T5JntNode_pos);};
    AnyRefNode T5T6JntNode = {sRel = .Scale(.Data.T5.T5T6JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T4 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T3T4JntNode = {sRel = .Scale(.Data.T4.T3T4JntNode_pos);};
    AnyRefNode T4T5JntNode = {sRel = .Scale(.Data.T4.T4T5JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T3 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T3T4JntNode = {sRel = .Scale(.Data.T3.T3T4JntNode_pos);};
    AnyRefNode T2T3JntNode = {sRel = .Scale(.Data.T3.T2T3JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T2 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T2T3JntNode = {sRel = .Scale(.Data.T2.T2T3JntNode_pos);};
    AnyRefNode T1T2JntNode = {sRel = .Scale(.Data.T2.T1T2JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };
  AnyRefNode T1 = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode T1C7JntNode = {
      sRel = .Scale(.Data.T1.T1C7JntNode_pos);
      AnyRefNode RotNode = {
        ARel = RotMat(
          0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
          ..SuperiorEndplateAnteriorNode.sRel,
          0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
        )*RotMat(pi/2,x);
      };      
    };

    // Nodes at the anterior and posterior points on the superior endplate
    AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T1.SuperiorEndplateAnteriorNode_pos);};
    AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T1.SuperiorEndplatePosteriorNode_pos);};

    // Nodes at the right and left points on the superior endplate
    AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T1.Right.SuperiorEndplateNode_pos);};
    AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T1.Left.SuperiorEndplateNode_pos);};


    AnyRefNode T1T2JntNode = {sRel = .Scale(.Data.T1.T1T2JntNode_pos);};    
    AnyRefNode Left = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = -1;}; 
    AnyRefNode Right = {AnyFunTransform3D& Scale = .Scale; AnyInt Sign = 1;};
  };

  AnyRefNode Sternum = {
    #include "sharedSegmentalAttributes.any"
    //Incisura jungularis 
    AnyRefNode ij = {
      AnyFloat Mirror = eye(3);
      //This is the standard value for the ij it must be used in order to scale the model
      //since nodes are inserted into this node.
      sRel = .Scale(.Data.Sternum.ij_pos);
      ARel = .AnatomicalFrameTrunk.ARel * {{0, 0, -1}, {0, 1, 0}, {1, 0, 0}};
    };
  
    AnyRefNode iji = {
      AnyFloat Mirror = {{-1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
      
      //This is the standard value for the ij it must be used in order to scale the model
      //since nodes are inserted into this node.
      AnyVec3 sRelStd = .Data.Sternum.ij_pos;    
      sRel = .Scale(sRelStd);      
      ARel = .AnatomicalFrameTrunk.ARel* {{0, 0, -1}, {0, 1, 0}, {1, 0, 0}};
    };
    AnyRefNode Right = {
        AnyFun3D& Scale = .Scale;
        AnyInt Sign=1;
    }; ///< Container for all right sided nodes
    AnyRefNode Left = {
        AnyFun3D& Scale = .Scale;
        AnyInt Sign=-1;
    }; ///< Container for all left sided nodes
    
  };
  AnyRefNode SternalBody = {
    #include "sharedSegmentalAttributes.any"
    AnyRefNode Right = {
        AnyFun3D& Scale = .Scale;
    }; ///< Container for all right sided nodes
    AnyRefNode Left = {
        AnyFun3D& Scale = .Scale;
    }; ///< Container for all left sided nodes
  };

}; // End of ThoraxSeg

// Here we construct references to the psudo-segmental nodes inside the thorax segment
// This is done to have the correct segment objects in the correct place in the model tree
AnyFolder &SternumSeg = ThoraxSeg.Sternum;
AnyFolder &SternalBodySeg = ThoraxSeg.SternalBody;
AnyRefNode &T12Seg = ThoraxSeg.T12;
AnyRefNode &T11Seg = ThoraxSeg.T11;
AnyRefNode &T10Seg = ThoraxSeg.T10;
AnyRefNode &T9Seg = ThoraxSeg.T9;
AnyRefNode &T8Seg = ThoraxSeg.T8;
AnyRefNode &T7Seg = ThoraxSeg.T7;
AnyRefNode &T6Seg = ThoraxSeg.T6;
AnyRefNode &T5Seg = ThoraxSeg.T5;
AnyRefNode &T4Seg = ThoraxSeg.T4;
AnyRefNode &T3Seg = ThoraxSeg.T3;
AnyRefNode &T2Seg = ThoraxSeg.T2;
AnyRefNode &T1Seg = ThoraxSeg.T1;

AnyFolder Right = {
  AnyRefNode &R12Seg = .ThoraxSeg.Right.R12;
  AnyRefNode &R11Seg = .ThoraxSeg.Right.R11;
  AnyRefNode &R10Seg = .ThoraxSeg.Right.R10;
  AnyRefNode &R9Seg = .ThoraxSeg.Right.R9;
  AnyRefNode &R8Seg = .ThoraxSeg.Right.R8;
  AnyRefNode &R7Seg = .ThoraxSeg.Right.R7;
  AnyRefNode &R6Seg = .ThoraxSeg.Right.R6;
  AnyRefNode &R5Seg = .ThoraxSeg.Right.R5;
  AnyRefNode &R4Seg = .ThoraxSeg.Right.R4;
  AnyRefNode &R3Seg = .ThoraxSeg.Right.R3;
  AnyRefNode &R2Seg = .ThoraxSeg.Right.R2;
  AnyRefNode &R1Seg = .ThoraxSeg.Right.R1;
  
  #define _SIDE_ Right
  AnyInt Sign = 1;
  #include "ThoraxScapulaContactRibPoints.any"
  #undef _SIDE_
};
AnyFolder Left = {
  AnyRefNode &R12Seg = .ThoraxSeg.Left.R12;
  AnyRefNode &R11Seg = .ThoraxSeg.Left.R11;
  AnyRefNode &R10Seg = .ThoraxSeg.Left.R10;
  AnyRefNode &R9Seg = .ThoraxSeg.Left.R9;
  AnyRefNode &R8Seg = .ThoraxSeg.Left.R8;
  AnyRefNode &R7Seg = .ThoraxSeg.Left.R7;
  AnyRefNode &R6Seg = .ThoraxSeg.Left.R6;
  AnyRefNode &R5Seg = .ThoraxSeg.Left.R5;
  AnyRefNode &R4Seg = .ThoraxSeg.Left.R4;
  AnyRefNode &R3Seg = .ThoraxSeg.Left.R3;
  AnyRefNode &R2Seg = .ThoraxSeg.Left.R2;
  AnyRefNode &R1Seg = .ThoraxSeg.Left.R1;

  #define _SIDE_ Left
  AnyInt Sign = -1;
  #include "ThoraxScapulaContactRibPoints.any"
  #undef _SIDE_
};