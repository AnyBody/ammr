//This will run calibration on the lumbar spine ligaments
AnyFolder ThoraxMuscleCalibration={
  AnyFolder CalibrationSettings ={
    AnyComponentDefinition obj = {};  
    
    AnyFolder &ThoraxSegs =  ...BodyModel.Trunk.Segments;
    #if BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_BUCKLE_
    AnyFolder &Buckle =  ...BodyModel.Trunk.Buckle;
    #endif
    
    #if BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_
    AnyFolder& Abdominal = ...BodyModel.Trunk.Abdominal;    
    #endif
    
    #if BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_
    AnyFolder &ThoracicCavity = ...BodyModel.Trunk.ThoracicCavity;
    #endif
    
    
    AnyFolder& Joints =  ...BodyModel.Trunk.Joints;
    AnyFolder& Muscles =  ...BodyModel.Trunk.Muscles;
    #if BM_LEG_MODEL & BM_LEG_RIGHT
    AnyFolder& RightThigh = ...BodyModel.Right.Leg.Seg.Thigh;
    AnyFolder& RightHipJoint =  ...BodyModel.Right.Leg.Jnt.Hip;
    #endif
    #if BM_LEG_MODEL & BM_LEG_LEFT
    AnyFolder& LeftThigh = ...BodyModel.Left.Leg.Seg.Thigh;
    AnyFolder& LeftHipJoint =  ...BodyModel.Left.Leg.Jnt.Hip;
    #endif
        
     AnyFixedRefFrame ground = {
       AnyRefNode node = { 
         ARel=..ThoraxSegs.PelvisSeg.Axes0;
         sRel=..ThoraxSegs.PelvisSeg.r0;
       };
     };
 
     AnyKinEq PelvisFix = {
       AnyKinLinear Lin = {
         AnyRefFrame &ground = ..ground.node;
         AnyRefFrame &Pelvis = ..ThoraxSegs.PelvisSeg;
       };
 
       AnyKinRotational Rot = {
         Type = RotAxesAngles;
         AnyRefFrame &ground = ..ground.node;
         AnyRefFrame &Pelvis = ..ThoraxSegs.PelvisSeg;
       };
     };
 
    // Posture data //
    AnyFloat ThoraxNeutral  = {  0,  0,  0} * pi/180;
    AnyFloat ThoraxFlex     = {-75,  0,  0} * pi/180;
    AnyFloat ThoraxLatRight = {  0,-30,  0} * pi/180;
    AnyFloat ThoraxExtend   = { 30,  0,  0} * pi/180;
    AnyFloat ThoraxLatLeft  = {  0, 30,  0} * pi/180;
    AnyFloat ThoraxRotLeft  = {  0,  0,-30} * pi/180;
    AnyFloat ThoraxRotRight = {  0,  0, 30} * pi/180;
    
    // AnyFloat NeckNeutral  = {  0,  0,  0} * pi/180;
    // AnyFloat NeckFlex     = {  0,  0, 45} * pi/180;
    // AnyFloat NeckLatRight = { 45,  0,  0} * pi/180;
    // AnyFloat NeckExtend   = {  0,  0,-45} * pi/180;
    // AnyFloat NeckLatLeft  = {-45,  0,  0} * pi/180;
    // AnyFloat NeckRotLeft  = {  0, 75,  0} * pi/180;
    // AnyFloat NeckRotRight = {  0,-75,  0} * pi/180;
    
    AnyFloat ThoraxPosData = repmat(1,{
      ThoraxNeutral,
      ThoraxFlex,
      ThoraxLatRight,
      ThoraxExtend,
      ThoraxLatLeft,
      ThoraxRotLeft,
      ThoraxRotRight
      }');
      
    // AnyFloat NeckPosData = repmat(1,{
    //   NeckNeutral,
    //   NeckFlex,
    //   NeckLatRight,
    //   NeckExtend,
    //   NeckLatLeft,
    //   NeckRotLeft,
    //   NeckRotRight
    //   }');
    
    AnyKinEq SkullConstraint = {
      AnyKinMeasure &ref1 = ....BodyModel.Interface.Trunk.SkullThoraxFlexion;
      AnyKinMeasure &ref2 = ....BodyModel.Interface.Trunk.SkullThoraxLateralBending;
      AnyKinMeasure &ref3 = ....BodyModel.Interface.Trunk.SkullThoraxRotation;
    };
    
    AnyKinEqInterPolDriver ThoraxDriver = {
      AnyKinMeasure& PelvisThoraxExtension = ....BodyModel.Interface.Trunk.PelvisThoraxExtension;
      AnyKinMeasure& PelvisThoraxLateralBending = ....BodyModel.Interface.Trunk.PelvisThoraxLateralBending;
      AnyKinMeasure& PelvisThoraxRotation = ....BodyModel.Interface.Trunk.PelvisThoraxRotation;    
      Type = PiecewiseLinear;
      T = linspace(0,1,SizesOf(Data)[1]);
      Data = .ThoraxPosData;
      Reaction.Type = {On,On,On};
    };
    
    #if BM_LEG_RIGHT != OFF
      AnyKinEq RightHipDriver = {
        AnyKinMeasure& HipAbduction = ....BodyModel.Interface.Right.HipAbduction;
        AnyKinMeasure& HipFlexion = ....BodyModel.Interface.Right.HipFlexion;
        AnyKinMeasure& HipExternalRotation = ....BodyModel.Interface.Right.HipExternalRotation;    
      };    
    #endif  

    #if BM_LEG_LEFT != OFF
      AnyKinEq LeftHipDriver = {
        AnyKinMeasure& HipAbduction = ....BodyModel.Interface.Left.HipAbduction;
        AnyKinMeasure& HipFlexion = ....BodyModel.Interface.Left.HipFlexion;
        AnyKinMeasure& HipExternalRotation = ....BodyModel.Interface.Left.HipExternalRotation;    
      };    
    #endif  
  };

  // The study: Operations to be performed on the model
  AnyBodyCalibrationStudy CalibrationStudy = {
    AnyFolder &ref=.CalibrationSettings; 
    nStep = SizesOf(ref.ThoraxPosData)[1];
    InitialConditions.SmallStepAssumptionOnOff = Off;
    Kinematics.SmallStepAssumptionOnOff = Off;
    Kinematics.PosAnalysisOnlyOnOff = On;
    InitialConditions.PosAnalysisOnlyOnOff = On;
    FiberAndTendonLengthAdjustment.CalibrateTendonAtMaxForceOnOff = Off;
    
    /// Array of muscles to calibrate
    /// The Pelvic floor muscles are excluded as they cross the Pelvis-Sacrum joint which has no movement.
    /// This gives them zero range of motion and thereby no fiberlength [Lf0] when calibrated.
    MuscleArr = set_difference(
      ObjSearchRecursive(&...BodyModel.Trunk.Muscles, "*", "AnyMuscle", 3), 
      ObjSearch(&...BodyModel.Trunk.Muscles, "*.PelvicFloor.*")
    );
  };
};
  
CalibrationSequence ={ 
  AnyOperation &ThoraxMusCal = .ThoraxMuscleCalibration.CalibrationStudy.FiberAndTendonLengthAdjustment;
};