AnyFunTransform3D &Scale = BaseSegPosterior.Scale;

AnyFunTransform3DLin ScaleAndProjectToLayer = {
  PreTransforms = {&.BaseSegPosterior.ScaleAbdominal, &ProjectToYZero};
  ScaleMat = eye(3);
  Offset = {0, .LayerRef.Origin.sRel[1], 0};  //< Translation to vetebra/layer level
  
  AnyFunTransform3DLin ProjectToYZero = {
    ScaleMat = {{1,0,0},{0,0,0},{0,0,1}}; //< Remove Y component
    Offset = zeros(3,1)';
  };
};
AnyFunTransform3DLin ScaleAndProjectToLayer_RefSegScale = {
  PreTransforms = {&.BaseSegPosterior.Scale, &ProjectToYZero};
  ScaleMat = eye(3);
  Offset = {0, .LayerRef.Origin.sRel[1], 0};  //< Translation to vetebra/layer level
  
  AnyFunTransform3DLin ProjectToYZero = {
    ScaleMat = {{1,0,0},{0,0,0},{0,0,1}}; //< Remove Y component
    Offset = zeros(3,1)';
  };
};

LayerRef = {
  
  AnyRefNode Origin = {
    sRel = .Scale(..Data.Origin);
  };
  AnyFunTransform3D &Scale= .Scale; 
  
  CavityPoints VolumePoints(data=..Data.AbdominalCavityPoints, scale_fun=..ScaleAndProjectToLayer_RefSegScale) = {
    Right.points_generator = {
      amount = ......Data.unscaled.ModelParameters.Abdominal.DiscretizationPosterior;
      start = ..data.Right.Posterior_Spline_Start; 
      end = ..data.Right.Posterior_Spline_End;
    };
    Left.points_generator = {
      amount = ......Data.unscaled.ModelParameters.Abdominal.DiscretizationPosterior;
      start = ..data.Left.Posterior_Spline_Start; 
      end = ..data.Left.Posterior_Spline_End;
    };
  };
};

AnySeg BaseSegAnterior={
  sCoM = {0.1, 0, 0};
  Mass = 1e-5;
  Jii = {0.0, 0.0, 0.0};
  r0 = .BaseSegPosterior.r0;
  Axes0 = .BaseSegPosterior.Axes0;
  AnyRefNode JntNode = {sRel=..LayerRef.Origin.sRel;};
  
  CavityPoints_2ScaleFun VolumePoints(data=..Data.AbdominalCavityPoints, scale_fun1=..ScaleAndProjectToLayer_RefSegScale, scale_fun2=..ScaleAndProjectToLayer) = {
    Right.points_generator = {
      amount = ......Data.unscaled.ModelParameters.Abdominal.DiscretizationAnterior;
      start = ..data.Right.Anterior_Spline_Start; 
      end = ..data.Right.Anterior_Spline_End;
    };
    Left.points_generator = {
      amount = ......Data.unscaled.ModelParameters.Abdominal.DiscretizationAnterior;
      start = ..data.Left.Anterior_Spline_Start; 
      end = ..data.Left.Anterior_Spline_End;
    };
    AnyRefNode Center = { 
      sRel = mean({
        .Right.points_generator.points[.Right.points_generator.amount - 1], 
        .Left.points_generator.points[.Right.points_generator.amount - 1]}');
    };
  };
    
  
    
   AnyRefNode mid = {
    AnyVec3 unscaled = 0.5 * (..Data.AbdominalCavityPoints.Right.Parametric.Fun(1.0) + ..Data.AbdominalCavityPoints.Left.Parametric.Fun(1.0));
    sRel = ..ScaleAndProjectToLayer(unscaled);
  };
  AnyRefNode rectus2R ={sRel= ..ScaleAndProjectToLayer(.mid.unscaled + {0,0,0.2*0.2});}; //front right
  AnyRefNode rectus2L ={sRel= ..ScaleAndProjectToLayer(.mid.unscaled + {0,0,-0.2*0.2});}; //front right
    
  AnyRefNode rectus1R ={sRel= ..ScaleAndProjectToLayer(.mid.unscaled + {0,0,0.2*0.05});}; //front right
  AnyRefNode rectus1L ={sRel= ..ScaleAndProjectToLayer(.mid.unscaled + {0,0,-0.2*0.05});}; //front right
  

  
  AnyRefNode LayerConstraintNodes = {
    sRel = ...Layer_L5.BaseSegPosterior.r0-.r0;
    AnyFolder LayerPoints = {
      PointGenerator_2ScaleFun points_right(fun=SplineFun, scale_fun1=....ScaleAndProjectToLayer_RefSegScale, scale_fun2=....ScaleAndProjectToLayer)={
        start=.....Parameters.LayerMeasureSplineStart;
            amount = .....Parameters.LayerMeasureAmount;  
        AnyFunInterpol &SplineFun = ....Data.AbdominalCavityPoints.Right.Parametric.Fun;
      };
      PointGenerator_2ScaleFun points_left(fun=SplineFun, scale_fun1=....ScaleAndProjectToLayer_RefSegScale, scale_fun2=....ScaleAndProjectToLayer)={
     start=.....Parameters.LayerMeasureSplineStart;
            amount = .....Parameters.LayerMeasureAmount;  
        AnyFunInterpol &SplineFun = ....Data.AbdominalCavityPoints.Left.Parametric.Fun;
      };
    };
    
    AnyRefNodeGroup Nodes_Below_Layer ={
      NodeAmount = .LayerPoints.points_right.amount+.LayerPoints.points_left.amount; // number nodes in group
      NodeName = strval(iarr(1, NodeAmount), "_node%04i");
      
      Node_sRels = 
      (arrcat(.LayerPoints.points_right.points, flip(.LayerPoints.points_left.points, 0)) +
      arrcat(...layer_below.BaseSegAnterior.LayerConstraintNodes.LayerPoints.points_right.points, 
      flip(...layer_below.BaseSegAnterior.LayerConstraintNodes.LayerPoints.points_left.points,0) )
      ) / 2;
      NodeDefaults.CreateMotionOutput.r = On;
    };
    
    AnyRefNodeGroup Nodes_Above_Layer ={
      NodeAmount = .LayerPoints.points_right.amount+.LayerPoints.points_left.amount; // number nodes in group
      NodeName = strval(iarr(1, NodeAmount), "_node%04i");
      Node_sRels = 
      (arrcat(.LayerPoints.points_right.points, flip(.LayerPoints.points_left.points, 0)) +
      arrcat(...layer_above.BaseSegAnterior.LayerConstraintNodes.LayerPoints.points_right.points, 
      flip(...layer_above.BaseSegAnterior.LayerConstraintNodes.LayerPoints.points_left.points,0) )
      )/2;
      NodeDefaults.CreateMotionOutput.r = On;
    };
    
  };
  
  
};

AnyObjectPtrArray FullEdge_Base = arrcat(
LayerRef.VolumePoints.Right.NodePointers,
BaseSegAnterior.VolumePoints.Right.NodePointers,
flip(BaseSegAnterior.VolumePoints.Left.NodePointers),
flip(LayerRef.VolumePoints.Left.NodePointers)
);

#ifndef PELVIC_LAYER_MOVES

AnyStdJoint PelvicLayer_BaseSegAnterior = {
  AnyRefNode &ref1 = .LayerRef.Origin;
  AnyRefFrame &ref2 = .BaseSegAnterior.JntNode;  
};

#endif



#ifdef PELVIC_LAYER_MOVES


#include "LayerConstraintsPelvic.any"

#ifndef RECTUS_MUSCLE_LINE_CONTROL 

AnyRevoluteJoint PelvicLayer_BaseSegAnterior = {
  AnyRefNode &ref1 = .LayerRef.Origin;
  AnyRefFrame &ref2 = .BaseSegAnterior.JntNode;  
  Axis=z;
};
#else

AnyKinEq PelvicLayer_BaseSegAnterior_Constraints ={
   AnyKinMeasureOrg  dof={
    AnyKinLinear lin  ={
      AnyRefNode &ref1 = ...LayerRef.Origin;
      AnyRefFrame &ref2 = ...BaseSegAnterior.JntNode;  
      Ref=0;
    };
    
    AnyKinRotational rot  ={
      AnyRefNode &ref1 = ...LayerRef.Origin;
      AnyRefFrame &ref2 = ...BaseSegAnterior.JntNode;  
      Type=RotAxesAngles;
    };
    MeasureOrganizer={1,2,4,5}; //x lin and z rot are open
  
  };
  
};

AnyKinMeasureOrg PelvicLayer_BaseSegAnterior ={
     AnyKinMeasure &lin=.PelvicLayer_BaseSegAnterior_Constraints.dof.lin; 
     AnyKinMeasure &rot=.PelvicLayer_BaseSegAnterior_Constraints.dof.rot;
     MeasureOrganizer={0,3}; //x lin and z rot are open
};



#endif

#endif

