AnyFunTransform3DLin ScaleFunction ={
  PreTransforms = {&Main.HumanModel.Scaling.GeometricalScaling.Lumbar.ScaleFunction};
  Offset ={0,0,0};
  ScaleMat = {{1,0,0},{0,1,0},{0,0,1}}; 
};
//     AnyDrawPointCloud drw_points = {
//          Points = .mesh.Points;
//          RGB = {0,0,1};
//          Points3D = On;
//          // Vectors3D = On;
//           PointStyle.Size = 0.005;
//      };


#ifndef MESH_TYPE
#define MESH_TYPE "ELLIPSOID_MIRRORED_POSTERIOR"
#endif

//#if  BM_TRUNK_EXPERIMENTAL_RECTUS_ABDOMINIS == ON
//AnyRefNode EllipsoidPoint2E  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point2);};
//AnyRefNode EllipsoidPoint1E  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point1);};
//AnyRefNode EllipsoidCenterE  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Center);};

//AnySurfCylinder mesh = {
//  sRel =  .EllipsoidCenterE.sRel+{0,0,-0.5*Length};
//  Radius    = vnorm(.EllipsoidPoint2E.sRel-.EllipsoidCenterE.sRel);
//Length= 2*  vnorm(.EllipsoidPoint1E.sRel-.EllipsoidCenterE.sRel);
//
//  //viewSurface ={
//  //  Visible =On;
//  //};
//};

//#endif



#if MESH_TYPE == "ELLIPSOID"  
AnyRefNode EllipsoidPoint2E  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point2);};
AnyRefNode EllipsoidPoint1E  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point1);};
AnyRefNode EllipsoidCenterE  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Center);};

AnySurfEllipsoid mesh = {
  sRel =  .EllipsoidCenterE.sRel;
  AnyFloat  R1 = vnorm(.EllipsoidPoint2E.sRel-.EllipsoidCenterE.sRel);
  AnyFloat R3 = vnorm(.EllipsoidPoint1E.sRel-.EllipsoidCenterE.sRel);
  Radius   ={R1,(R1+R3)/6,R3};
  viewSurface ={
    Visible =On;
  };
};

#endif

#if MESH_TYPE == "ELLIPSOID_SIDE"
AnyRefNode EllipsoidPoint2  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point2);};
AnyRefNode EllipsoidPoint1  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point1);};
AnyRefNode EllipsoidCenter  = {sRel=.ScaleFunction(....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Center);};

AnySurfEllipsoid mesh_Full = {
  sRel =  .EllipsoidCenter.sRel;
  AnyFloat  R1 = vnorm(.EllipsoidPoint2.sRel-.EllipsoidCenter.sRel);
  AnyFloat R3 = vnorm(.EllipsoidPoint1.sRel-.EllipsoidCenter.sRel);
  Radius   ={R1,(R1+R3)/6,R3};
  //  viewSurface ={
  //   Visible =On;
  //  };
};


AnyRefNode  Right ={ 
  AnyRefNode Center  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Center);};
  AnyRefNode EP1  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point1);};
  AnyRefNode EP3  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.Point3);};
  
  AnyRefNode ECenterSideEllipsoid  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.CenterSideEllipsoid);};
  AnyRefNode ECalculatedPoint0  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.CalculatedPoint0);};
  AnyRefNode ECalculatedPoint1  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Right.EllipsoidCalculation.Cal.CalculatedPoint1);};
  
  AnySurfEllipsoid mesh = {
    sRel =  .ECenterSideEllipsoid.sRel;
    ARel = RotMat(sRel,.ECalculatedPoint1.sRel,.ECalculatedPoint0.sRel);
    
    // AnyDrawRefFrame drw ={};
    AnyFloat  R1 = 0.5*vnorm(.EP1.sRel-.EP3.sRel);
    AnyFloat R3 = vnorm(.ECalculatedPoint0.sRel-.ECenterSideEllipsoid.sRel);
    
    Radius   ={R1,R3,(R1+R3)/4};
    //    viewSurface ={
    //      RGB={0,1,0};
    //      Visible =On;
    //    };
  };
  

};


AnyRefNode  Left ={ 
  AnyRefNode Center  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.Center);};
  AnyRefNode EP1  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.Point1);};
  AnyRefNode EP3  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.Point3);};
  
  AnyRefNode ECenterSideEllipsoid  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.CenterSideEllipsoid);};
  AnyRefNode ECalculatedPoint0  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.CalculatedPoint0);};
  AnyRefNode ECalculatedPoint1  = {sRel=..ScaleFunction(.....Data.unscaled.ModelParameters.Abdominal._LAYER_.AbdominalCavityPoints.Left.EllipsoidCalculation.Cal.CalculatedPoint1);};
  
  AnySurfEllipsoid mesh = {
    sRel =  .ECenterSideEllipsoid.sRel;
    ARel = RotMat(sRel,.ECalculatedPoint1.sRel,.ECalculatedPoint0.sRel);
    
    // AnyDrawRefFrame drw ={};
    AnyFloat  R1 = 0.5*vnorm(.EP1.sRel-.EP3.sRel);
    AnyFloat R3 = vnorm(.ECalculatedPoint0.sRel-.ECenterSideEllipsoid.sRel);
    
    Radius   ={R1,R3,(R1+R3)/4};
    //    viewSurface ={
    //      RGB={0,1,0};
    //      Visible =On;
    //    };
  };
};

#endif



#if MESH_TYPE == "QUAD"

AnySurfTriCylMesh mesh = {
  
  viewSurface ={
    Visible =On;
    AnyStyleDrawMaterial1 mat ={
      EnableWireframe  =On;
    };
  };
  
  AnyDrawSurfBase drw ={Opacity =0.9;}; 
  
  AnyFloat center_top ={0.03,0.015,0}+mean(arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0))');
  
  AnyFloat center_top_rep=   reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3});
  
  AnyFloat center_bottom ={0.03,-0.015,0}+mean(arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0))');
  AnyFloat center_bottom_rep=   reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3});
  
  AnyFloat TopRing = 0.5*(      reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3})+
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0)));
  
  AnyFloat BottomRing = 0.5*(     reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3})+
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0)));
  
  AnyFloat SmallTopRing = (  0.8*    reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3})+ 0.2*
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0)));
  
  AnyFloat SmallBottomRing = ( 0.8*    reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3})+0.2*
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0)));
  
  AnyInt MeshSize=....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.n_points;
  Points =.ScaleFunction (
  arrcat(
  arrcat(
  //reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3}),
  SmallTopRing,
  TopRing,
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[1],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[1],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[2],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[2],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[3],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[3],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[4],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[4],0))
  )
  ,
  arrcat(
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[5],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[5],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[6],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[6],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[7],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[7],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[8],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[8],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[9],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[9],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0)
  ),
  BottomRing,
  SmallBottomRing
  //reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3})
  ),
  ) 
  ) ; 
  CylMesh = {
    iarr(14*2*MeshSize,1,15*2*MeshSize-1),
    iarr(13*2*MeshSize,1,14*2*MeshSize-1),
    iarr(12*2*MeshSize,1,13*2*MeshSize-1),
    iarr(11*2*MeshSize,1,12*2*MeshSize-1),
    iarr(10*2*MeshSize,1,11*2*MeshSize-1),
    iarr(9*2*MeshSize,1,10*2*MeshSize-1),
    iarr(8*2*MeshSize,1,9*2*MeshSize-1),
    iarr(7*2*MeshSize,1,8*2*MeshSize-1),
    iarr(6*2*MeshSize,1,7*2*MeshSize-1),
    iarr(5*2*MeshSize,1,6*2*MeshSize-1),
    iarr(4*2*MeshSize,1,5*2*MeshSize-1),
    iarr(3*2*MeshSize,1,4*2*MeshSize-1),
    iarr(2*2*MeshSize,1,3*2*MeshSize-1),
    iarr(1*2*MeshSize,1,2*2*MeshSize-1),
    iarr(0,1,2*MeshSize-1)
  };
};

#endif


//Made for debug to create same mesh as in Quad as a Triangular mesg, created for npoints=39 which can not be altered... this option should be removed eventually 
#if MESH_TYPE== "TRI"
AnySurfTriMesh mesh = {
  
  viewSurface ={
    Visible =On;
    AnyStyleDrawMaterial1 mat ={
      EnableWireframe  =On;
    };
  };
  
  AnyDrawSurfBase drw ={Opacity =0.9;}; 
  
  AnyFloat center_top ={0.03,0.015,0}+mean(arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0))');
  AnyFloat center_top_rep=   reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3});
  
  AnyFloat center_bottom ={0.03,-0.015,0}+mean(arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0))');
  AnyFloat center_bottom_rep=   reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3});
  
  AnyFloat TopRing = (  0.25*    reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3})+ 0.75*
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0)));
  
  AnyFloat BottomRing = ( 0.25*    reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3})+0.75*
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0)));
  
  
  AnyInt MeshSize=....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.n_points;
  Points =.ScaleFunction (
  arrcat(
  arrcat(
  reshape(repmat( MeshSize*2,center_top ),{MeshSize*2,3}),
  TopRing,
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[0],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[0],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[1],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[1],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[2],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[2],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[3],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[3],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[4],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[4],0))
  )
  ,
  arrcat(
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[5],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[5],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[6],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[6],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[7],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[7],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[8],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[8],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[9],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[9],0)),
  arrcat(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Right._LAYER_.inner_points[10],
  flip(....Data.unscaled.ModelParameters.Abdominal.AllLayers.AbdominalPoints.calculations.Left._LAYER_.inner_points[10],0)
  ),
  BottomRing,
  reshape(repmat( MeshSize*2,center_bottom ),{MeshSize*2,3})
  )
  ) 
  ) ; 
  
  Triangles = {  
    //{1092, 1093, 1015}, 
    //{1093, 1094, 1016}, 
    //{1094, 1095, 1017}, 
    //{1095, 1096, 1018}, 
    //{1096, 1097, 1019}, 
    //{1097, 1098, 1020}, 
    //{1098, 1099, 1021}, 
    //{1099, 1100, 1022}, 
    //{1100, 1101, 1023}, 
    //{1101, 1102, 1024}, 
    //{1102, 1103, 1025}, 
    //{1103, 1104, 1026}, 
    //{1104, 1105, 1027}, 
    //{1105, 1106, 1028}, 
    //{1106, 1107, 1029}, 
    //{1107, 1108, 1030}, 
    //{1108, 1109, 1031}, 
    //{1109, 1110, 1032}, 
    //{1110, 1111, 1033}, 
    //{1111, 1112, 1034}, 
    //{1112, 1113, 1035}, 
    //{1113, 1114, 1036}, 
    //{1114, 1115, 1037}, 
    //{1115, 1116, 1038}, 
    //{1116, 1117, 1039}, 
    //{1117, 1118, 1040}, 
    //{1118, 1119, 1041}, 
    //{1119, 1120, 1042}, 
    //{1120, 1121, 1043}, 
    //{1121, 1122, 1044}, 
    //{1122, 1123, 1045}, 
    //{1123, 1124, 1046}, 
    //{1124, 1125, 1047}, 
    //{1125, 1126, 1048}, 
    //{1126, 1127, 1049}, 
    //{1127, 1128, 1050}, 
    //{1128, 1129, 1051}, 
    //{1129, 1130, 1052}, 
    //{1130, 1131, 1053}, 
    //{1131, 1132, 1054}, 
    //{1132, 1133, 1055}, 
    //{1133, 1134, 1056}, 
    //{1134, 1135, 1057}, 
    //{1135, 1136, 1058}, 
    //{1136, 1137, 1059}, 
    //{1137, 1138, 1060}, 
    //{1138, 1139, 1061}, 
    //{1139, 1140, 1062}, 
    //{1140, 1141, 1063}, 
    //{1141, 1142, 1064}, 
    //{1142, 1143, 1065}, 
    //{1143, 1144, 1066}, 
    //{1144, 1145, 1067}, 
    //{1145, 1146, 1068}, 
    //{1146, 1147, 1069}, 
    //{1147, 1148, 1070}, 
    //{1148, 1149, 1071}, 
    //{1149, 1150, 1072}, 
    //{1150, 1151, 1073}, 
    //{1151, 1152, 1074}, 
    //{1152, 1153, 1075}, 
    //{1153, 1154, 1076}, 
    //{1154, 1155, 1077}, 
    //{1155, 1156, 1078}, 
    //{1156, 1157, 1079}, 
    //{1157, 1158, 1080}, 
    //{1158, 1159, 1081}, 
    //{1159, 1160, 1082}, 
    //{1160, 1161, 1083}, 
    //{1161, 1162, 1084}, 
    //{1162, 1163, 1085}, 
    //{1163, 1164, 1086}, 
    //{1164, 1165, 1087}, 
    //{1165, 1166, 1088}, 
    //{1166, 1167, 1089}, 
    //{1167, 1168, 1090}, 
    //{1168, 1169, 1091}, 
    //{1169, 1092, 1014}, 
    {1014, 1015, 937}, 
    {1015, 1016, 938}, 
    {1016, 1017, 939}, 
    {1017, 1018, 940}, 
    {1018, 1019, 941}, 
    {1019, 1020, 942}, 
    {1020, 1021, 943}, 
    {1021, 1022, 944}, 
    {1022, 1023, 945}, 
    {1023, 1024, 946}, 
    {1024, 1025, 947}, 
    {1025, 1026, 948}, 
    {1026, 1027, 949}, 
    {1027, 1028, 950}, 
    {1028, 1029, 951}, 
    {1029, 1030, 952}, 
    {1030, 1031, 953}, 
    {1031, 1032, 954}, 
    {1032, 1033, 955}, 
    {1033, 1034, 956}, 
    {1034, 1035, 957}, 
    {1035, 1036, 958}, 
    {1036, 1037, 959}, 
    {1037, 1038, 960}, 
    {1038, 1039, 961}, 
    {1039, 1040, 962}, 
    {1040, 1041, 963}, 
    {1041, 1042, 964}, 
    {1042, 1043, 965}, 
    {1043, 1044, 966}, 
    {1044, 1045, 967}, 
    {1045, 1046, 968}, 
    {1046, 1047, 969}, 
    {1047, 1048, 970}, 
    {1048, 1049, 971}, 
    {1049, 1050, 972}, 
    {1050, 1051, 973}, 
    {1051, 1052, 974}, 
    {1052, 1053, 975}, 
    {1053, 1054, 976}, 
    {1054, 1055, 977}, 
    {1055, 1056, 978}, 
    {1056, 1057, 979}, 
    {1057, 1058, 980}, 
    {1058, 1059, 981}, 
    {1059, 1060, 982}, 
    {1060, 1061, 983}, 
    {1061, 1062, 984}, 
    {1062, 1063, 985}, 
    {1063, 1064, 986}, 
    {1064, 1065, 987}, 
    {1065, 1066, 988}, 
    {1066, 1067, 989}, 
    {1067, 1068, 990}, 
    {1068, 1069, 991}, 
    {1069, 1070, 992}, 
    {1070, 1071, 993}, 
    {1071, 1072, 994}, 
    {1072, 1073, 995}, 
    {1073, 1074, 996}, 
    {1074, 1075, 997}, 
    {1075, 1076, 998}, 
    {1076, 1077, 999}, 
    {1077, 1078, 1000}, 
    {1078, 1079, 1001}, 
    {1079, 1080, 1002}, 
    {1080, 1081, 1003}, 
    {1081, 1082, 1004}, 
    {1082, 1083, 1005}, 
    {1083, 1084, 1006}, 
    {1084, 1085, 1007}, 
    {1085, 1086, 1008}, 
    {1086, 1087, 1009}, 
    {1087, 1088, 1010}, 
    {1088, 1089, 1011}, 
    {1089, 1090, 1012}, 
    {1090, 1091, 1013}, 
    {1091, 1014, 936}, 
    {936, 937, 859}, 
    {937, 938, 860}, 
    {938, 939, 861}, 
    {939, 940, 862}, 
    {940, 941, 863}, 
    {941, 942, 864}, 
    {942, 943, 865}, 
    {943, 944, 866}, 
    {944, 945, 867}, 
    {945, 946, 868}, 
    {946, 947, 869}, 
    {947, 948, 870}, 
    {948, 949, 871}, 
    {949, 950, 872}, 
    {950, 951, 873}, 
    {951, 952, 874}, 
    {952, 953, 875}, 
    {953, 954, 876}, 
    {954, 955, 877}, 
    {955, 956, 878}, 
    {956, 957, 879}, 
    {957, 958, 880}, 
    {958, 959, 881}, 
    {959, 960, 882}, 
    {960, 961, 883}, 
    {961, 962, 884}, 
    {962, 963, 885}, 
    {963, 964, 886}, 
    {964, 965, 887}, 
    {965, 966, 888}, 
    {966, 967, 889}, 
    {967, 968, 890}, 
    {968, 969, 891}, 
    {969, 970, 892}, 
    {970, 971, 893}, 
    {971, 972, 894}, 
    {972, 973, 895}, 
    {973, 974, 896}, 
    {974, 975, 897}, 
    {975, 976, 898}, 
    {976, 977, 899}, 
    {977, 978, 900}, 
    {978, 979, 901}, 
    {979, 980, 902}, 
    {980, 981, 903}, 
    {981, 982, 904}, 
    {982, 983, 905}, 
    {983, 984, 906}, 
    {984, 985, 907}, 
    {985, 986, 908}, 
    {986, 987, 909}, 
    {987, 988, 910}, 
    {988, 989, 911}, 
    {989, 990, 912}, 
    {990, 991, 913}, 
    {991, 992, 914}, 
    {992, 993, 915}, 
    {993, 994, 916}, 
    {994, 995, 917}, 
    {995, 996, 918}, 
    {996, 997, 919}, 
    {997, 998, 920}, 
    {998, 999, 921}, 
    {999, 1000, 922}, 
    {1000, 1001, 923}, 
    {1001, 1002, 924}, 
    {1002, 1003, 925}, 
    {1003, 1004, 926}, 
    {1004, 1005, 927}, 
    {1005, 1006, 928}, 
    {1006, 1007, 929}, 
    {1007, 1008, 930}, 
    {1008, 1009, 931}, 
    {1009, 1010, 932}, 
    {1010, 1011, 933}, 
    {1011, 1012, 934}, 
    {1012, 1013, 935}, 
    {1013, 936, 858}, 
    {858, 859, 781}, 
    {859, 860, 782}, 
    {860, 861, 783}, 
    {861, 862, 784}, 
    {862, 863, 785}, 
    {863, 864, 786}, 
    {864, 865, 787}, 
    {865, 866, 788}, 
    {866, 867, 789}, 
    {867, 868, 790}, 
    {868, 869, 791}, 
    {869, 870, 792}, 
    {870, 871, 793}, 
    {871, 872, 794}, 
    {872, 873, 795}, 
    {873, 874, 796}, 
    {874, 875, 797}, 
    {875, 876, 798}, 
    {876, 877, 799}, 
    {877, 878, 800}, 
    {878, 879, 801}, 
    {879, 880, 802}, 
    {880, 881, 803}, 
    {881, 882, 804}, 
    {882, 883, 805}, 
    {883, 884, 806}, 
    {884, 885, 807}, 
    {885, 886, 808}, 
    {886, 887, 809}, 
    {887, 888, 810}, 
    {888, 889, 811}, 
    {889, 890, 812}, 
    {890, 891, 813}, 
    {891, 892, 814}, 
    {892, 893, 815}, 
    {893, 894, 816}, 
    {894, 895, 817}, 
    {895, 896, 818}, 
    {896, 897, 819}, 
    {897, 898, 820}, 
    {898, 899, 821}, 
    {899, 900, 822}, 
    {900, 901, 823}, 
    {901, 902, 824}, 
    {902, 903, 825}, 
    {903, 904, 826}, 
    {904, 905, 827}, 
    {905, 906, 828}, 
    {906, 907, 829}, 
    {907, 908, 830}, 
    {908, 909, 831}, 
    {909, 910, 832}, 
    {910, 911, 833}, 
    {911, 912, 834}, 
    {912, 913, 835}, 
    {913, 914, 836}, 
    {914, 915, 837}, 
    {915, 916, 838}, 
    {916, 917, 839}, 
    {917, 918, 840}, 
    {918, 919, 841}, 
    {919, 920, 842}, 
    {920, 921, 843}, 
    {921, 922, 844}, 
    {922, 923, 845}, 
    {923, 924, 846}, 
    {924, 925, 847}, 
    {925, 926, 848}, 
    {926, 927, 849}, 
    {927, 928, 850}, 
    {928, 929, 851}, 
    {929, 930, 852}, 
    {930, 931, 853}, 
    {931, 932, 854}, 
    {932, 933, 855}, 
    {933, 934, 856}, 
    {934, 935, 857}, 
    {935, 858, 780}, 
    {780, 781, 703}, 
    {781, 782, 704}, 
    {782, 783, 705}, 
    {783, 784, 706}, 
    {784, 785, 707}, 
    {785, 786, 708}, 
    {786, 787, 709}, 
    {787, 788, 710}, 
    {788, 789, 711}, 
    {789, 790, 712}, 
    {790, 791, 713}, 
    {791, 792, 714}, 
    {792, 793, 715}, 
    {793, 794, 716}, 
    {794, 795, 717}, 
    {795, 796, 718}, 
    {796, 797, 719}, 
    {797, 798, 720}, 
    {798, 799, 721}, 
    {799, 800, 722}, 
    {800, 801, 723}, 
    {801, 802, 724}, 
    {802, 803, 725}, 
    {803, 804, 726}, 
    {804, 805, 727}, 
    {805, 806, 728}, 
    {806, 807, 729}, 
    {807, 808, 730}, 
    {808, 809, 731}, 
    {809, 810, 732}, 
    {810, 811, 733}, 
    {811, 812, 734}, 
    {812, 813, 735}, 
    {813, 814, 736}, 
    {814, 815, 737}, 
    {815, 816, 738}, 
    {816, 817, 739}, 
    {817, 818, 740}, 
    {818, 819, 741}, 
    {819, 820, 742}, 
    {820, 821, 743}, 
    {821, 822, 744}, 
    {822, 823, 745}, 
    {823, 824, 746}, 
    {824, 825, 747}, 
    {825, 826, 748}, 
    {826, 827, 749}, 
    {827, 828, 750}, 
    {828, 829, 751}, 
    {829, 830, 752}, 
    {830, 831, 753}, 
    {831, 832, 754}, 
    {832, 833, 755}, 
    {833, 834, 756}, 
    {834, 835, 757}, 
    {835, 836, 758}, 
    {836, 837, 759}, 
    {837, 838, 760}, 
    {838, 839, 761}, 
    {839, 840, 762}, 
    {840, 841, 763}, 
    {841, 842, 764}, 
    {842, 843, 765}, 
    {843, 844, 766}, 
    {844, 845, 767}, 
    {845, 846, 768}, 
    {846, 847, 769}, 
    {847, 848, 770}, 
    {848, 849, 771}, 
    {849, 850, 772}, 
    {850, 851, 773}, 
    {851, 852, 774}, 
    {852, 853, 775}, 
    {853, 854, 776}, 
    {854, 855, 777}, 
    {855, 856, 778}, 
    {856, 857, 779}, 
    {857, 780, 702}, 
    {702, 703, 625}, 
    {703, 704, 626}, 
    {704, 705, 627}, 
    {705, 706, 628}, 
    {706, 707, 629}, 
    {707, 708, 630}, 
    {708, 709, 631}, 
    {709, 710, 632}, 
    {710, 711, 633}, 
    {711, 712, 634}, 
    {712, 713, 635}, 
    {713, 714, 636}, 
    {714, 715, 637}, 
    {715, 716, 638}, 
    {716, 717, 639}, 
    {717, 718, 640}, 
    {718, 719, 641}, 
    {719, 720, 642}, 
    {720, 721, 643}, 
    {721, 722, 644}, 
    {722, 723, 645}, 
    {723, 724, 646}, 
    {724, 725, 647}, 
    {725, 726, 648}, 
    {726, 727, 649}, 
    {727, 728, 650}, 
    {728, 729, 651}, 
    {729, 730, 652}, 
    {730, 731, 653}, 
    {731, 732, 654}, 
    {732, 733, 655}, 
    {733, 734, 656}, 
    {734, 735, 657}, 
    {735, 736, 658}, 
    {736, 737, 659}, 
    {737, 738, 660}, 
    {738, 739, 661}, 
    {739, 740, 662}, 
    {740, 741, 663}, 
    {741, 742, 664}, 
    {742, 743, 665}, 
    {743, 744, 666}, 
    {744, 745, 667}, 
    {745, 746, 668}, 
    {746, 747, 669}, 
    {747, 748, 670}, 
    {748, 749, 671}, 
    {749, 750, 672}, 
    {750, 751, 673}, 
    {751, 752, 674}, 
    {752, 753, 675}, 
    {753, 754, 676}, 
    {754, 755, 677}, 
    {755, 756, 678}, 
    {756, 757, 679}, 
    {757, 758, 680}, 
    {758, 759, 681}, 
    {759, 760, 682}, 
    {760, 761, 683}, 
    {761, 762, 684}, 
    {762, 763, 685}, 
    {763, 764, 686}, 
    {764, 765, 687}, 
    {765, 766, 688}, 
    {766, 767, 689}, 
    {767, 768, 690}, 
    {768, 769, 691}, 
    {769, 770, 692}, 
    {770, 771, 693}, 
    {771, 772, 694}, 
    {772, 773, 695}, 
    {773, 774, 696}, 
    {774, 775, 697}, 
    {775, 776, 698}, 
    {776, 777, 699}, 
    {777, 778, 700}, 
    {778, 779, 701}, 
    {779, 702, 624}, 
    {624, 625, 547}, 
    {625, 626, 548}, 
    {626, 627, 549}, 
    {627, 628, 550}, 
    {628, 629, 551}, 
    {629, 630, 552}, 
    {630, 631, 553}, 
    {631, 632, 554}, 
    {632, 633, 555}, 
    {633, 634, 556}, 
    {634, 635, 557}, 
    {635, 636, 558}, 
    {636, 637, 559}, 
    {637, 638, 560}, 
    {638, 639, 561}, 
    {639, 640, 562}, 
    {640, 641, 563}, 
    {641, 642, 564}, 
    {642, 643, 565}, 
    {643, 644, 566}, 
    {644, 645, 567}, 
    {645, 646, 568}, 
    {646, 647, 569}, 
    {647, 648, 570}, 
    {648, 649, 571}, 
    {649, 650, 572}, 
    {650, 651, 573}, 
    {651, 652, 574}, 
    {652, 653, 575}, 
    {653, 654, 576}, 
    {654, 655, 577}, 
    {655, 656, 578}, 
    {656, 657, 579}, 
    {657, 658, 580}, 
    {658, 659, 581}, 
    {659, 660, 582}, 
    {660, 661, 583}, 
    {661, 662, 584}, 
    {662, 663, 585}, 
    {663, 664, 586}, 
    {664, 665, 587}, 
    {665, 666, 588}, 
    {666, 667, 589}, 
    {667, 668, 590}, 
    {668, 669, 591}, 
    {669, 670, 592}, 
    {670, 671, 593}, 
    {671, 672, 594}, 
    {672, 673, 595}, 
    {673, 674, 596}, 
    {674, 675, 597}, 
    {675, 676, 598}, 
    {676, 677, 599}, 
    {677, 678, 600}, 
    {678, 679, 601}, 
    {679, 680, 602}, 
    {680, 681, 603}, 
    {681, 682, 604}, 
    {682, 683, 605}, 
    {683, 684, 606}, 
    {684, 685, 607}, 
    {685, 686, 608}, 
    {686, 687, 609}, 
    {687, 688, 610}, 
    {688, 689, 611}, 
    {689, 690, 612}, 
    {690, 691, 613}, 
    {691, 692, 614}, 
    {692, 693, 615}, 
    {693, 694, 616}, 
    {694, 695, 617}, 
    {695, 696, 618}, 
    {696, 697, 619}, 
    {697, 698, 620}, 
    {698, 699, 621}, 
    {699, 700, 622}, 
    {700, 701, 623}, 
    {701, 624, 546}, 
    {546, 547, 469}, 
    {547, 548, 470}, 
    {548, 549, 471}, 
    {549, 550, 472}, 
    {550, 551, 473}, 
    {551, 552, 474}, 
    {552, 553, 475}, 
    {553, 554, 476}, 
    {554, 555, 477}, 
    {555, 556, 478}, 
    {556, 557, 479}, 
    {557, 558, 480}, 
    {558, 559, 481}, 
    {559, 560, 482}, 
    {560, 561, 483}, 
    {561, 562, 484}, 
    {562, 563, 485}, 
    {563, 564, 486}, 
    {564, 565, 487}, 
    {565, 566, 488}, 
    {566, 567, 489}, 
    {567, 568, 490}, 
    {568, 569, 491}, 
    {569, 570, 492}, 
    {570, 571, 493}, 
    {571, 572, 494}, 
    {572, 573, 495}, 
    {573, 574, 496}, 
    {574, 575, 497}, 
    {575, 576, 498}, 
    {576, 577, 499}, 
    {577, 578, 500}, 
    {578, 579, 501}, 
    {579, 580, 502}, 
    {580, 581, 503}, 
    {581, 582, 504}, 
    {582, 583, 505}, 
    {583, 584, 506}, 
    {584, 585, 507}, 
    {585, 586, 508}, 
    {586, 587, 509}, 
    {587, 588, 510}, 
    {588, 589, 511}, 
    {589, 590, 512}, 
    {590, 591, 513}, 
    {591, 592, 514}, 
    {592, 593, 515}, 
    {593, 594, 516}, 
    {594, 595, 517}, 
    {595, 596, 518}, 
    {596, 597, 519}, 
    {597, 598, 520}, 
    {598, 599, 521}, 
    {599, 600, 522}, 
    {600, 601, 523}, 
    {601, 602, 524}, 
    {602, 603, 525}, 
    {603, 604, 526}, 
    {604, 605, 527}, 
    {605, 606, 528}, 
    {606, 607, 529}, 
    {607, 608, 530}, 
    {608, 609, 531}, 
    {609, 610, 532}, 
    {610, 611, 533}, 
    {611, 612, 534}, 
    {612, 613, 535}, 
    {613, 614, 536}, 
    {614, 615, 537}, 
    {615, 616, 538}, 
    {616, 617, 539}, 
    {617, 618, 540}, 
    {618, 619, 541}, 
    {619, 620, 542}, 
    {620, 621, 543}, 
    {621, 622, 544}, 
    {622, 623, 545}, 
    {623, 546, 468}, 
    {468, 469, 391}, 
    {469, 470, 392}, 
    {470, 471, 393}, 
    {471, 472, 394}, 
    {472, 473, 395}, 
    {473, 474, 396}, 
    {474, 475, 397}, 
    {475, 476, 398}, 
    {476, 477, 399}, 
    {477, 478, 400}, 
    {478, 479, 401}, 
    {479, 480, 402}, 
    {480, 481, 403}, 
    {481, 482, 404}, 
    {482, 483, 405}, 
    {483, 484, 406}, 
    {484, 485, 407}, 
    {485, 486, 408}, 
    {486, 487, 409}, 
    {487, 488, 410}, 
    {488, 489, 411}, 
    {489, 490, 412}, 
    {490, 491, 413}, 
    {491, 492, 414}, 
    {492, 493, 415}, 
    {493, 494, 416}, 
    {494, 495, 417}, 
    {495, 496, 418}, 
    {496, 497, 419}, 
    {497, 498, 420}, 
    {498, 499, 421}, 
    {499, 500, 422}, 
    {500, 501, 423}, 
    {501, 502, 424}, 
    {502, 503, 425}, 
    {503, 504, 426}, 
    {504, 505, 427}, 
    {505, 506, 428}, 
    {506, 507, 429}, 
    {507, 508, 430}, 
    {508, 509, 431}, 
    {509, 510, 432}, 
    {510, 511, 433}, 
    {511, 512, 434}, 
    {512, 513, 435}, 
    {513, 514, 436}, 
    {514, 515, 437}, 
    {515, 516, 438}, 
    {516, 517, 439}, 
    {517, 518, 440}, 
    {518, 519, 441}, 
    {519, 520, 442}, 
    {520, 521, 443}, 
    {521, 522, 444}, 
    {522, 523, 445}, 
    {523, 524, 446}, 
    {524, 525, 447}, 
    {525, 526, 448}, 
    {526, 527, 449}, 
    {527, 528, 450}, 
    {528, 529, 451}, 
    {529, 530, 452}, 
    {530, 531, 453}, 
    {531, 532, 454}, 
    {532, 533, 455}, 
    {533, 534, 456}, 
    {534, 535, 457}, 
    {535, 536, 458}, 
    {536, 537, 459}, 
    {537, 538, 460}, 
    {538, 539, 461}, 
    {539, 540, 462}, 
    {540, 541, 463}, 
    {541, 542, 464}, 
    {542, 543, 465}, 
    {543, 544, 466}, 
    {544, 545, 467}, 
    {545, 468, 390}, 
    {390, 391, 313}, 
    {391, 392, 314}, 
    {392, 393, 315}, 
    {393, 394, 316}, 
    {394, 395, 317}, 
    {395, 396, 318}, 
    {396, 397, 319}, 
    {397, 398, 320}, 
    {398, 399, 321}, 
    {399, 400, 322}, 
    {400, 401, 323}, 
    {401, 402, 324}, 
    {402, 403, 325}, 
    {403, 404, 326}, 
    {404, 405, 327}, 
    {405, 406, 328}, 
    {406, 407, 329}, 
    {407, 408, 330}, 
    {408, 409, 331}, 
    {409, 410, 332}, 
    {410, 411, 333}, 
    {411, 412, 334}, 
    {412, 413, 335}, 
    {413, 414, 336}, 
    {414, 415, 337}, 
    {415, 416, 338}, 
    {416, 417, 339}, 
    {417, 418, 340}, 
    {418, 419, 341}, 
    {419, 420, 342}, 
    {420, 421, 343}, 
    {421, 422, 344}, 
    {422, 423, 345}, 
    {423, 424, 346}, 
    {424, 425, 347}, 
    {425, 426, 348}, 
    {426, 427, 349}, 
    {427, 428, 350}, 
    {428, 429, 351}, 
    {429, 430, 352}, 
    {430, 431, 353}, 
    {431, 432, 354}, 
    {432, 433, 355}, 
    {433, 434, 356}, 
    {434, 435, 357}, 
    {435, 436, 358}, 
    {436, 437, 359}, 
    {437, 438, 360}, 
    {438, 439, 361}, 
    {439, 440, 362}, 
    {440, 441, 363}, 
    {441, 442, 364}, 
    {442, 443, 365}, 
    {443, 444, 366}, 
    {444, 445, 367}, 
    {445, 446, 368}, 
    {446, 447, 369}, 
    {447, 448, 370}, 
    {448, 449, 371}, 
    {449, 450, 372}, 
    {450, 451, 373}, 
    {451, 452, 374}, 
    {452, 453, 375}, 
    {453, 454, 376}, 
    {454, 455, 377}, 
    {455, 456, 378}, 
    {456, 457, 379}, 
    {457, 458, 380}, 
    {458, 459, 381}, 
    {459, 460, 382}, 
    {460, 461, 383}, 
    {461, 462, 384}, 
    {462, 463, 385}, 
    {463, 464, 386}, 
    {464, 465, 387}, 
    {465, 466, 388}, 
    {466, 467, 389}, 
    {467, 390, 312}, 
    {312, 313, 235}, 
    {313, 314, 236}, 
    {314, 315, 237}, 
    {315, 316, 238}, 
    {316, 317, 239}, 
    {317, 318, 240}, 
    {318, 319, 241}, 
    {319, 320, 242}, 
    {320, 321, 243}, 
    {321, 322, 244}, 
    {322, 323, 245}, 
    {323, 324, 246}, 
    {324, 325, 247}, 
    {325, 326, 248}, 
    {326, 327, 249}, 
    {327, 328, 250}, 
    {328, 329, 251}, 
    {329, 330, 252}, 
    {330, 331, 253}, 
    {331, 332, 254}, 
    {332, 333, 255}, 
    {333, 334, 256}, 
    {334, 335, 257}, 
    {335, 336, 258}, 
    {336, 337, 259}, 
    {337, 338, 260}, 
    {338, 339, 261}, 
    {339, 340, 262}, 
    {340, 341, 263}, 
    {341, 342, 264}, 
    {342, 343, 265}, 
    {343, 344, 266}, 
    {344, 345, 267}, 
    {345, 346, 268}, 
    {346, 347, 269}, 
    {347, 348, 270}, 
    {348, 349, 271}, 
    {349, 350, 272}, 
    {350, 351, 273}, 
    {351, 352, 274}, 
    {352, 353, 275}, 
    {353, 354, 276}, 
    {354, 355, 277}, 
    {355, 356, 278}, 
    {356, 357, 279}, 
    {357, 358, 280}, 
    {358, 359, 281}, 
    {359, 360, 282}, 
    {360, 361, 283}, 
    {361, 362, 284}, 
    {362, 363, 285}, 
    {363, 364, 286}, 
    {364, 365, 287}, 
    {365, 366, 288}, 
    {366, 367, 289}, 
    {367, 368, 290}, 
    {368, 369, 291}, 
    {369, 370, 292}, 
    {370, 371, 293}, 
    {371, 372, 294}, 
    {372, 373, 295}, 
    {373, 374, 296}, 
    {374, 375, 297}, 
    {375, 376, 298}, 
    {376, 377, 299}, 
    {377, 378, 300}, 
    {378, 379, 301}, 
    {379, 380, 302}, 
    {380, 381, 303}, 
    {381, 382, 304}, 
    {382, 383, 305}, 
    {383, 384, 306}, 
    {384, 385, 307}, 
    {385, 386, 308}, 
    {386, 387, 309}, 
    {387, 388, 310}, 
    {388, 389, 311}, 
    {389, 312, 234}, 
    {234, 235, 157}, 
    {235, 236, 158}, 
    {236, 237, 159}, 
    {237, 238, 160}, 
    {238, 239, 161}, 
    {239, 240, 162}, 
    {240, 241, 163}, 
    {241, 242, 164}, 
    {242, 243, 165}, 
    {243, 244, 166}, 
    {244, 245, 167}, 
    {245, 246, 168}, 
    {246, 247, 169}, 
    {247, 248, 170}, 
    {248, 249, 171}, 
    {249, 250, 172}, 
    {250, 251, 173}, 
    {251, 252, 174}, 
    {252, 253, 175}, 
    {253, 254, 176}, 
    {254, 255, 177}, 
    {255, 256, 178}, 
    {256, 257, 179}, 
    {257, 258, 180}, 
    {258, 259, 181}, 
    {259, 260, 182}, 
    {260, 261, 183}, 
    {261, 262, 184}, 
    {262, 263, 185}, 
    {263, 264, 186}, 
    {264, 265, 187}, 
    {265, 266, 188}, 
    {266, 267, 189}, 
    {267, 268, 190}, 
    {268, 269, 191}, 
    {269, 270, 192}, 
    {270, 271, 193}, 
    {271, 272, 194}, 
    {272, 273, 195}, 
    {273, 274, 196}, 
    {274, 275, 197}, 
    {275, 276, 198}, 
    {276, 277, 199}, 
    {277, 278, 200}, 
    {278, 279, 201}, 
    {279, 280, 202}, 
    {280, 281, 203}, 
    {281, 282, 204}, 
    {282, 283, 205}, 
    {283, 284, 206}, 
    {284, 285, 207}, 
    {285, 286, 208}, 
    {286, 287, 209}, 
    {287, 288, 210}, 
    {288, 289, 211}, 
    {289, 290, 212}, 
    {290, 291, 213}, 
    {291, 292, 214}, 
    {292, 293, 215}, 
    {293, 294, 216}, 
    {294, 295, 217}, 
    {295, 296, 218}, 
    {296, 297, 219}, 
    {297, 298, 220}, 
    {298, 299, 221}, 
    {299, 300, 222}, 
    {300, 301, 223}, 
    {301, 302, 224}, 
    {302, 303, 225}, 
    {303, 304, 226}, 
    {304, 305, 227}, 
    {305, 306, 228}, 
    {306, 307, 229}, 
    {307, 308, 230}, 
    {308, 309, 231}, 
    {309, 310, 232}, 
    {310, 311, 233}, 
    {311, 234, 156}, 
    {156, 157, 79}, 
    {157, 158, 80}, 
    {158, 159, 81}, 
    {159, 160, 82}, 
    {160, 161, 83}, 
    {161, 162, 84}, 
    {162, 163, 85}, 
    {163, 164, 86}, 
    {164, 165, 87}, 
    {165, 166, 88}, 
    {166, 167, 89}, 
    {167, 168, 90}, 
    {168, 169, 91}, 
    {169, 170, 92}, 
    {170, 171, 93}, 
    {171, 172, 94}, 
    {172, 173, 95}, 
    {173, 174, 96}, 
    {174, 175, 97}, 
    {175, 176, 98}, 
    {176, 177, 99}, 
    {177, 178, 100}, 
    {178, 179, 101}, 
    {179, 180, 102}, 
    {180, 181, 103}, 
    {181, 182, 104}, 
    {182, 183, 105}, 
    {183, 184, 106}, 
    {184, 185, 107}, 
    {185, 186, 108}, 
    {186, 187, 109}, 
    {187, 188, 110}, 
    {188, 189, 111}, 
    {189, 190, 112}, 
    {190, 191, 113}, 
    {191, 192, 114}, 
    {192, 193, 115}, 
    {193, 194, 116}, 
    {194, 195, 117}, 
    {195, 196, 118}, 
    {196, 197, 119}, 
    {197, 198, 120}, 
    {198, 199, 121}, 
    {199, 200, 122}, 
    {200, 201, 123}, 
    {201, 202, 124}, 
    {202, 203, 125}, 
    {203, 204, 126}, 
    {204, 205, 127}, 
    {205, 206, 128}, 
    {206, 207, 129}, 
    {207, 208, 130}, 
    {208, 209, 131}, 
    {209, 210, 132}, 
    {210, 211, 133}, 
    {211, 212, 134}, 
    {212, 213, 135}, 
    {213, 214, 136}, 
    {214, 215, 137}, 
    {215, 216, 138}, 
    {216, 217, 139}, 
    {217, 218, 140}, 
    {218, 219, 141}, 
    {219, 220, 142}, 
    {220, 221, 143}, 
    {221, 222, 144}, 
    {222, 223, 145}, 
    {223, 224, 146}, 
    {224, 225, 147}, 
    {225, 226, 148}, 
    {226, 227, 149}, 
    {227, 228, 150}, 
    {228, 229, 151}, 
    {229, 230, 152}, 
    {230, 231, 153}, 
    {231, 232, 154}, 
    {232, 233, 155}, 
    {233, 156, 78}, 
    {78, 79, 1}, 
    {79, 80, 2}, 
    {80, 81, 3}, 
    {81, 82, 4}, 
    {82, 83, 5}, 
    {83, 84, 6}, 
    {84, 85, 7}, 
    {85, 86, 8}, 
    {86, 87, 9}, 
    {87, 88, 10}, 
    {88, 89, 11}, 
    {89, 90, 12}, 
    {90, 91, 13}, 
    {91, 92, 14}, 
    {92, 93, 15}, 
    {93, 94, 16}, 
    {94, 95, 17}, 
    {95, 96, 18}, 
    {96, 97, 19}, 
    {97, 98, 20}, 
    {98, 99, 21}, 
    {99, 100, 22}, 
    {100, 101, 23}, 
    {101, 102, 24}, 
    {102, 103, 25}, 
    {103, 104, 26}, 
    {104, 105, 27}, 
    {105, 106, 28}, 
    {106, 107, 29}, 
    {107, 108, 30}, 
    {108, 109, 31}, 
    {109, 110, 32}, 
    {110, 111, 33}, 
    {111, 112, 34}, 
    {112, 113, 35}, 
    {113, 114, 36}, 
    {114, 115, 37}, 
    {115, 116, 38}, 
    {116, 117, 39}, 
    {117, 118, 40}, 
    {118, 119, 41}, 
    {119, 120, 42}, 
    {120, 121, 43}, 
    {121, 122, 44}, 
    {122, 123, 45}, 
    {123, 124, 46}, 
    {124, 125, 47}, 
    {125, 126, 48}, 
    {126, 127, 49}, 
    {127, 128, 50}, 
    {128, 129, 51}, 
    {129, 130, 52}, 
    {130, 131, 53}, 
    {131, 132, 54}, 
    {132, 133, 55}, 
    {133, 134, 56}, 
    {134, 135, 57}, 
    {135, 136, 58}, 
    {136, 137, 59}, 
    {137, 138, 60}, 
    {138, 139, 61}, 
    {139, 140, 62}, 
    {140, 141, 63}, 
    {141, 142, 64}, 
    {142, 143, 65}, 
    {143, 144, 66}, 
    {144, 145, 67}, 
    {145, 146, 68}, 
    {146, 147, 69}, 
    {147, 148, 70}, 
    {148, 149, 71}, 
    {149, 150, 72}, 
    {150, 151, 73}, 
    {151, 152, 74}, 
    {152, 153, 75}, 
    {153, 154, 76}, 
    {154, 155, 77}, 
    {155, 78, 0},
    
    
    
    
    
    
    {1092, 1015, 1014}, 
    {1093, 1016, 1015}, 
    {1094, 1017, 1016}, 
    {1095, 1018, 1017}, 
    {1096, 1019, 1018}, 
    {1097, 1020, 1019}, 
    {1098, 1021, 1020}, 
    {1099, 1022, 1021}, 
    {1100, 1023, 1022}, 
    {1101, 1024, 1023}, 
    {1102, 1025, 1024}, 
    {1103, 1026, 1025}, 
    {1104, 1027, 1026}, 
    {1105, 1028, 1027}, 
    {1106, 1029, 1028}, 
    {1107, 1030, 1029}, 
    {1108, 1031, 1030}, 
    {1109, 1032, 1031}, 
    {1110, 1033, 1032}, 
    {1111, 1034, 1033}, 
    {1112, 1035, 1034}, 
    {1113, 1036, 1035}, 
    {1114, 1037, 1036}, 
    {1115, 1038, 1037}, 
    {1116, 1039, 1038}, 
    {1117, 1040, 1039}, 
    {1118, 1041, 1040}, 
    {1119, 1042, 1041}, 
    {1120, 1043, 1042}, 
    {1121, 1044, 1043}, 
    {1122, 1045, 1044}, 
    {1123, 1046, 1045}, 
    {1124, 1047, 1046}, 
    {1125, 1048, 1047}, 
    {1126, 1049, 1048}, 
    {1127, 1050, 1049}, 
    {1128, 1051, 1050}, 
    {1129, 1052, 1051}, 
    {1130, 1053, 1052}, 
    {1131, 1054, 1053}, 
    {1132, 1055, 1054}, 
    {1133, 1056, 1055}, 
    {1134, 1057, 1056}, 
    {1135, 1058, 1057}, 
    {1136, 1059, 1058}, 
    {1137, 1060, 1059}, 
    {1138, 1061, 1060}, 
    {1139, 1062, 1061}, 
    {1140, 1063, 1062}, 
    {1141, 1064, 1063}, 
    {1142, 1065, 1064}, 
    {1143, 1066, 1065}, 
    {1144, 1067, 1066}, 
    {1145, 1068, 1067}, 
    {1146, 1069, 1068}, 
    {1147, 1070, 1069}, 
    {1148, 1071, 1070}, 
    {1149, 1072, 1071}, 
    {1150, 1073, 1072}, 
    {1151, 1074, 1073}, 
    {1152, 1075, 1074}, 
    {1153, 1076, 1075}, 
    {1154, 1077, 1076}, 
    {1155, 1078, 1077}, 
    {1156, 1079, 1078}, 
    {1157, 1080, 1079}, 
    {1158, 1081, 1080}, 
    {1159, 1082, 1081}, 
    {1160, 1083, 1082}, 
    {1161, 1084, 1083}, 
    {1162, 1085, 1084}, 
    {1163, 1086, 1085}, 
    {1164, 1087, 1086}, 
    {1165, 1088, 1087}, 
    {1166, 1089, 1088}, 
    {1167, 1090, 1089}, 
    {1168, 1091, 1090}, 
    {1169, 1014, 1091}, 
    {1014, 937, 936}, 
    {1015, 938, 937}, 
    {1016, 939, 938}, 
    {1017, 940, 939}, 
    {1018, 941, 940}, 
    {1019, 942, 941}, 
    {1020, 943, 942}, 
    {1021, 944, 943}, 
    {1022, 945, 944}, 
    {1023, 946, 945}, 
    {1024, 947, 946}, 
    {1025, 948, 947}, 
    {1026, 949, 948}, 
    {1027, 950, 949}, 
    {1028, 951, 950}, 
    {1029, 952, 951}, 
    {1030, 953, 952}, 
    {1031, 954, 953}, 
    {1032, 955, 954}, 
    {1033, 956, 955}, 
    {1034, 957, 956}, 
    {1035, 958, 957}, 
    {1036, 959, 958}, 
    {1037, 960, 959}, 
    {1038, 961, 960}, 
    {1039, 962, 961}, 
    {1040, 963, 962}, 
    {1041, 964, 963}, 
    {1042, 965, 964}, 
    {1043, 966, 965}, 
    {1044, 967, 966}, 
    {1045, 968, 967}, 
    {1046, 969, 968}, 
    {1047, 970, 969}, 
    {1048, 971, 970}, 
    {1049, 972, 971}, 
    {1050, 973, 972}, 
    {1051, 974, 973}, 
    {1052, 975, 974}, 
    {1053, 976, 975}, 
    {1054, 977, 976}, 
    {1055, 978, 977}, 
    {1056, 979, 978}, 
    {1057, 980, 979}, 
    {1058, 981, 980}, 
    {1059, 982, 981}, 
    {1060, 983, 982}, 
    {1061, 984, 983}, 
    {1062, 985, 984}, 
    {1063, 986, 985}, 
    {1064, 987, 986}, 
    {1065, 988, 987}, 
    {1066, 989, 988}, 
    {1067, 990, 989}, 
    {1068, 991, 990}, 
    {1069, 992, 991}, 
    {1070, 993, 992}, 
    {1071, 994, 993}, 
    {1072, 995, 994}, 
    {1073, 996, 995}, 
    {1074, 997, 996}, 
    {1075, 998, 997}, 
    {1076, 999, 998}, 
    {1077, 1000, 999}, 
    {1078, 1001, 1000}, 
    {1079, 1002, 1001}, 
    {1080, 1003, 1002}, 
    {1081, 1004, 1003}, 
    {1082, 1005, 1004}, 
    {1083, 1006, 1005}, 
    {1084, 1007, 1006}, 
    {1085, 1008, 1007}, 
    {1086, 1009, 1008}, 
    {1087, 1010, 1009}, 
    {1088, 1011, 1010}, 
    {1089, 1012, 1011}, 
    {1090, 1013, 1012}, 
    {1091, 936, 1013}, 
    {936, 859, 858}, 
    {937, 860, 859}, 
    {938, 861, 860}, 
    {939, 862, 861}, 
    {940, 863, 862}, 
    {941, 864, 863}, 
    {942, 865, 864}, 
    {943, 866, 865}, 
    {944, 867, 866}, 
    {945, 868, 867}, 
    {946, 869, 868}, 
    {947, 870, 869}, 
    {948, 871, 870}, 
    {949, 872, 871}, 
    {950, 873, 872}, 
    {951, 874, 873}, 
    {952, 875, 874}, 
    {953, 876, 875}, 
    {954, 877, 876}, 
    {955, 878, 877}, 
    {956, 879, 878}, 
    {957, 880, 879}, 
    {958, 881, 880}, 
    {959, 882, 881}, 
    {960, 883, 882}, 
    {961, 884, 883}, 
    {962, 885, 884}, 
    {963, 886, 885}, 
    {964, 887, 886}, 
    {965, 888, 887}, 
    {966, 889, 888}, 
    {967, 890, 889}, 
    {968, 891, 890}, 
    {969, 892, 891}, 
    {970, 893, 892}, 
    {971, 894, 893}, 
    {972, 895, 894}, 
    {973, 896, 895}, 
    {974, 897, 896}, 
    {975, 898, 897}, 
    {976, 899, 898}, 
    {977, 900, 899}, 
    {978, 901, 900}, 
    {979, 902, 901}, 
    {980, 903, 902}, 
    {981, 904, 903}, 
    {982, 905, 904}, 
    {983, 906, 905}, 
    {984, 907, 906}, 
    {985, 908, 907}, 
    {986, 909, 908}, 
    {987, 910, 909}, 
    {988, 911, 910}, 
    {989, 912, 911}, 
    {990, 913, 912}, 
    {991, 914, 913}, 
    {992, 915, 914}, 
    {993, 916, 915}, 
    {994, 917, 916}, 
    {995, 918, 917}, 
    {996, 919, 918}, 
    {997, 920, 919}, 
    {998, 921, 920}, 
    {999, 922, 921}, 
    {1000, 923, 922}, 
    {1001, 924, 923}, 
    {1002, 925, 924}, 
    {1003, 926, 925}, 
    {1004, 927, 926}, 
    {1005, 928, 927}, 
    {1006, 929, 928}, 
    {1007, 930, 929}, 
    {1008, 931, 930}, 
    {1009, 932, 931}, 
    {1010, 933, 932}, 
    {1011, 934, 933}, 
    {1012, 935, 934}, 
    {1013, 858, 935}, 
    {858, 781, 780}, 
    {859, 782, 781}, 
    {860, 783, 782}, 
    {861, 784, 783}, 
    {862, 785, 784}, 
    {863, 786, 785}, 
    {864, 787, 786}, 
    {865, 788, 787}, 
    {866, 789, 788}, 
    {867, 790, 789}, 
    {868, 791, 790}, 
    {869, 792, 791}, 
    {870, 793, 792}, 
    {871, 794, 793}, 
    {872, 795, 794}, 
    {873, 796, 795}, 
    {874, 797, 796}, 
    {875, 798, 797}, 
    {876, 799, 798}, 
    {877, 800, 799}, 
    {878, 801, 800}, 
    {879, 802, 801}, 
    {880, 803, 802}, 
    {881, 804, 803}, 
    {882, 805, 804}, 
    {883, 806, 805}, 
    {884, 807, 806}, 
    {885, 808, 807}, 
    {886, 809, 808}, 
    {887, 810, 809}, 
    {888, 811, 810}, 
    {889, 812, 811}, 
    {890, 813, 812}, 
    {891, 814, 813}, 
    {892, 815, 814}, 
    {893, 816, 815}, 
    {894, 817, 816}, 
    {895, 818, 817}, 
    {896, 819, 818}, 
    {897, 820, 819}, 
    {898, 821, 820}, 
    {899, 822, 821}, 
    {900, 823, 822}, 
    {901, 824, 823}, 
    {902, 825, 824}, 
    {903, 826, 825}, 
    {904, 827, 826}, 
    {905, 828, 827}, 
    {906, 829, 828}, 
    {907, 830, 829}, 
    {908, 831, 830}, 
    {909, 832, 831}, 
    {910, 833, 832}, 
    {911, 834, 833}, 
    {912, 835, 834}, 
    {913, 836, 835}, 
    {914, 837, 836}, 
    {915, 838, 837}, 
    {916, 839, 838}, 
    {917, 840, 839}, 
    {918, 841, 840}, 
    {919, 842, 841}, 
    {920, 843, 842}, 
    {921, 844, 843}, 
    {922, 845, 844}, 
    {923, 846, 845}, 
    {924, 847, 846}, 
    {925, 848, 847}, 
    {926, 849, 848}, 
    {927, 850, 849}, 
    {928, 851, 850}, 
    {929, 852, 851}, 
    {930, 853, 852}, 
    {931, 854, 853}, 
    {932, 855, 854}, 
    {933, 856, 855}, 
    {934, 857, 856}, 
    {935, 780, 857}, 
    {780, 703, 702}, 
    {781, 704, 703}, 
    {782, 705, 704}, 
    {783, 706, 705}, 
    {784, 707, 706}, 
    {785, 708, 707}, 
    {786, 709, 708}, 
    {787, 710, 709}, 
    {788, 711, 710}, 
    {789, 712, 711}, 
    {790, 713, 712}, 
    {791, 714, 713}, 
    {792, 715, 714}, 
    {793, 716, 715}, 
    {794, 717, 716}, 
    {795, 718, 717}, 
    {796, 719, 718}, 
    {797, 720, 719}, 
    {798, 721, 720}, 
    {799, 722, 721}, 
    {800, 723, 722}, 
    {801, 724, 723}, 
    {802, 725, 724}, 
    {803, 726, 725}, 
    {804, 727, 726}, 
    {805, 728, 727}, 
    {806, 729, 728}, 
    {807, 730, 729}, 
    {808, 731, 730}, 
    {809, 732, 731}, 
    {810, 733, 732}, 
    {811, 734, 733}, 
    {812, 735, 734}, 
    {813, 736, 735}, 
    {814, 737, 736}, 
    {815, 738, 737}, 
    {816, 739, 738}, 
    {817, 740, 739}, 
    {818, 741, 740}, 
    {819, 742, 741}, 
    {820, 743, 742}, 
    {821, 744, 743}, 
    {822, 745, 744}, 
    {823, 746, 745}, 
    {824, 747, 746}, 
    {825, 748, 747}, 
    {826, 749, 748}, 
    {827, 750, 749}, 
    {828, 751, 750}, 
    {829, 752, 751}, 
    {830, 753, 752}, 
    {831, 754, 753}, 
    {832, 755, 754}, 
    {833, 756, 755}, 
    {834, 757, 756}, 
    {835, 758, 757}, 
    {836, 759, 758}, 
    {837, 760, 759}, 
    {838, 761, 760}, 
    {839, 762, 761}, 
    {840, 763, 762}, 
    {841, 764, 763}, 
    {842, 765, 764}, 
    {843, 766, 765}, 
    {844, 767, 766}, 
    {845, 768, 767}, 
    {846, 769, 768}, 
    {847, 770, 769}, 
    {848, 771, 770}, 
    {849, 772, 771}, 
    {850, 773, 772}, 
    {851, 774, 773}, 
    {852, 775, 774}, 
    {853, 776, 775}, 
    {854, 777, 776}, 
    {855, 778, 777}, 
    {856, 779, 778}, 
    {857, 702, 779}, 
    {702, 625, 624}, 
    {703, 626, 625}, 
    {704, 627, 626}, 
    {705, 628, 627}, 
    {706, 629, 628}, 
    {707, 630, 629}, 
    {708, 631, 630}, 
    {709, 632, 631}, 
    {710, 633, 632}, 
    {711, 634, 633}, 
    {712, 635, 634}, 
    {713, 636, 635}, 
    {714, 637, 636}, 
    {715, 638, 637}, 
    {716, 639, 638}, 
    {717, 640, 639}, 
    {718, 641, 640}, 
    {719, 642, 641}, 
    {720, 643, 642}, 
    {721, 644, 643}, 
    {722, 645, 644}, 
    {723, 646, 645}, 
    {724, 647, 646}, 
    {725, 648, 647}, 
    {726, 649, 648}, 
    {727, 650, 649}, 
    {728, 651, 650}, 
    {729, 652, 651}, 
    {730, 653, 652}, 
    {731, 654, 653}, 
    {732, 655, 654}, 
    {733, 656, 655}, 
    {734, 657, 656}, 
    {735, 658, 657}, 
    {736, 659, 658}, 
    {737, 660, 659}, 
    {738, 661, 660}, 
    {739, 662, 661}, 
    {740, 663, 662}, 
    {741, 664, 663}, 
    {742, 665, 664}, 
    {743, 666, 665}, 
    {744, 667, 666}, 
    {745, 668, 667}, 
    {746, 669, 668}, 
    {747, 670, 669}, 
    {748, 671, 670}, 
    {749, 672, 671}, 
    {750, 673, 672}, 
    {751, 674, 673}, 
    {752, 675, 674}, 
    {753, 676, 675}, 
    {754, 677, 676}, 
    {755, 678, 677}, 
    {756, 679, 678}, 
    {757, 680, 679}, 
    {758, 681, 680}, 
    {759, 682, 681}, 
    {760, 683, 682}, 
    {761, 684, 683}, 
    {762, 685, 684}, 
    {763, 686, 685}, 
    {764, 687, 686}, 
    {765, 688, 687}, 
    {766, 689, 688}, 
    {767, 690, 689}, 
    {768, 691, 690}, 
    {769, 692, 691}, 
    {770, 693, 692}, 
    {771, 694, 693}, 
    {772, 695, 694}, 
    {773, 696, 695}, 
    {774, 697, 696}, 
    {775, 698, 697}, 
    {776, 699, 698}, 
    {777, 700, 699}, 
    {778, 701, 700}, 
    {779, 624, 701}, 
    {624, 547, 546}, 
    {625, 548, 547}, 
    {626, 549, 548}, 
    {627, 550, 549}, 
    {628, 551, 550}, 
    {629, 552, 551}, 
    {630, 553, 552}, 
    {631, 554, 553}, 
    {632, 555, 554}, 
    {633, 556, 555}, 
    {634, 557, 556}, 
    {635, 558, 557}, 
    {636, 559, 558}, 
    {637, 560, 559}, 
    {638, 561, 560}, 
    {639, 562, 561}, 
    {640, 563, 562}, 
    {641, 564, 563}, 
    {642, 565, 564}, 
    {643, 566, 565}, 
    {644, 567, 566}, 
    {645, 568, 567}, 
    {646, 569, 568}, 
    {647, 570, 569}, 
    {648, 571, 570}, 
    {649, 572, 571}, 
    {650, 573, 572}, 
    {651, 574, 573}, 
    {652, 575, 574}, 
    {653, 576, 575}, 
    {654, 577, 576}, 
    {655, 578, 577}, 
    {656, 579, 578}, 
    {657, 580, 579}, 
    {658, 581, 580}, 
    {659, 582, 581}, 
    {660, 583, 582}, 
    {661, 584, 583}, 
    {662, 585, 584}, 
    {663, 586, 585}, 
    {664, 587, 586}, 
    {665, 588, 587}, 
    {666, 589, 588}, 
    {667, 590, 589}, 
    {668, 591, 590}, 
    {669, 592, 591}, 
    {670, 593, 592}, 
    {671, 594, 593}, 
    {672, 595, 594}, 
    {673, 596, 595}, 
    {674, 597, 596}, 
    {675, 598, 597}, 
    {676, 599, 598}, 
    {677, 600, 599}, 
    {678, 601, 600}, 
    {679, 602, 601}, 
    {680, 603, 602}, 
    {681, 604, 603}, 
    {682, 605, 604}, 
    {683, 606, 605}, 
    {684, 607, 606}, 
    {685, 608, 607}, 
    {686, 609, 608}, 
    {687, 610, 609}, 
    {688, 611, 610}, 
    {689, 612, 611}, 
    {690, 613, 612}, 
    {691, 614, 613}, 
    {692, 615, 614}, 
    {693, 616, 615}, 
    {694, 617, 616}, 
    {695, 618, 617}, 
    {696, 619, 618}, 
    {697, 620, 619}, 
    {698, 621, 620}, 
    {699, 622, 621}, 
    {700, 623, 622}, 
    {701, 546, 623}, 
    {546, 469, 468}, 
    {547, 470, 469}, 
    {548, 471, 470}, 
    {549, 472, 471}, 
    {550, 473, 472}, 
    {551, 474, 473}, 
    {552, 475, 474}, 
    {553, 476, 475}, 
    {554, 477, 476}, 
    {555, 478, 477}, 
    {556, 479, 478}, 
    {557, 480, 479}, 
    {558, 481, 480}, 
    {559, 482, 481}, 
    {560, 483, 482}, 
    {561, 484, 483}, 
    {562, 485, 484}, 
    {563, 486, 485}, 
    {564, 487, 486}, 
    {565, 488, 487}, 
    {566, 489, 488}, 
    {567, 490, 489}, 
    {568, 491, 490}, 
    {569, 492, 491}, 
    {570, 493, 492}, 
    {571, 494, 493}, 
    {572, 495, 494}, 
    {573, 496, 495}, 
    {574, 497, 496}, 
    {575, 498, 497}, 
    {576, 499, 498}, 
    {577, 500, 499}, 
    {578, 501, 500}, 
    {579, 502, 501}, 
    {580, 503, 502}, 
    {581, 504, 503}, 
    {582, 505, 504}, 
    {583, 506, 505}, 
    {584, 507, 506}, 
    {585, 508, 507}, 
    {586, 509, 508}, 
    {587, 510, 509}, 
    {588, 511, 510}, 
    {589, 512, 511}, 
    {590, 513, 512}, 
    {591, 514, 513}, 
    {592, 515, 514}, 
    {593, 516, 515}, 
    {594, 517, 516}, 
    {595, 518, 517}, 
    {596, 519, 518}, 
    {597, 520, 519}, 
    {598, 521, 520}, 
    {599, 522, 521}, 
    {600, 523, 522}, 
    {601, 524, 523}, 
    {602, 525, 524}, 
    {603, 526, 525}, 
    {604, 527, 526}, 
    {605, 528, 527}, 
    {606, 529, 528}, 
    {607, 530, 529}, 
    {608, 531, 530}, 
    {609, 532, 531}, 
    {610, 533, 532}, 
    {611, 534, 533}, 
    {612, 535, 534}, 
    {613, 536, 535}, 
    {614, 537, 536}, 
    {615, 538, 537}, 
    {616, 539, 538}, 
    {617, 540, 539}, 
    {618, 541, 540}, 
    {619, 542, 541}, 
    {620, 543, 542}, 
    {621, 544, 543}, 
    {622, 545, 544}, 
    {623, 468, 545}, 
    {468, 391, 390}, 
    {469, 392, 391}, 
    {470, 393, 392}, 
    {471, 394, 393}, 
    {472, 395, 394}, 
    {473, 396, 395}, 
    {474, 397, 396}, 
    {475, 398, 397}, 
    {476, 399, 398}, 
    {477, 400, 399}, 
    {478, 401, 400}, 
    {479, 402, 401}, 
    {480, 403, 402}, 
    {481, 404, 403}, 
    {482, 405, 404}, 
    {483, 406, 405}, 
    {484, 407, 406}, 
    {485, 408, 407}, 
    {486, 409, 408}, 
    {487, 410, 409}, 
    {488, 411, 410}, 
    {489, 412, 411}, 
    {490, 413, 412}, 
    {491, 414, 413}, 
    {492, 415, 414}, 
    {493, 416, 415}, 
    {494, 417, 416}, 
    {495, 418, 417}, 
    {496, 419, 418}, 
    {497, 420, 419}, 
    {498, 421, 420}, 
    {499, 422, 421}, 
    {500, 423, 422}, 
    {501, 424, 423}, 
    {502, 425, 424}, 
    {503, 426, 425}, 
    {504, 427, 426}, 
    {505, 428, 427}, 
    {506, 429, 428}, 
    {507, 430, 429}, 
    {508, 431, 430}, 
    {509, 432, 431}, 
    {510, 433, 432}, 
    {511, 434, 433}, 
    {512, 435, 434}, 
    {513, 436, 435}, 
    {514, 437, 436}, 
    {515, 438, 437}, 
    {516, 439, 438}, 
    {517, 440, 439}, 
    {518, 441, 440}, 
    {519, 442, 441}, 
    {520, 443, 442}, 
    {521, 444, 443}, 
    {522, 445, 444}, 
    {523, 446, 445}, 
    {524, 447, 446}, 
    {525, 448, 447}, 
    {526, 449, 448}, 
    {527, 450, 449}, 
    {528, 451, 450}, 
    {529, 452, 451}, 
    {530, 453, 452}, 
    {531, 454, 453}, 
    {532, 455, 454}, 
    {533, 456, 455}, 
    {534, 457, 456}, 
    {535, 458, 457}, 
    {536, 459, 458}, 
    {537, 460, 459}, 
    {538, 461, 460}, 
    {539, 462, 461}, 
    {540, 463, 462}, 
    {541, 464, 463}, 
    {542, 465, 464}, 
    {543, 466, 465}, 
    {544, 467, 466}, 
    {545, 390, 467}, 
    {390, 313, 312}, 
    {391, 314, 313}, 
    {392, 315, 314}, 
    {393, 316, 315}, 
    {394, 317, 316}, 
    {395, 318, 317}, 
    {396, 319, 318}, 
    {397, 320, 319}, 
    {398, 321, 320}, 
    {399, 322, 321}, 
    {400, 323, 322}, 
    {401, 324, 323}, 
    {402, 325, 324}, 
    {403, 326, 325}, 
    {404, 327, 326}, 
    {405, 328, 327}, 
    {406, 329, 328}, 
    {407, 330, 329}, 
    {408, 331, 330}, 
    {409, 332, 331}, 
    {410, 333, 332}, 
    {411, 334, 333}, 
    {412, 335, 334}, 
    {413, 336, 335}, 
    {414, 337, 336}, 
    {415, 338, 337}, 
    {416, 339, 338}, 
    {417, 340, 339}, 
    {418, 341, 340}, 
    {419, 342, 341}, 
    {420, 343, 342}, 
    {421, 344, 343}, 
    {422, 345, 344}, 
    {423, 346, 345}, 
    {424, 347, 346}, 
    {425, 348, 347}, 
    {426, 349, 348}, 
    {427, 350, 349}, 
    {428, 351, 350}, 
    {429, 352, 351}, 
    {430, 353, 352}, 
    {431, 354, 353}, 
    {432, 355, 354}, 
    {433, 356, 355}, 
    {434, 357, 356}, 
    {435, 358, 357}, 
    {436, 359, 358}, 
    {437, 360, 359}, 
    {438, 361, 360}, 
    {439, 362, 361}, 
    {440, 363, 362}, 
    {441, 364, 363}, 
    {442, 365, 364}, 
    {443, 366, 365}, 
    {444, 367, 366}, 
    {445, 368, 367}, 
    {446, 369, 368}, 
    {447, 370, 369}, 
    {448, 371, 370}, 
    {449, 372, 371}, 
    {450, 373, 372}, 
    {451, 374, 373}, 
    {452, 375, 374}, 
    {453, 376, 375}, 
    {454, 377, 376}, 
    {455, 378, 377}, 
    {456, 379, 378}, 
    {457, 380, 379}, 
    {458, 381, 380}, 
    {459, 382, 381}, 
    {460, 383, 382}, 
    {461, 384, 383}, 
    {462, 385, 384}, 
    {463, 386, 385}, 
    {464, 387, 386}, 
    {465, 388, 387}, 
    {466, 389, 388}, 
    {467, 312, 389}, 
    {312, 235, 234}, 
    {313, 236, 235}, 
    {314, 237, 236}, 
    {315, 238, 237}, 
    {316, 239, 238}, 
    {317, 240, 239}, 
    {318, 241, 240}, 
    {319, 242, 241}, 
    {320, 243, 242}, 
    {321, 244, 243}, 
    {322, 245, 244}, 
    {323, 246, 245}, 
    {324, 247, 246}, 
    {325, 248, 247}, 
    {326, 249, 248}, 
    {327, 250, 249}, 
    {328, 251, 250}, 
    {329, 252, 251}, 
    {330, 253, 252}, 
    {331, 254, 253}, 
    {332, 255, 254}, 
    {333, 256, 255}, 
    {334, 257, 256}, 
    {335, 258, 257}, 
    {336, 259, 258}, 
    {337, 260, 259}, 
    {338, 261, 260}, 
    {339, 262, 261}, 
    {340, 263, 262}, 
    {341, 264, 263}, 
    {342, 265, 264}, 
    {343, 266, 265}, 
    {344, 267, 266}, 
    {345, 268, 267}, 
    {346, 269, 268}, 
    {347, 270, 269}, 
    {348, 271, 270}, 
    {349, 272, 271}, 
    {350, 273, 272}, 
    {351, 274, 273}, 
    {352, 275, 274}, 
    {353, 276, 275}, 
    {354, 277, 276}, 
    {355, 278, 277}, 
    {356, 279, 278}, 
    {357, 280, 279}, 
    {358, 281, 280}, 
    {359, 282, 281}, 
    {360, 283, 282}, 
    {361, 284, 283}, 
    {362, 285, 284}, 
    {363, 286, 285}, 
    {364, 287, 286}, 
    {365, 288, 287}, 
    {366, 289, 288}, 
    {367, 290, 289}, 
    {368, 291, 290}, 
    {369, 292, 291}, 
    {370, 293, 292}, 
    {371, 294, 293}, 
    {372, 295, 294}, 
    {373, 296, 295}, 
    {374, 297, 296}, 
    {375, 298, 297}, 
    {376, 299, 298}, 
    {377, 300, 299}, 
    {378, 301, 300}, 
    {379, 302, 301}, 
    {380, 303, 302}, 
    {381, 304, 303}, 
    {382, 305, 304}, 
    {383, 306, 305}, 
    {384, 307, 306}, 
    {385, 308, 307}, 
    {386, 309, 308}, 
    {387, 310, 309}, 
    {388, 311, 310}, 
    {389, 234, 311}, 
    {234, 157, 156}, 
    {235, 158, 157}, 
    {236, 159, 158}, 
    {237, 160, 159}, 
    {238, 161, 160}, 
    {239, 162, 161}, 
    {240, 163, 162}, 
    {241, 164, 163}, 
    {242, 165, 164}, 
    {243, 166, 165}, 
    {244, 167, 166}, 
    {245, 168, 167}, 
    {246, 169, 168}, 
    {247, 170, 169}, 
    {248, 171, 170}, 
    {249, 172, 171}, 
    {250, 173, 172}, 
    {251, 174, 173}, 
    {252, 175, 174}, 
    {253, 176, 175}, 
    {254, 177, 176}, 
    {255, 178, 177}, 
    {256, 179, 178}, 
    {257, 180, 179}, 
    {258, 181, 180}, 
    {259, 182, 181}, 
    {260, 183, 182}, 
    {261, 184, 183}, 
    {262, 185, 184}, 
    {263, 186, 185}, 
    {264, 187, 186}, 
    {265, 188, 187}, 
    {266, 189, 188}, 
    {267, 190, 189}, 
    {268, 191, 190}, 
    {269, 192, 191}, 
    {270, 193, 192}, 
    {271, 194, 193}, 
    {272, 195, 194}, 
    {273, 196, 195}, 
    {274, 197, 196}, 
    {275, 198, 197}, 
    {276, 199, 198}, 
    {277, 200, 199}, 
    {278, 201, 200}, 
    {279, 202, 201}, 
    {280, 203, 202}, 
    {281, 204, 203}, 
    {282, 205, 204}, 
    {283, 206, 205}, 
    {284, 207, 206}, 
    {285, 208, 207}, 
    {286, 209, 208}, 
    {287, 210, 209}, 
    {288, 211, 210}, 
    {289, 212, 211}, 
    {290, 213, 212}, 
    {291, 214, 213}, 
    {292, 215, 214}, 
    {293, 216, 215}, 
    {294, 217, 216}, 
    {295, 218, 217}, 
    {296, 219, 218}, 
    {297, 220, 219}, 
    {298, 221, 220}, 
    {299, 222, 221}, 
    {300, 223, 222}, 
    {301, 224, 223}, 
    {302, 225, 224}, 
    {303, 226, 225}, 
    {304, 227, 226}, 
    {305, 228, 227}, 
    {306, 229, 228}, 
    {307, 230, 229}, 
    {308, 231, 230}, 
    {309, 232, 231}, 
    {310, 233, 232}, 
    {311, 156, 233}, 
    {156, 79, 78}, 
    {157, 80, 79}, 
    {158, 81, 80}, 
    {159, 82, 81}, 
    {160, 83, 82}, 
    {161, 84, 83}, 
    {162, 85, 84}, 
    {163, 86, 85}, 
    {164, 87, 86}, 
    {165, 88, 87}, 
    {166, 89, 88}, 
    {167, 90, 89}, 
    {168, 91, 90}, 
    {169, 92, 91}, 
    {170, 93, 92}, 
    {171, 94, 93}, 
    {172, 95, 94}, 
    {173, 96, 95}, 
    {174, 97, 96}, 
    {175, 98, 97}, 
    {176, 99, 98}, 
    {177, 100, 99}, 
    {178, 101, 100}, 
    {179, 102, 101}, 
    {180, 103, 102}, 
    {181, 104, 103}, 
    {182, 105, 104}, 
    {183, 106, 105}, 
    {184, 107, 106}, 
    {185, 108, 107}, 
    {186, 109, 108}, 
    {187, 110, 109}, 
    {188, 111, 110}, 
    {189, 112, 111}, 
    {190, 113, 112}, 
    {191, 114, 113}, 
    {192, 115, 114}, 
    {193, 116, 115}, 
    {194, 117, 116}, 
    {195, 118, 117}, 
    {196, 119, 118}, 
    {197, 120, 119}, 
    {198, 121, 120}, 
    {199, 122, 121}, 
    {200, 123, 122}, 
    {201, 124, 123}, 
    {202, 125, 124}, 
    {203, 126, 125}, 
    {204, 127, 126}, 
    {205, 128, 127}, 
    {206, 129, 128}, 
    {207, 130, 129}, 
    {208, 131, 130}, 
    {209, 132, 131}, 
    {210, 133, 132}, 
    {211, 134, 133}, 
    {212, 135, 134}, 
    {213, 136, 135}, 
    {214, 137, 136}, 
    {215, 138, 137}, 
    {216, 139, 138}, 
    {217, 140, 139}, 
    {218, 141, 140}, 
    {219, 142, 141}, 
    {220, 143, 142}, 
    {221, 144, 143}, 
    {222, 145, 144}, 
    {223, 146, 145}, 
    {224, 147, 146}, 
    {225, 148, 147}, 
    {226, 149, 148}, 
    {227, 150, 149}, 
    {228, 151, 150}, 
    {229, 152, 151}, 
    {230, 153, 152}, 
    {231, 154, 153}, 
    {232, 155, 154}, 
    {233, 78, 155}, 
  }; 
};
#endif


#if MESH_TYPE == "ELLIPSOID_MIRRORED_POSTERIOR"

  AnyFloat FrontNodes_sRels = {       
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn12.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn11.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn10.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn09.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn08.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn07.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn06.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn05.sRel,

       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn12.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn11.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn10.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn09.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn08.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn07.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn06.sRel,
       Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn05.sRel,
     } ;
  AnyFloat FrontNodes_mirror_sRels = {      
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn12.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn12.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn12.sRel[2],
},
{2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn11.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn11.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn11.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn10.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn10.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn10.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn09.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn09.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn09.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn08.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn08.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn08.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn07.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn07.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn07.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn06.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn06.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn06.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn05.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn05.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Right.nn05.sRel[2],
},

  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn12.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn12.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn12.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn11.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn11.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn11.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn10.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn10.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn10.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn09.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn09.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn09.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn08.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn08.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn08.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn07.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn07.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn07.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn06.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn06.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn06.sRel[2],
},
  {2*Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel[0]-
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn05.sRel[0],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn05.sRel[1],
  Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegAnterior.VolumePoints.Left.nn05.sRel[2],
},
} ;

AnyRefNodeGroup FrontNodes = {
NodeAmount =16;
Node_sRels = .FrontNodes_sRels;
};
AnyRefNodeGroup FrontNodes_mirror = {
NodeAmount =16;
Node_sRels = .FrontNodes_mirror_sRels;
};



AnySurfEllipsoidFit mesh3 = 
{
  viewRefFrame.Visible = Off;
  viewNodes.Visible = Off;
  viewSurface.Visible = Off;
  FixedAxes = On;
  //AxisSymmetry = Off;
  //Spherical = Off;
  Axis = y;

//  AnyFloat Center  = mean(AllPoints');
AnyFloat ExtraPoints =reshape(arrcat(
0.5*(Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel+
Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Left.nn01.sRel)+
{0,0.03,0},
0.5*(Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Right.nn01.sRel+
Main.HumanModel.BodyModel.Trunk.Abdominal._LAYER_.BaseSegPosterior.VolumePoints.Left.nn01.sRel)+
{0,-0.03,0}),{2,3});
//  Points=arrcat(.anterior_l_mirror.Node_sRels,
//  .anterior_r_mirror.Node_sRels,
//  .anterior_l.Node_sRels,
//  .anterior_r.Node_sRels,
//  ExtraPoints);
       Points = arrcat( .FrontNodes_mirror.Node_sRels, .FrontNodes.Node_sRels, ExtraPoints );

};

//  AnyDrawPointCloud drw = {Points=.mesh3.Points; PointStyle.Size=0.01; Points3D = On;};

#endif

