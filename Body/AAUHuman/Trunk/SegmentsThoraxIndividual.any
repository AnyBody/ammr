/*
Definitions of Segments in the Thorax Part of the Spine.

Abbrevitations:
ALL = Anterior Longitudinal Ligament
PLL = Posterior Longitudinal Ligament
LS = Ligamentum Supraspinale
LI = Ligamentum Interspinalia

MF = Multifidi
ILpl = Iliocostalis Lumborum pars lumborum (part of Erector Spinae)
LTpl = Longissimus Thoracis pars lumborum (part of Erector Spinae)
ILpt = Iliocostalis Lumborum pars thoracis (part of Erector Spinae)
LTpt = Longissimus Thoracis pars thoracis (part of Erector Spinae)
PM = Psoas Major
QL = Quadratus Lumborum
RA = Rectus Abdominis
OE = Obliquus Externus
OI = Obliquus Internus

C = Costae
CI = Crista Iliaca
CP = Crista Pubica
SIPS = Spina iliaca posterior superior
SIPI = Spina iliaca Posterior inferior
T = Thoracal hvirvel
L = Lumbal hvirvel
S = Sacral segment
*/


AnySeg T12Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=..Segments.L1Seg.T12L1JntNode.sRel*..Segments.L1Seg.Axes0'+..Segments.L1Seg.r0-T12L1JntNode.sRel*Axes0'; 

  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T12Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T11T12JntNode.sRel[0]+.T12L1JntNode.sRel[0])/2,(.T11T12JntNode.sRel[1]+.T12L1JntNode.sRel[1])/2, 0.0} + .Scale({0.041,0,0});
    };
  #endif

  AnyRefNode COMT12 = {
    sRel = .sCoM;
  };
    
  AnyRefNode T12L1JntNode = {
    sRel = .Scale(.Data.T12.T12L1JntNode_pos);  
  };  
  
  AnyRefNode T11T12JntNode = {
    sRel = .Scale(.Data.T12.T11T12JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T12.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T12.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T12.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T12.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName = ...Data.unscaled.STL.FilenameT12Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T12Seg

AnySeg T11Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  // initial position found as a function of pelvis pos and orientation
  r0=.T12Seg.T11T12JntNode.sRel*.T12Seg.Axes0'+.T12Seg.r0-T11T12JntNode.sRel*Axes0'; 
    
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T11Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T11T12JntNode.sRel[0]+.T10T11JntNode.sRel[0])/2,(.T11T12JntNode.sRel[1]+.T10T11JntNode.sRel[1])/2, 0} + .Scale({0.044, 0, 0});
    };
  #endif

  AnyRefNode T11T12JntNode = {
    sRel = .Scale(.Data.T11.T11T12JntNode_pos);
  };
  
  AnyRefNode T10T11JntNode = {
    sRel = .Scale(.Data.T11.T10T11JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T11.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T11.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T11.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T11.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT11Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T11;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T11Seg

AnySeg T10Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  // initial position found as a function of pelvis pos and orientation
  r0=.T11Seg.T10T11JntNode.sRel*.T11Seg.Axes0'+.T11Seg.r0-T10T11JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)    
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T10Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T9T10JntNode.sRel[0]+.T10T11JntNode.sRel[0])/2,(.T9T10JntNode.sRel[1]+.T10T11JntNode.sRel[1])/2, 0} + .Scale({0.046, 0, 0});
    };
  #endif

  AnyRefNode T10T11JntNode = {
    sRel = .Scale(.Data.T10.T10T11JntNode_pos);
  };

  AnyRefNode T9T10JntNode = {
    sRel = .Scale(.Data.T10.T9T10JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
    
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T10.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T10.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T10.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T10.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT10Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T10;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T10Seg
  
AnySeg T9Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=.T10Seg.T9T10JntNode.sRel*.T10Seg.Axes0'+.T10Seg.r0-T9T10JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T9Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T8T9JntNode.sRel[0]+.T9T10JntNode.sRel[0])/2,(.T8T9JntNode.sRel[1]+.T9T10JntNode.sRel[1])/2, 0} + .Scale({0.046, 0, 0});
    };
  #endif 
  
  AnyRefNode T9T10JntNode = {
    sRel = .Scale(.Data.T9.T9T10JntNode_pos);
  };
  
  AnyRefNode T8T9JntNode = {
    sRel = .Scale(.Data.T9.T8T9JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };

  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T9.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T9.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T9.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T9.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT9Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T9;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T9Seg

AnySeg T8Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;
  
  //initial position found as a function of pelvis pos and orientation
  r0=.T9Seg.T8T9JntNode.sRel*.T9Seg.Axes0'+.T9Seg.r0-T8T9JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T8Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T7T8JntNode.sRel[0]+.T8T9JntNode.sRel[0])/2,(.T7T8JntNode.sRel[1]+.T8T9JntNode.sRel[1])/2, 0} + .Scale({0.046, 0, 0});
    };
  #endif
  
  AnyRefNode T8T9JntNode = {
    sRel = .Scale(.Data.T8.T8T9JntNode_pos);
  };
  
  AnyRefNode T7T8JntNode = {
    sRel = .Scale(.Data.T8.T7T8JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T8.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T8.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T8.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T8.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};

  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT8Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T8;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T8Seg

AnySeg T7Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;
  
  //initial position found as a function of pelvis pos and orientation
  r0=.T8Seg.T7T8JntNode.sRel*.T8Seg.Axes0'+.T8Seg.r0-T7T8JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)  
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T7Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T6T7JntNode.sRel[0]+.T7T8JntNode.sRel[0])/2,(.T6T7JntNode.sRel[1]+.T7T8JntNode.sRel[1])/2, 0} + .Scale({0.043, 0, 0});
    };
  #endif

  AnyRefNode T7T8JntNode = {
    sRel = .Scale(.Data.T7.T7T8JntNode_pos);
  };
  
  AnyRefNode T6T7JntNode = {
    sRel = .Scale(.Data.T7.T6T7JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T7.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T7.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T7.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T7.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT7Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T7;
    AnyFunTransform3D &Fun = .Scale;
  };
  
}; // End of T7Seg

AnySeg T6Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=.T7Seg.T6T7JntNode.sRel*.T7Seg.Axes0'+.T7Seg.r0-T6T7JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T6Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T5T6JntNode.sRel[0]+.T6T7JntNode.sRel[0])/2,(.T5T6JntNode.sRel[1]+.T6T7JntNode.sRel[1])/2, 0} + .Scale({0.039, 0, 0});
    };
  #endif
  
  AnyRefNode T6T7JntNode = {
    sRel = .Scale(.Data.T6.T6T7JntNode_pos);
  };
  
  AnyRefNode T5T6JntNode = {
    sRel = .Scale(.Data.T6.T5T6JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T6.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T6.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T6.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T6.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT6Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T6;
    AnyFunTransform3D &Fun = .Scale;
  };
  
  AnyRefNode SternumNode = {sRel = .Scale(.Data.T6.SternumNode_pos);};
  SternumNode = {AnyDrawNode StNodeDrw = {ScaleXYZ = 0.002*{1,1,1};RGB={0.5,0,0.5};Opacity = 0;};};     
}; // End of T6Seg

AnySeg T5Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=.T6Seg.T5T6JntNode.sRel*.T6Seg.Axes0'+.T6Seg.r0-T5T6JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T5Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T4T5JntNode.sRel[0]+.T5T6JntNode.sRel[0])/2,(.T4T5JntNode.sRel[1]+.T5T6JntNode.sRel[1])/2, 0} + .Scale({0.034, 0, 0});
    };
  #endif

  AnyRefNode T5T6JntNode = {
    sRel = .Scale(.Data.T5.T5T6JntNode_pos);
  };
  
  AnyRefNode T4T5JntNode = {
    sRel = .Scale(.Data.T5.T4T5JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T5.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T5.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T5.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T5.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT5Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T5;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T5Seg

AnySeg T4Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=.T5Seg.T4T5JntNode.sRel*.T5Seg.Axes0'+.T5Seg.r0-T4T5JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)  
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T4Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T3T4JntNode.sRel[0]+.T4T5JntNode.sRel[0])/2,(.T3T4JntNode.sRel[1]+.T4T5JntNode.sRel[1])/2, 0} + .Scale({0.028, 0, 0});
    };
  #endif

  AnyRefNode T4T5JntNode = {
    sRel = .Scale(.Data.T4.T4T5JntNode_pos);
  };
  
  AnyRefNode T3T4JntNode = {
    sRel = .Scale(.Data.T4.T3T4JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T4.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T4.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T4.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T4.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT4Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T4;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T4Seg

AnySeg T3Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;

  //initial position found as a function of pelvis pos and orientation
  r0=.T4Seg.T3T4JntNode.sRel*.T4Seg.Axes0'+.T4Seg.r0-T3T4JntNode.sRel*Axes0';   
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T3Mass; 
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T2T3JntNode.sRel[0]+.T3T4JntNode.sRel[0])/2,(.T2T3JntNode.sRel[1]+.T3T4JntNode.sRel[1])/2, 0} + .Scale({0.02, 0, 0});
    };
  #endif

  AnyRefNode T3T4JntNode = {
    sRel = .Scale(.Data.T3.T3T4JntNode_pos);
  };

  AnyRefNode T2T3JntNode = {
    sRel = .Scale(.Data.T3.T2T3JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };

  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T3.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T3.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T3.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T3.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT3Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T3;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T3Seg

AnySeg T2Seg = {

  AnyFolder &Data = ..Data.unscaled.ModelParameters;
  
  //initial position found as a function of pelvis pos and orientation
  r0=.T3Seg.T2T3JntNode.sRel*.T3Seg.Axes0'+.T3Seg.r0-T2T3JntNode.sRel*Axes0'; 
  
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T2Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T1T2JntNode.sRel[0]+.T2T3JntNode.sRel[0])/2,(.T1T2JntNode.sRel[1]+.T2T3JntNode.sRel[1])/2, 0} + .Scale({0.013, 0, 0});
    };  
  #endif

  AnyRefNode T2T3JntNode = {
    sRel = .Scale(.Data.T2.T2T3JntNode_pos);
  };
  
  AnyRefNode T1T2JntNode = {
    sRel = .Scale(.Data.T2.T1T2JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
        ..SuperiorEndplateAnteriorNode.sRel,
        0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel)
      )*RotMat(pi/2,x);    
    };
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T2.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T2.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T2.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T2.Left.SuperiorEndplateNode_pos);};
  
  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};

  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT2Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T2;
    AnyFunTransform3D &Fun = .Scale;
  };
}; // End of T2Seg

AnySeg T1Seg = {
  
  AnyFolder &Data = ..Data.unscaled.ModelParameters;
  
  //initial position found as a function of pelvis pos and orientation
  r0=.T2Seg.T1T2JntNode.sRel*.T2Seg.Axes0'+.T2Seg.r0-T1T2JntNode.sRel*Axes0'; 
  
  //AnyFunTransform3D &Scale =..Scaling.GeometricalScaling.T1Seg.ScaleFunction;
  // This file includes the trunk specifc scaling function
  // and anatomical reference system
  #include "TrunkAnatomicalFrame.any"

  TrunkScaleWithInterfaceMorphing Scale(
    GeomScale = ...Scaling.GeometricalScaling.Thorax.ScaleFunction,
    PelvisSeg = ...Segments.PelvisSeg,
  ) = {};
  
  AnyRefNode MoCapMarkerFrameAMMR24 = {}; ///< For backwards compatability with AMMR 2.4 MoCap Marker protocols
  
  // Inertia properties for the segment
  UseInertiaObjects = On;
  #if (BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_ | BM_TRUNK_THORACIC_MODEL == _THORACIC_MODEL_FLEXIBLE_KINEMATIC_ONLY_) & (BM_TRUNK_CAVITY_MODEL == _CAVITY_MODEL_VOLUME_)
    AnyInertiaSolid BoneInertiaObject = {
      BodyMassCorrection massCorrection() = {
        DensityTheoretical = ....Data.unscaled.ModelParameters.BoneDensity;
        enableMassCorrection = Off;
      };
      AnySurfSTL surface = {
        FileName = ..BoneDraw.FileName;
        AnyFunTransform3D &scale = ..Scale;
        viewSurface.RGB = {0,0,1};
        ScaleXYZ = ..BoneDraw.ScaleXYZ;
      };
    };
  #else
    AnyInertiaMatrix InertiaObject = {
      BodyMassCorrectionCompatibility massCorrection() = {
        DensityTheoretical = ....Data.unscaled.StandardParameters.Thorax.T1Mass;
      };
      Jii = {0.001, 0.001, 0.001};
      JaboutCoMOnOff = On;
      sCoM = {(.T1C7JntNode.sRel[0]+.T1T2JntNode.sRel[0])/2,(.T1C7JntNode.sRel[1]+.T1T2JntNode.sRel[1])/2, 0} + .Scale({0.008, 0, 0});
    };
  #endif

  AnyRefNode T1T2JntNode = {
    sRel = .Scale(.Data.T1.T1T2JntNode_pos);
  };
  
  AnyRefNode T1C7JntNode = {
    sRel = .Scale(.Data.T1.T1C7JntNode_pos);
    // Rotated node with x axis parallel to the superior endplate surface
    AnyRefNode RotNode = {
      ARel = RotMat(0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel),
                  ..SuperiorEndplateAnteriorNode.sRel,
                  0.5*(..SuperiorEndplateAnteriorNode.sRel + ..SuperiorEndplatePosteriorNode.sRel) + (..SuperiorEndplateNodeL.sRel - ..SuperiorEndplateNodeR.sRel))*RotMat(pi/2,x);
    };  
  };
  
  // Nodes at the anterior and posterior points on the superior endplate
  AnyRefNode SuperiorEndplateAnteriorNode = {sRel = .Scale(.Data.T1.SuperiorEndplateAnteriorNode_pos);};
  AnyRefNode SuperiorEndplatePosteriorNode = {sRel = .Scale(.Data.T1.SuperiorEndplatePosteriorNode_pos);};
  
  // Nodes at the right and left points on the superior endplate
  AnyRefNode SuperiorEndplateNodeR = {sRel = .Scale(.Data.T1.Right.SuperiorEndplateNode_pos);};
  AnyRefNode SuperiorEndplateNodeL = {sRel = .Scale(.Data.T1.Left.SuperiorEndplateNode_pos);};


  //These nodes are used for adding extra used by other body parts to the right 
  //and left side of the segment
  AnyRefNode Right= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = 1;};    
  AnyRefNode Left= {AnyMat33 Mirror ={{1,0,0},{0,1,0},{0,0,-1}};AnyFunTransform3D &Scale = .Scale;AnyVar Sign = -1;};
  
  AnyDrawSurf BoneDraw = {
    FileName =...Data.unscaled.STL.FilenameT1Seg;
    RGB = Main.DrawSettings.Colors.Segments;
    //Opacity = Main.DrawSettings.BonesOpacity.T1;
    AnyFunTransform3D &Fun = .Scale;
  };    
}; // End of T1Seg