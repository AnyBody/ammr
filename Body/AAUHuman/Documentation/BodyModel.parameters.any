
//
// !!! THIS FILE IS A TEMPLATE, SHOWING HOW YOUR MODEL COULD BE CUSTOMIZED BY CHANGING BODY MODEL PARAMETERS.
// !!! IT IS RECOMMENDED TO COPY THIS FILE INTO YOUR APPLICATION FOLDER OR COPY NECESSARY
// !!! LINES INTO THE MAIN FILE OF YOUR APPLICATION BEFORE INCLUDING "HumanModel.any" !!!  
// !!! PLEASE NOTE THAT SOME OBVIOUS OPTIONS (ON, OFF, etc) ARE NOT SHOWN HERE !!! 
//




// Definition of an anthropometric scaling law
// #define  BM_SCALING _SCALING_STANDARD_
// Possible values: _SCALING_NONE_, _SCALING_STANDARD_, _SCALING_UNIFORM_, _SCALING_LENGTHMASS_, _SCALING_LENGTHMASSFAT_, _SCALING_UNIFORM_EXTMEASUREMENTS_, _SCALING_LENGTHMASS_EXTMEASUREMENTS_, _SCALING_LENGTHMASSFAT_EXTMEASUREMENTS_, _SCALING_XYZ_, _SCALING_USERDEFINED_, 


// Custom file with all anthropometric measurements used by the scaling law. This is some times called the AnyMan file.
// #path  BM_SCALING_ANTHRO_FILE 


// Path with the ScalingLaw used. Can be set to override the BM_SCALING parameter and select a user defined scaling law.
// #path  BM_SCALING_FILE 


// Specifies if the standard parameters and anthropometrics parameters are given as external measurements. This defaults to OFF, which means that all segment length are joint-joint distances. This is set automatically based on the ``BM_SCALING`` parameter, but can be overridden if you implement your own scaling law and need to use external mesaurements.
// #define  BM_SCALING_STANDARDPARAM_EXTERIOR OFF
// Possible values: ON, OFF


// Switch for automatic display of all configuration values
// #define  BM_CONFIG_MESSAGES OFF
// Possible values: ON, OFF


// Switch for enabling configuration value information in the model tree
// #define  BM_CONFIG_VALUES OFF
// Possible values: ON, OFF


// A file with draw settings
// #path  BM_DRAWSETTINGS_FILE 


// A flag to switch on/off inclusion of the draw settings (may be needed in case of two human models)
// #define  BM_DRAWSETTINGS_SKIP OFF
// Possible values: ON, OFF


// Parameter defining the foot model used.
// #define  BM_FOOT_MODEL _FOOT_MODEL_DEFAULT_
// Possible values: _FOOT_MODEL_DEFAULT_, _FOOT_MODEL_NONE_, 


// Parameter defining the Leg model used.
// #define  BM_LEG_MODEL _LEG_MODEL_TLEM2_
// Possible values: OFF, _LEG_MODEL_TLEM_, _LEG_MODEL_TLEM2_, _LEG_MODEL_LEG_, 


// Parameter defining the contact type between Thorax and Scapula
// #define  BM_ARM_THORAX_SCAPULA_CONTACT _ELLIPSOID_CONTACT_
// Possible values: _ELLIPSOID_CONTACT_, _MULTIPLE_POINT_CONTACT_, 


// Parameter for switching the left leg On/Off. To control which leg model is used, please use the :any:`BM_LEG_MODEL` parameter.
// #define  BM_LEG_LEFT ON
// Possible values: OFF, ON, 


// Parameter for switching the right leg On/Off. To control which leg model is used, please use the :any:`BM_LEG_MODEL` parameter.
// #define  BM_LEG_RIGHT ON
// Possible values: OFF, ON, 


// Index parameter to specify muscle strength for lower extremities
// #define  BM_LEG_STRENGTH_INDEX 1.0


// Parameter to define muscle behavior of both right and left leg
// #define  BM_LEG_MUSCLES_BOTH _MUSCLES_SIMPLE_
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, 


// Parameter to define muscle behavior of the left leg
// #define  BM_LEG_MUSCLES_LEFT BM_LEG_MUSCLES_BOTH
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, BM_LEG_MUSCLES_BOTH, 


// Parameter to define muscle behavior of the right leg
// #define  BM_LEG_MUSCLES_RIGHT BM_LEG_MUSCLES_BOTH
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, BM_LEG_MUSCLES_BOTH, 


// Path to specify the underlying dataset. This currently only affects the TLEM based models. Valid options depends on which model (TLEM1/2) is used, and what dataset are available. If not specified, this will be configure automatically.
// #path  BM_LEG_DATASET 


// Parameter for the morphology method used by the Leg model. This currently only affects the TLEM based models.Valid options depends on which model (TLEM1/2) is used, and what dataset are available. If not specified, this will be configure automatically.
// #define  BM_LEG_MORPHOLOGY 


// Parameter to define a trunk model dataset.
// #define  BM_TRUNK_DATASET "TrunkData1.1"


// Index parameter to specify strength for trunk muscles.
// #define  BM_TRUNK_STRENGTH_INDEX 1.0


// Definition of the type of all spine muscles.
// #define  BM_TRUNK_MUSCLES _MUSCLES_SIMPLE_
// Possible values: OFF, _MUSCLES_SIMPLE_, 


// Definition of the lumbar spine muscles type.
// #define  BM_TRUNK_LUMBAR_MUSCLES BM_TRUNK_MUSCLES
// Possible values: OFF, _MUSCLES_SIMPLE_, BM_TRUNK_MUSCLES, 


// Definition of the cervical spine muscles type.
// #define  BM_TRUNK_CERVICAL_MUSCLES OFF
// Possible values: OFF, _MUSCLES_SIMPLE_, BM_TRUNK_MUSCLES, 


// Definition of the disc model of all spine parts.
// #define  BM_TRUNK_DISC_STIFNESS _DISC_STIFFNESS_NONE_
// Possible values: _DISC_STIFFNESS_NONE_, _DISC_STIFFNESS_LINEAR_, _DISC_STIFFNESS_NONLINEAR_, 


// Definition of the lumbar spine disc model.
// #define  BM_TRUNK_LUMBAR_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
// Possible values: _DISC_STIFFNESS_NONE_, _DISC_STIFFNESS_LINEAR_, _DISC_STIFFNESS_NONLINEAR_, BM_TRUNK_DISC_STIFNESS, 


// Definition of the cervical spine disc model.
// #define  BM_TRUNK_CERVICAL_DISC_STIFNESS BM_TRUNK_DISC_STIFNESS
// Possible values: _DISC_STIFFNESS_NONE_, _DISC_STIFFNESS_LINEAR_, _DISC_STIFFNESS_NONLINEAR_, BM_TRUNK_DISC_STIFNESS, 


// A switch to use a kinematic rhythm for the whole spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
// #define  BM_TRUNK_RHYTHM ON
// Possible values: OFF, ON, _RHYTHM_SOFT_, 


// A switch to use a kinematic rhythm for the lumbar spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
// #define  BM_TRUNK_LUMBAR_RHYTHM BM_TRUNK_RHYTHM
// Possible values: OFF, ON, _RHYTHM_SOFT_, 


// A switch to use a kinematic rhythm for the cervical spine. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
// #define  BM_TRUNK_CERVICAL_RHYTHM BM_TRUNK_RHYTHM
// Possible values: OFF, ON, _RHYTHM_SOFT_, 


// A switch to control all the ligaments in the spine.
// #define  BM_TRUNK_LIGAMENTS OFF
// Possible values: ON, OFF


// A switch to control the lumbar spine ligaments.
// #define  BM_TRUNK_LUMBAR_LIGAMENTS BM_TRUNK_LIGAMENTS


// Index parameter to specify muscle strength for upper extremities.
// #define  BM_ARM_STRENGTH_INDEX 1.0


// Switch for the left arm model being present or not.
// #define  BM_ARM_LEFT ON
// Possible values: ON, OFF


// Switch for the right arm model being present or not.
// #define  BM_ARM_RIGHT ON
// Possible values: ON, OFF


// Switch for the shoulder rhythm constraints. ON indicate that the rhythm is a hard contraint while _RHYTHM_SOFT_ will make the rhythm as soft kinematic contraint.
// #define  BM_ARM_SHOULDER_RHYTHM OFF
// Possible values: OFF, ON, _RHYTHM_SOFT_, 


// Switch for the clavicula rotation rhythm. If enabled axial rotation of the clavicula will be distributed evenly between the sterno-clavicula and acromio-clavicula joint. Effectively removing clavicula axial rotation as an independent degree of freedom.resterno-clavicula axial rotation.
// #define  BM_ARM_CLAVICULA_ROTATION_RHYTHM ON
// Possible values: OFF, ON, _RHYTHM_SOFT_, 


// Switch for enabling the detailed hand.
// #define  BM_ARM_DETAILED_HAND OFF
// Possible values: ON, OFF


// Switch for deltoid wrapping. Setting this to OFF or _DELTOID_WRAPPING_RAKE_ will revert to the older rake based implementation of the deltoid.
// #define  BM_ARM_DELTOID_WRAPPING _DELTOID_WRAPPING_ELIPSOIDS_
// Possible values: _DELTOID_WRAPPING_RAKE_, _DELTOID_WRAPPING_ELIPSOIDS_, _DELTOID_WRAPPING_CYLINDERS_, 


// Keyword for the muscle model type for both left and right arms.
// #define  BM_ARM_MUSCLES_BOTH _MUSCLES_SIMPLE_
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, 


// Keyword for the muscle model type for the left arm.
// #define  BM_ARM_MUSCLES_LEFT BM_ARM_MUSCLES_BOTH
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, BM_ARM_MUSCLES_BOTH, 


// Keyword for the muscle model for both the right arm.
// #define  BM_ARM_MUSCLES_RIGHT BM_ARM_MUSCLES_BOTH
// Possible values: OFF, _MUSCLES_SIMPLE_, _MUSCLES_3E_HILL_, BM_ARM_MUSCLES_BOTH, 


// Keyword for pelvis display setting.
// #define  BM_PELVIS_DISPLAY _PELVIS_DISPLAY_LEGPELVIS_ONLY_
// Possible values: _PELVIS_DISPLAY_NONE_, _PELVIS_DISPLAY_LEGPELVIS_ONLY_, _PELVIS_DISPLAY_LEGANDTRUNKPELVIS_, 


// File name of the mannequin definition file. By default this is no longer used, since the values in ``HumanModel.Mannequin`` can be assigned directly in your applicaiton ( E.g. ``Main.HumanModel.Mannequin.Posture.NeckExtension = 30;``). However, the parameter can still be used to set your own mannequin file. Just define your own mannequin file in your applicaiton like this: ``#path BM_MANNEQUIN_FILE "<ANYBODY_PATH_BODY>\BodyModels\GenericBodyModel\BodyModel.mannequin.any";``
// #path  BM_MANNEQUIN_FILE 


// Setting of the default value for all mannequin drivers.
// #define  BM_MANNEQUIN_DRIVER_DEFAULT ON
// Possible values: ON, OFF


// By default constraint type of mannequin drivers will be soft.
// #define  BM_MANNEQUIN_DRIVER_WEAK_SWITCH ON
// Possible values: ON, OFF


// Keyword for the interface morhping between the trunk and the leg pelvis segments.
// #define  BM_LEG_TRUNK_INTERFACE _MORPH_TRUNK_TO_LEG_
// Possible values: _MORPH_TRUNK_TO_LEG_, _MORPH_LEG_TO_TRUNK_, _MORPH_NONE_, 


// Parameter to choose type of muscle tendon calibration
// #define  BM_CALIBRATION_TYPE _CALIBRATION_TYPE_1PAR_
// Possible values: _CALIBRATION_TYPE_1PAR_, _CALIBRATION_TYPE_2PAR_, _CALIBRATION_TYPE_CUSTOM_, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_POS_X BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_POS_Y BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_POS_Z BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_ROT_Z BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_ROT_Y BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_ROT_X BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_NECK BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_SKULL_THORAX_FLEXION BM_MANNEQUIN_DRIVER_NECK
// Possible values: ON, OFF, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_SKULL_THORAX_LATERALBENDING BM_MANNEQUIN_DRIVER_NECK
// Possible values: ON, OFF, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_SKULL_THORAX_ROTATION BM_MANNEQUIN_DRIVER_NECK
// Possible values: ON, OFF, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_THORAX_LATERAL_BENDING BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_THORAX_ROTATION BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_PELVIS_THORAX_EXTENSION BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for all the mannequin drivers for the sterno clavicular degrees of freedom.
// #define  BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_RIGHT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_WRIST_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HAND_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for all the mannequin drivers for the sterno clavicular degrees of freedom.
// #define  BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_PROTRACTION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_ELEVATION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT, 


// Switch for the mannequin driver being active or not.
// #define  BM_MANNEQUIN_DRIVER_STERNOCLAVICULAR_AXIAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_STERNO_CLAVICULAR_LEFT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_GLENOHUMERAL_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ELBOW_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ELBOW_PRONATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_WRIST_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_WRIST_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HAND_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_KNEE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_RIGHT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_EXTERNAL_ROTATION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_HIP_ABDUCTION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_KNEE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_FLEXION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Switch for the mannequin driver being active or not
// #define  BM_MANNEQUIN_DRIVER_ANKLE_SUBTALAR_EVERSION_LEFT BM_MANNEQUIN_DRIVER_DEFAULT
// Possible values: ON, OFF, BM_MANNEQUIN_DRIVER_DEFAULT, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_HIP_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_HIP_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_KNEE_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_KNEE_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_PATELLOFEMORAL_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_PATELLOFEMORAL_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_ANKLE_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_ANKLE_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_SUBTALAR_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_SUBTALAR_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_PATELLATENDON_RIGHT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// Parameter for switching between different joint types. Can also be used to completely exclude the joint, which then must be re-implemented manually.
// #define  BM_JOINT_TYPE_PATELLATENDON_LEFT _JOINT_TYPE_DEFAULT_
// Possible values: _JOINT_TYPE_DEFAULT_, _JOINT_TYPE_BONY_LANDMARK_, _JOINT_TYPE_USERDEFINED_, 


// A switch to use different ref. frame than the default global reference frame
// #define  BM_GLOBAL_REFERENCE_FRAME_SWITCH OFF
// Possible values: ON, OFF


// An object path leading to the selected global reference frame
// #define  BM_GLOBAL_REFERENCE_FRAME ..GenericGlobalRefFrame