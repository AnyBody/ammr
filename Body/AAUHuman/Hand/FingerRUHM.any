
AnyFolder Seg={
  
  AnyFolder &Data = ..ModelParameters.Finger;
  
  AnySeg DistalPhalanx={
    //    Mass=..Mass4;
    //    Jii={0,0,0};
    #include "HandData/RUHM/Distal.any"
    #include "HandData/RUHM/FingerInertia.any"
    Mass=PhalanxMass;//..Mass4;
    Jii={I_xx,I_yy,I_zz};
    //     r0= .ProximalPhalanx.DistalJointNode.sRel*.ProximalPhalanx.Axes0'+.ProximalPhalanx.r0-ProximalJointNode.sRel*Axes0';
    //     Axes0 =.ProximalPhalanx.Axes0*
    //    ProximalJointNode.ARel*
    //    RotMat((pi/180)*..JntPos.PIPFlexion,z)*
    //    ProximalJointNode.ARel';
    
    
    r0= .MiddlePhalanx.DistalJointNode.sRel*.MiddlePhalanx.Axes0'+.MiddlePhalanx.r0-ProximalJointNode.sRel*Axes0';
    Axes0 =.MiddlePhalanx.Axes0*
    ProximalJointNode.ARel*
    RotMat((pi/180)*..JntPos.DIPFlexion,z)*
    ProximalJointNode.ARel';

    AnyDrawSurf  BoneSurf = {  
      RGB=Main.DrawSettings.Colors.Segments;
      FileName = "HandData\STL\Plzen-DistalPhalanx"+strval(...FingerNR);
      ScaleXYZ={1,1,......Sign*1};
      Opacity = ......BonesOpacity.Hand;
      AnyFunTransform3D& Scale = .Scale;
    };
    
    AnyRefNode EllipsoidNode={
      AnySurfEllipsoid Ellipsoid={
        AnyVar BoneLength= vnorm(..ProximalJointSurfaceNode.sRel-..DistalJointSurfaceNode.sRel,2);
        Radius =..Scale({0.005,0,0.005}+{0,a,0}); //the bonelength is already scaled..
        //definition of focus points for the ellipsoid these are used for defining contact
        AnyVar a =BoneLength/2;
        AnyVar c = sqrt(Radius[1]^2-Radius[0]^2);   //distance for center of ellipsoid to focus point
        
        //AnyDrawParamSurf drw ={ RGB=...BoneSurf.RGB; Opacity = ........BonesOpacity.Hand;};
      };
      //definition of focus points
      AnyRefNode F1 ={      sRel={0,.Ellipsoid.c,0};    };
      AnyRefNode F2 ={      sRel={0,-.Ellipsoid.c,0};    };      
    };

    
    AnyVar StdSegmentLength= 0.022;// unscaled segment length
    AnyFunTransform3D Scale= 
    {
      PreTransforms = {
         &...ProtoScaling.DP,
         &...GeomScaleDP 
      };
    };
    AnyFunTransform3D &GeomScale= Scale;//...GScaling.Hand.ScaleFunction;
    AnyRefNode AnatomicalFrame = {};
    
    AnyVar O0O1 = vnorm(DistalJointSurfaceNode.sRel-ProximalJointSurfaceNode.sRel,2);

    #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
    #include "HandData/RUHM/PalmarTorusDIP_Distal.any"
    #endif
  //O2
    AnyRefNode ProximalJointNode              = {sRel=.Scale(..Data.DistalPhalanx.ProximalJointNode_pos);
      #include "HandData/RUHM/DorsalTorusDIP.any"
    };
    //O1
    AnyRefNode ProximalJointSurfaceNode        = {sRel=.Scale(..Data.DistalPhalanx.ProximalJointSurfaceNode_pos);};
    //Na
    AnyRefNode DistalJointSurfaceNode          = {sRel=.Scale(..Data.DistalPhalanx.DistalJointSurfaceNode_pos);};

    AnyRefNode ContactForce_MVC01                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC01_pos);};
    AnyRefNode ContactForce_MVC02                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC02_pos);};
       
  }; //DistalPhalanx3    
  

  
  AnySeg MiddlePhalanx={
    //    Mass=..Mass3;
    //    Jii={0,0,0};
    #include "HandData/RUHM/Middle.any"
    #include "HandData/RUHM/FingerInertia.any"
    Mass=PhalanxMass;//..Mass3;
    Jii={I_xx,I_yy,I_zz};
    //     r0=.ProximalPhalanx.r0+.ProximalPhalanx.DistalJointNode.sRel-ProximalJointNode.sRel;
    r0=.ProximalPhalanx.DistalJointNode.sRel*.ProximalPhalanx.Axes0'+.ProximalPhalanx.r0-ProximalJointNode.sRel*Axes0';
    Axes0 =.ProximalPhalanx.Axes0*
    ProximalJointNode.ARel*
    RotMat((pi/180)*..JntPos.PIPFlexion,z)*
    ProximalJointNode.ARel';


//       r0= .ProximalPhalanx.DistalJointNode.sRel*.ProximalPhalanx.Axes0'+.ProximalPhalanx.r0-ProximalJointNode.sRel*Axes0';
//    Axes0 =HumanModel.BodyModel.Hand.Carpals.Axes0*
//    ..InsertationNode.ARel*
//    RotMat((pi/180)*..JntPos.CMCAbduction,x)*
//    RotMat((pi/180)*..JntPos.CMCFlexion,z)*
//    ProximalJointNode.ARel';
//
//

     
    AnyVar StdSegmentLength= 0.03;// unscaled segment length
    
    AnyFunTransform3D Scale= 
    {
      PreTransforms = {
         &...ProtoScaling.MP,
         &...GeomScaleMP 
      };
    };

    AnyFunTransform3D &GeomScale= Scale;//...GScaling.Hand.ScaleFunction;
    AnyRefNode AnatomicalFrame = {};    
    
    AnyDrawSurf  BoneSurf = { 
      RGB=Main.DrawSettings.Colors.Segments;
      FileName = "HandData\STL\Plzen-MiddlePhalanx"+strval(...FingerNR); 
      ScaleXYZ={1,1,......Sign*1};
      Opacity = ......BonesOpacity.Hand;
      AnyFunTransform3D& Scale = .Scale;
    };
    #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
    #include "HandData/RUHM/PalmarTorusDIP_Proximal.any"
    #include "HandData/RUHM/PalmarTorusPIP_Distal.any"
    #endif
        
    AnyRefNode EllipsoidNode={
      AnySurfEllipsoid Ellipsoid={
        AnyVar BoneLength= vnorm(..ProximalJointSurfaceNode.sRel-..DistalJointNode.sRel,2);
        Radius =..Scale(....MiddlePhalanxParameters.Radius*{1,0,1}+{0,a,0}); //the bonelength is already scaled..
        //definition of focus points for the ellipsoid these are used for defining contact
        AnyVar a =BoneLength*....MiddlePhalanxParameters.BoneLengthCoef;
        AnyVar c = sqrt(Radius[1]^2-Radius[0]^2);   //distance for center of ellipsoid to focus point
        
        //AnyDrawParamSurf drw ={ RGB=...BoneSurf.RGB; Opacity = ........BonesOpacity.Hand;};
      };
      //definition of focus points
      AnyRefNode F1 ={      sRel={0,.Ellipsoid.c,0};    };
      AnyRefNode F2 ={      sRel={0,-.Ellipsoid.c,0};    };      
    };
    
    AnyVar O2O3J = vnorm(ProximalJointNode.sRel-DistalJointNode.sRel,2);
    AnyVar O2O3 = vnorm(ProximalJointSurfaceNode.sRel-DistalJointNode.sRel,2);
    AnyVar O3O4 = vnorm(ProximalJointNode.sRel-ProximalJointSurfaceNode.sRel,2);
    //O4
    AnyRefNode ProximalJointNode                   = {sRel=.Scale(..Data.MiddlePhalanx.ProximalJointNode_pos); 
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/DorsalTorusPIP.any"
      #endif
    };
    //O3
    AnyRefNode ProximalJointSurfaceNode             = {sRel=.Scale(..Data.MiddlePhalanx.ProximalJointSurfaceNode_pos);};
    //O2
    AnyRefNode DistalJointNode                      = {sRel=.Scale(..Data.MiddlePhalanx.DistalJointNode_pos);
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/JointSphereDIP.any"
      #endif
    };
    
    AnyRefNode ContactForce_MVC01                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC01_pos);};
    AnyRefNode ContactForce_MVC02                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC02_pos);};
    AnyRefNode ContactForce_MVC10                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC10_pos);};
    
        AnyRefNode MPJointCyl={  
      sRel=.Scale(..Data.MiddlePhalanx.DistalJointNode_pos)+{0,0,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=0.002;
        Length=0.03;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          WireFrameOnOff = On;
          RGB={0,1,0};
        };
        #endif
      };
    };
    

  }; //MiddlePhalanx
  
  //  
  AnySeg ProximalPhalanx={
    //    Mass=..Mass2;
    //    Jii={0,0,0};
    #include "HandData/RUHM/Proximal.any"
    #include "HandData/RUHM/FingerInertia.any"
    Mass=PhalanxMass;//..Mass2;
    Jii={I_xx,I_yy,I_zz};
    r0= .Metacarpal.DistalJointNode.sRel*.Metacarpal.Axes0'+.Metacarpal.r0-ProximalJointNode.sRel*Axes0';
    Axes0 =.Metacarpal.Axes0*
    ProximalJointNode.ARel*
    RotMat((pi/180)*..JntPos.MCPFlexion,z)*
    RotMat((pi/180)*..JntPos.MCPAbduction,x)*
    ProximalJointNode.ARel';


    AnyVar StdSegmentLength= 0.0521;// unscaled segment length
    AnyFunTransform3D Scale= 
    {
      PreTransforms = {
         &...ProtoScaling.PP,
         &...GeomScalePP 
      };
    };

    AnyFunTransform3D &GeomScale= Scale;//...GScaling.Hand.ScaleFunction;
    AnyRefNode AnatomicalFrame = {};
    
    AnyDrawSurf  BoneSurf = {   
          RGB=Main.DrawSettings.Colors.Segments;

      FileName = "HandData\STL\Plzen-ProximalPhalanx"+strval(...FingerNR); 
      ScaleXYZ={1,1,......Sign*1};
      Opacity = ......BonesOpacity.Hand;
      AnyFunTransform3D& Scale = .Scale;
    };
    #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
    #include "HandData/RUHM/PalmarTorusPIP_Proximal.any"
    #include "HandData/RUHM/PalmarTorusMCP_Distal.any"
    #endif
    
    AnyRefNode EllipsoidNode={
      AnySurfEllipsoid Ellipsoid={
        AnyVar BoneLength= vnorm(..ProximalJointSurfaceNode.sRel-..DistalJointNode.sRel,2);
        Radius =..Scale(....ProximalPhalanxParameters.Radius*{1,0,1}+{0,a,0}); //the bonelength is already scaled..
        //definition of focus points for the ellipsoid these are used for defining contact
        AnyVar a =BoneLength*....ProximalPhalanxParameters.BoneLengthCoef;
        AnyVar c = sqrt(Radius[1]^2-Radius[0]^2);   //distance for center of ellipsoid to focus point
        //AnyDrawParamSurf drw ={ RGB=...BoneSurf.RGB; Opacity = ........BonesOpacity.Hand;};
      };
      //definition of focus points
      AnyRefNode F1 ={      sRel={0,.Ellipsoid.c,0};    };
      AnyRefNode F2 ={      sRel={0,-.Ellipsoid.c,0};    };      
    };

    AnyVar Length=.MiddlePhalanx.O2O3*1.608;
    //O6
    AnyRefNode ProximalJointNode               = {sRel=.Scale(..Data.ProximalPhalanx.ProximalJointNode_pos);
     #include "HandData/RUHM/DorsalTorus1MCP.any"
    };
        AnyRefNode DistalJointNode_ExIn = {
      sRel={-BoneLength/8,0,-BoneLength/60};
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/DorsalTorus1MCP.any"
      #endif
    };
    AnyRefNode DistalJointNode_ExDig  = {
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      sRel={-BoneLength/8,0,BoneLength/60};
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/DorsalTorus1MCP.any"
      #endif
    };
    //O5
    AnyRefNode ProximalJointSurfaceNode        = {sRel=.Scale(..Data.ProximalPhalanx.ProximalJointSurfaceNode_pos);};
    //O4
    AnyRefNode DistalJointNode                 = {sRel=.Scale(..Data.ProximalPhalanx.DistalJointNode_pos);
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/JointSpherePIP.any"
      #endif
    };
    
//    
AnyRefNode ContactForce_MVC05              = {sRel=.Scale(..Data.ProximalPhalanx.ContactForce_MVC05_pos);};
    AnyRefNode ContactForce_MVC01                         = {sRel=.Scale(..Data.MiddlePhalanx.ContactForce_MVC01_pos);};
    
        AnyRefNode PPJointCyl={  
      sRel=.Scale(..Data.ProximalPhalanx.DistalJointNode_pos)+{0,0,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=0.004;
        Length=0.03;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          WireFrameOnOff = On;
          RGB={0,1,0};
        };
        #endif
      };
    };
    

    
                AnyRefNode PPJointCyl3={  
      sRel=.Scale(..Data.ProximalPhalanx.DistalJointNode_pos)+{-0.004,0,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=0.008;
        Length=0.03;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          WireFrameOnOff = On;
          RGB={0,1,0};
        };
        #endif
      };
    };
    
  }; //ProximalPhalanx
  
      
  AnySeg Metacarpal={
    //    Mass=..Mass1;
    //    Jii={0,0,0};
    #include "HandData/RUHM/Metacarpal.any"
    #include "HandData/RUHM/FingerInertia.any"
    Mass=PhalanxMass;//..Mass1;
    Jii={I_xx,I_yy,I_zz};
    #include "../DrawSettings/Nodes.any"
    r0= ..InsertationNode.sRel*...Carpals.Axes0'+ ...Carpals.r0-ProximalJointNode.sRel*Axes0';
    Axes0 = ...Carpals.Axes0* ..InsertationNode.ARel*
    //    RotMat((pi/180)*..JntPos.CMCFlexion,z)*
    ProximalJointNode.ARel';
    
    
    AnyVar StdSegmentLength= 0.07;// unscaled segment length
    AnyFunTransform3D Scale= 
    {
      PreTransforms = {
         &...ProtoScaling.MC,
         &...GeomScaleMC 
      };
    };

    AnyFunTransform3D &GeomScale= Scale;//...GScaling.Hand.ScaleFunction;
    AnyRefNode AnatomicalFrame = {}; 
    
    AnyDrawSurf  BoneSurf = {        RGB=Main.DrawSettings.Colors.Segments;

      FileName = "HandData\STL\Plzen-MetacarpalBase"+strval(...FingerNR);  
      ScaleXYZ={0.8,1,......Sign*0.9};
      Opacity = ......BonesOpacity.Hand;
      AnyFunTransform3D& Scale = .Scale;
    };
    #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
    #include "HandData/RUHM/PalmarTorusMCP_Proximal.any"
    #endif    
    AnyRefNode EllipsoidNode={
      sRel= ...MetacarpalParameters.Offset;
      ARel= RotMat(...MetacarpalParameters.RotAngle,z);
      AnySurfEllipsoid Ellipsoid={
        AnyVar BoneLength= vnorm(..ProximalJointSurfaceNode.sRel-..DistalJointNode.sRel,2);
        Radius =..Scale(....MetacarpalParameters.Radius*{1,0,1}+{0,a,0}); //the bonelength is already scaled..
        //definition of focus points for the ellipsoid these are used for defining contact
        AnyVar a =BoneLength*....MetacarpalParameters.BoneLengthCoef;
        AnyVar c = sqrt(Radius[1]^2-Radius[0]^2);   //distance for center of ellipsoid to focus point
        //AnyDrawRefFrame drw={ScaleXYZ=0.3*{1,1,1};};

        //AnyDrawParamSurf drw ={ RGB=...BoneSurf.RGB; Opacity = ........BonesOpacity.Hand;};
      };
      //definition of focus points
      AnyRefNode F1 ={      sRel={0,.Ellipsoid.c,0};    };
      AnyRefNode F2 ={      sRel={0,-.Ellipsoid.c,0};    };      
    };

    AnyRefNode ProximalJointNode                   = {sRel=.Scale(..Data.MetaCarpal.ProximalJointNode_pos);};  
    AnyRefNode ProximalJointSurfaceNode            = {sRel=.Scale(..Data.MetaCarpal.ProximalJointSurfaceNode_pos);};
    //06
    AnyRefNode DistalJointNode                     = {sRel=.Scale(..Data.MetaCarpal.DistalJointNode_pos);
      #if BM_HAND_MODEL == _HAND_MODEL_RUHM_
      #include "HandData/RUHM/DorsalTorus1MCP.any"
      //      #include "HandData/RUHM/DorsalTorus2MCP.any"
      #include "HandData/RUHM/JointSphereMCP.any"
      #endif
    };


    
    
    // Cylinder for muscle wraping
    AnyRefNode MetaCyl={  
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      sRel={-0.002,BoneLength/2,0};
      ARel=RotMat(pi/2,x);
      AnySurfCylinder MetaCyl={
        Radius = .BoneLength/8;
        Length = .BoneLength;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={};
        #endif
      };
    }; // MetaCyl
    
    AnyRefNode MetaJointCyl={  
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      
      sRel=.Scale(..Data.MetaCarpal.DistalJointNode_pos)+{0,0,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=.BoneLength/8;
        Length=0.03*2;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          RGB={0,1,0};
        };
        #endif
      };
    };
  
        AnyRefNode MetaJointCyl2={  
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      
      sRel=.Scale(..Data.MetaCarpal.DistalJointNode_pos)+{-0.0015,-BoneLength/15,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=.BoneLength/22;
        Length=0.04;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          RGB={0,1,1};
        };
        #endif
      };
    };
    
            AnyRefNode MetaJointCyl3={  
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      
      sRel=.Scale(..Data.MetaCarpal.DistalJointNode_pos)+{BoneLength/12,0,-0.015};
      ARel=RotMat(pi*0,y);
      AnySurfCylinder cyl={
        Radius=.BoneLength/22;
        Length=0.04;
        #if SHOW_HAND_WRAP_EX == ON
        AnyDrawParamSurf surf={
          Opacity = 0.3;
          RGB={0,1,1};
        };
        #endif
      };
    };

   AnyRefNode DorsalTorusMeta = {
      sRel = {0,0.00001,0};
      #include "../Hand/HandData/RUHM/DorsalTorusMeta.any"
//      AnyDrawNode drw = {ScaleXYZ = {0.001, 0.001, 0.001};};
    };
    
       AnyRefNode DorsalTorusMeta_Ex = {
      AnyVar BoneLength = vnorm(.ProximalJointSurfaceNode.sRel-.DistalJointNode.sRel,2);
      sRel = {-0.006,-BoneLength/3,0};
      #include "../Hand/HandData/RUHM/DorsalTorusMeta_Ex.any"
//      AnyDrawNode drw = {ScaleXYZ = {0.001, 0.001, 0.001};};
    };
    AnyRefNode ContactForce_MVC04                         = {sRel=.Scale(..Data.MetaCarpal.ContactForce_MVC04_pos);};
    AnyRefNode ContactForce_MVC07                         = {sRel=.Scale(..Data.MetaCarpal.ContactForce_MVC07_pos);};
    AnyRefNode ContactForce_MVC08                         = {sRel=.Scale(..Data.MetaCarpal.ContactForce_MVC08_pos);};
    AnyRefNode ContactForce_MVC10                         = {sRel=.Scale(..Data.MetaCarpal.ContactForce_MVC10_pos);};
  }; //Metacarpal
  
}; //Segs


AnyFolder Jnt ={
//  
//  //Carpometacarpal joint
  AnyUniversalJoint CMC={
    AnyRefNode &ref1=..InsertationNode;
    AnyRefNode &ref2=..Seg.Metacarpal.ProximalJointNode;
    Axis1=z;
    Axis2=x;
  };
  
  //Drive the CMC joint so that it points at MCP joint 
//  AnyFolder CMCDriver ={
//    
//    AnyKinEqSimpleDriver Driver ={
//      AnyKinLinear Lin={
//        Ref=0;
//        AnyRefNode &ref1=....Seg.Metacarpal.DistalJointNode;
//        //       ref1={AnyDrawRefFrame drw2={RGB={1,1,1};};};
//        AnyRefNode  &ref2= ....MCPNode;
//      };
//      MeasureOrganizer={0,2};  //x and z, y is longitudinal
//      DriverPos={0,0};
//      DriverVel={0,0};
//      Reaction.Type ={Off,Off};
//    };
//  };
  
  //Metacarpophalangeal joint
  AnyUniversalJoint MCP={
    AnyRefNode &ref1=..Seg.Metacarpal.DistalJointNode;
    AnyRefNode &ref2=..Seg.ProximalPhalanx.ProximalJointNode;
    Axis1=z;
    Axis2=x;
//    #include "DrawJointAxisZ.any"
//    #include "DrawJointAxisX.any"
    
  };
  
  
  //Proximalinterphalangeal joint
  AnyRevoluteJoint PIP={
    AnyRefNode &ref1=..Seg.ProximalPhalanx.DistalJointNode;
    AnyRefNode &ref2=..Seg.MiddlePhalanx.ProximalJointNode;
    Axis=z;
    //#include "DrawJointAxisZ.any"
    
  };
  
  //Distalinterphalangeal joint
  AnyRevoluteJoint DIP={
    AnyRefNode &ref1=..Seg.MiddlePhalanx.DistalJointNode;
    AnyRefNode &ref2=..Seg.DistalPhalanx.ProximalJointNode;
    Axis=z;
//    #include "DrawJointAxisZ.any"
  };
  


 
  //Make a linear combination measure which links DIP motion with PIP motion
  //Rijpkema1991
  //Hans Rijpkema and Michael Girad
  //Computer animation of knowledge-based human grasping
  //Computer grahics Vol. 25, no. 4, July 1991
//   AnyKinEq PIPJointDIPJointLink={
//    AnyKinMeasureLinComb PIPDIP={
//      
//      //Proximalinterphalangeal joint
//      AnyRevoluteJoint &ref1=..DIP;
//      
//      //Proximalinterphalangeal joint
//      AnyRevoluteJoint &ref2=..PIP;
//      
//      Coef={{1,-2/3}};
//      
//      
//    };
//  };
  
  
};   // End Jnt definition

// Muscles Definition of the fingers:
AnyFolder JntMus = {
  
  //Four muscles for the CMC joint - Flexion/Extension & Adduction/Abduction motion (base of thumb):
  AnyGeneralMuscle CMCflexion = {
    AnyMuscleModel MuscleModel = {
      F0 = ...CMCMusForceFlex;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.CMC;
      MeasureOrganizer = {0};
    };
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle CMCextesion = {
    AnyMuscleModel MuscleModel = {
      F0 = ...CMCMusForceExten;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.CMC;
      MeasureOrganizer = {0};
    };
    ForceDirection = -1;
  };
    AnyGeneralMuscle CMCAdduction = {
    AnyMuscleModel MuscleModel = {
      F0 = ...CMCMusForceAdduc;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.CMC;
      MeasureOrganizer = {1};
    };
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle CMCAbduction = {
    AnyMuscleModel MuscleModel = {
      F0 = ...CMCMusForceAbduc;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.CMC;
      MeasureOrganizer = {1};
    };
    ForceDirection = -1;
  };


  
  //Four muscles for the MCP joint - Flexion/Extension & Adduction/Abduction motion (base of thumb):
  AnyGeneralMuscle MCPflexion = {
    AnyMuscleModel MuscleModel = {
      F0 = ...MCPMusForceFlex;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.MCP;
      MeasureOrganizer = {0};
    };
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle MCPextension = {
    AnyMuscleModel MuscleModel = {
      F0 = ...MCPMusForceExten;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.MCP;
      MeasureOrganizer = {0};
    };
    ForceDirection = -1;
  };
  
  AnyGeneralMuscle MCPAdduction = {
    AnyMuscleModel MuscleModel = {
      F0 = ...MCPMusForceAdduc;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.MCP;
      MeasureOrganizer = {1};
    };
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle MCPAbduction = {
    AnyMuscleModel MuscleModel = {
      F0 = ...MCPMusForceAbduc;
    };
    AnyKinMeasureOrg Org = {
      AnyUniversalJoint &jnt = ...Jnt.MCP;
      MeasureOrganizer = {1};
    };
    ForceDirection = -1;
  };

  //Two muscles for the PIP joint - Flexion/Extension motion (middle of thumb):
  AnyGeneralMuscle PIPflexion = {
    AnyMuscleModel MuscleModel = {
      F0 = ...PIPMusForceFlex;
    };
    AnyRevoluteJoint &jnt = ..Jnt.PIP;
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle PIPextension = {
    AnyMuscleModel MuscleModel = {
      F0 = ...PIPMusForceExten;
    };
    AnyRevoluteJoint &jnt = ..Jnt.PIP;
    ForceDirection = -1;
  };
  
  //Two muscles for the DIP joint - Flexion/Extension motion (tip of thumb):
  AnyGeneralMuscle DIPflexion = {
    AnyMuscleModel MuscleModel = {
      F0 = ...DIPMusForceFlex;
    };
    AnyRevoluteJoint &jnt = ..Jnt.DIP;
    ForceDirection = 1;
  };
  
  AnyGeneralMuscle DIPextension = {
    AnyMuscleModel MuscleModel = {
      F0 = ...DIPMusForceExten;
    };
    AnyRevoluteJoint &jnt = ..Jnt.DIP;
    ForceDirection = -1;
  };


}; // End Jnt Mus definition

//Origin Points for example the Lumbrical muscles
AnyFolder IntrinsicMusclePoints={
  
};