
AnyFolder Model = {
  // Model parts included in the moment arm study
  AnyFolder &ThoraxRef = .....BodyModel.Trunk.Segments.ThoraxSeg;
  AnyFolder &SkullRef = .....BodyModel.Trunk.Segments.SkullSeg;
  AnyFolder &CervicalSpineJntRef = .....BodyModel.Trunk.Joints.Cervical;
  AnyFolder &CervicalSpineSegRef = .....BodyModel.Trunk.Segments;
  AnyFolder &LumbarJntRef = .....BodyModel.Trunk.Joints.Lumbar;
  AnyFolder &LumbarSegRef = .....BodyModel.Trunk.Segments;
  AnyFolder &ArmSegSideRef = .SideBodyModelRef.ShoulderArm.Seg;
  AnyFolder &ArmJntsRef =  .SideBodyModelRef.ShoulderArm.Jnt;
  AnyFolder &MusRef = .SideBodyModelRef.ShoulderArm.Mus;
  
  
  AnyFixedRefFrame ground = {
    AnyRefNode node = { 
      ARel=..ThoraxRef.Axes0;
      sRel=..ThoraxRef.r0;
    };
  };
  
  AnyKinEq FixSkullThoraxPelvis = 
  {
    AnyKinMeasure& SkullThorax = ......BodyModel.Trunk.Joints.Cervical.SkullThoraxRotMeasure;
    AnyKinMeasure& PelvisThorax = ......BodyModel.Trunk.Joints.Lumbar.PelvisThoraxRotMeasure;
  };
  
  AnyFolder Drivers = {
    AnyVar AngularVelocity = (..RangeOfMotion[1]-..RangeOfMotion[0])*pi/180;
    
    AnyKinMeasureOrg ArmMeasure = {
      #if BM_ARM_SHOULDER_RHYTHM == OFF
      AnyKinMeasure& SCProtraction= ...SideBodyInterfaceRef.SternoClavicularProtraction;
      AnyKinMeasure& SCElevation= ...SideBodyInterfaceRef.SternoClavicularElevation;
      #endif
      AnyKinMeasure& GHAbduction= ...SideBodyInterfaceRef.GlenohumeralAbduction;
      AnyKinMeasure& GHFlexion= ...SideBodyInterfaceRef.GlenohumeralFlexion;
      AnyKinMeasure& GHExternalRotation= ...SideBodyInterfaceRef.GlenohumeralExternalRotation;
      AnyKinMeasure& ElbowFlexion= ...SideBodyInterfaceRef.ElbowFlexion;
      AnyKinMeasure& ElbowPronation= ...SideBodyInterfaceRef.ElbowPronation;
      AnyKinMeasure& WristFlexion= ...SideBodyInterfaceRef.WristFlexion;
      AnyKinMeasure& WristAbduction= ...SideBodyInterfaceRef.WristAbduction;  
      #if BM_ARM_CLAVICULA_ROTATION_RHYTHM == OFF
      AnyKinMeasure& ACMedialRotation= ...SideBodyInterfaceRef.AcromioClavicular.MedialRotation;
      #endif
    };
    
    AnyKinEqSimpleDriver ArmDriver= {
      AnyKinMeasure& ref = .ArmMeasure;
      
      #if BM_ARM_SHOULDER_RHYTHM == OFF
      #define __MEASURE_INDEXER(X) { X[0],X[1],X[2],X[3],X[4],X[5],X[6],X[7],X[8],X[9] }
      #else
      #define __MEASURE_INDEXER(X) { X[2], X[3],X[4],X[5],X[6],X[7],X[8] }
      #endif
      
      DriverPos = __MEASURE_INDEXER(...DriverPos);
      AnyFloat Mask = __MEASURE_INDEXER( ...Mask);
      
      #undef __MEASURE_INDEXER
      
      DriverVel = Mask* (...RangeOfMotion[1]-...RangeOfMotion[0])*pi/180/...Study.tEnd;
    };
    
    
    AnyStdJoint TrunkGround={
      AnyRefFrame &Ground = ..ground.node;
      AnyRefFrame &Thorax= ..ThoraxRef; 
    };
    
  };// Drivers
};// Model


AnyKinStudy Study = {
  Gravity = {0,0,0};
  #ifdef EVALUATE_MOMENT_ARMS_NSTEP
  nStep = EVALUATE_MOMENT_ARMS_NSTEP;
  #else
  nStep = 40;
  #endif  
  Kinematics.SmallStepAssumptionOnOff = Off;
  InitialConditions.SmallStepAssumptionOnOff = Off;
  
  AnyFolder &Model = .Model;
  AnyOutputFun AngularVelocity_output = {Val = ..Model.Drivers.AngularVelocity;};  
  
  AnyFolder MuscleStrengthCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
    #define _CODE_MACRO_(muscle, branch) AnyVar branch = ( ..Model.MusRef.muscle.branch.Strength); 
    #include "armmuscles_for_output.any"
    #undef _CODE_MACRO_
  };
  
  AnyFolder PennationAngleCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
    #define _CODE_MACRO_(muscle, branch) AnyVar branch = ( ..Model.MusRef.muscle.branch.PennationAngle * 180/pi);    
    #include "armmuscles_for_output.any"
    #undef _CODE_MACRO_
  };
  
  AnyFolder MomentArmCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
    #define _CODE_MACRO_(muscle, branch) AnyVar branch = ( -1*..Model.MusRef.muscle.branch.LmtDot/..Model.Drivers.AngularVelocity);    
    #include "armmuscles_for_output.any"
    #undef _CODE_MACRO_
  };
};


#if (ANYBODY_V1 >= 6) & (ANYBODY_V2 >= 1)
AnyFolder ModelViews = { AnyFolder Views =  {}; };
#else
AnyProject ModelViews = {};
#endif

ModelViews = {
  AnyDrawGroup Selection = {
    Objects = arrcat(
    ObjSearchRecursive(CompleteNameOf(&..Model.ThoraxRef), "*", "AnyDrawObject"), 
    ObjSearchRecursive(CompleteNameOf(&..Model.CervicalSpineSegRef), "*", "AnyDrawObject"), 
    ObjSearchRecursive(CompleteNameOf(&..Model.SkullRef), "*", "AnyDrawObject"), 
    ObjSearchRecursive(CompleteNameOf(&..Model.ArmSegSideRef), "*", "AnyDrawObject"),
    ObjSearchRecursive(CompleteNameOf(&..Model.MusRef ), "*", "AnyDrawObject"));
  };
  Views = {
    AnyProjectModelViewDefinition SelectedView = {
      DrawGroupSequence = {&..Selection};
      Reset = {On};
    };
  };
};

AnyOperationSequence Run = 
{
    AnyOperationMacro SetView = 
    {
      MacroStr = { "classoperation " + CompleteNameOf(&..ModelViews.Views.SelectedView) + strquote("Set View") };
    };
    AnyOperation &Study = .Study.Kinematics;

};

#ifdef ANYBODY_PATH_OUTPUT
AnyOperationMacro Save = 
{
  MacroStr = {
    "classoperation " + CompleteNameOf(&.Study.Output) + strquote("Save data") 
    + " --type=" + strquote("Deep") +" --file=" + strquote(
    ANYBODY_PATH_OUTPUT + .OutputFileName + ".anydata.h5")
  };
};
#endif