
AnyFolder Model = {
  // Model parts included in the moment arm study
  AnyFolder &ThoraxRef = .....BodyModel.Trunk.SegmentsThorax.ThoraxSeg; //This is a reference to the folder which holds the human part of the model
  AnyFolder &ArmSegSideRef = .SideHumanFolderRef.ShoulderArm.Seg; //This is a reference to the folder which holds the human part of the model
  AnyFolder & CervicalSpineRef = .....BodyModel.Trunk.SegmentsCervicalSpine;
  AnyFolder & SkullRef = .....BodyModel.Trunk.SegmentsThorax.SkullSeg;
  AnyFolder & SegLumberRef = .....BodyModel.Trunk.SegmentsLumbar;
   
  
  AnyFolder &CervicalSpineJntRef = .....BodyModel.Trunk.JointsCervicalSpine;
  AnyFolder &JointsLumbarRef = .....BodyModel.Trunk.JointsLumbar;
  AnyFolder &ArmJntsRef =  .SideHumanFolderRef.ShoulderArm.Jnt;
  AnyFolder &ArmMusRef = .SideHumanFolderRef.ShoulderArm.Mus;
  AnyFolder &SpineMusRef = .SideTrunkMusRef;
  
  AnyFixedRefFrame ground = {
    AnyRefNode node = { 
      ARel=..ThoraxRef.Axes0;
      sRel=..ThoraxRef.r0;
    };
  };
  
  AnyFolder Drivers = {
    AnyVar AngularVelocity = (..RangeOfMotion[1]-..RangeOfMotion[0])*pi/180;
    AnyKinMeasureOrg ArmMeasure = {
      AnyKinMeasure &SCProtraction= ...SideHumanInterfaceRef.SternoClavicularProtraction;
      AnyKinMeasure &SCElevation= ...SideHumanInterfaceRef.SternoClavicularElevation;
      AnyKinMeasure &SCAxialRotation= ...SideHumanInterfaceRef.SternoClavicularAxialRotation;
      AnyKinMeasure &GHFlexion= ...SideHumanInterfaceRef.GlenohumeralFlexion;
      AnyKinMeasure &GHAbduction= ...SideHumanInterfaceRef.GlenohumeralAbduction;
      AnyKinMeasure &GHExternalRotation= ...SideHumanInterfaceRef.GlenohumeralExternalRotation;
      AnyKinMeasure &ElbowFlexion= ...SideHumanInterfaceRef.ElbowFlexion;
      AnyKinMeasure &ElbowPronation= ...SideHumanInterfaceRef.ElbowPronation;
      AnyKinMeasure &WristFlexion= ...SideHumanInterfaceRef.WristFlexion;
      AnyKinMeasure &WristAbduction= ...SideHumanInterfaceRef.WristAbduction;  
    };
    AnyStdJoint PelvisGround={
      AnyRefFrame &Ground = ..ground.node;
      AnyRefFrame &Sacrum= ..ThoraxRef; 
    };
    
    AnyKinEq SkullFix = 
    {
      AnyKinMeasure& SkullThoraxFlexion = .......BodyModel.Interface.Trunk.SkullThoraxFlexion;
      AnyKinMeasure& SkullThoraxLateralBending = .......BodyModel.Interface.Trunk.SkullThoraxLateralBending;
      AnyKinMeasure& SkullThoraxRotation = .......BodyModel.Interface.Trunk.SkullThoraxRotation;
    };

    AnyKinEq LumbarFix = 
    {
      AnyKinMeasure& PelvisThoraxExtension = .......BodyModel.Interface.Trunk.PelvisThoraxExtension;
      AnyKinMeasure& PelvisThoraxLateralBending = .......BodyModel.Interface.Trunk.PelvisThoraxLateralBending;
      AnyKinMeasure& PelvisThoraxRotation = .......BodyModel.Interface.Trunk.PelvisThoraxRotation;
    };


  };// Drivers
};// Model

 
AnyKinStudy Study = {
  Gravity = {0,0,0};
  #ifdef EVALUATE_MOMENT_ARMS_NSTEP
  nStep = EVALUATE_MOMENT_ARMS_NSTEP;
  #else
  nStep = 40;
  #endif  
  Kinematics.SmallStepAssumptionOnOff = Off;
  InitialConditions.SmallStepAssumptionOnOff = Off;

  AnyFolder &Model = .Model;
  
  AnyFolder MuscleStrengthCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
#define _CODE_MACRO_(name) AnyVar name = ( .Model.ArmMusRef.name.Strength);    
        #include "armmuscles_for_output.any"
#undef _CODE_MACRO_
  };
   
  AnyFolder PennationAngleCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
#define _CODE_MACRO_(name) AnyVar name = ( .Model.ArmMusRef.name.PennationAngle * 180/pi);    
        #include "armmuscles_for_output.any"
#undef _CODE_MACRO_
  };
  
  AnyFolder MomentArmCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi  ;    
    };
#define _CODE_MACRO_(name) AnyVar name = ( -1*.Model.ArmMusRef.name.LmtDot/.Model.Drivers.AngularVelocity);    
        #include "armmuscles_for_output.any"
#undef _CODE_MACRO_
  };
};


#if (ANYBODY_V1 >= 6) & (ANYBODY_V2 >= 1)
AnyFolder ModelViews = { AnyFolder Views =  {}; };
#else
AnyProject ModelViews = {};
#endif

ModelViews = {
  AnyDrawGroup Selection = {
    Objects = arrcat(ObjSearchRecursive(CompleteNameOf(&..Model.ThoraxRef), "*", "AnyDrawObject"), 
                     ObjSearchRecursive(CompleteNameOf(&..Model.CervicalSpineRef), "*", "AnyDrawObject"), 
                     ObjSearchRecursive(CompleteNameOf(&..Model.SkullRef), "*", "AnyDrawObject"), 
                     ObjSearchRecursive(CompleteNameOf(&..Model.ArmSegSideRef), "*", "AnyDrawObject"),
                     ObjSearchRecursive(CompleteNameOf(&..Model.ArmMusRef ), "*", "AnyDrawObject"));
  };
  Views = {
    AnyProjectModelViewDefinition SelectedView = {
      DrawGroupSequence = {&..Selection};
      Reset = {On};
    };
  };
};

AnyOperationSequence Run = 
{
    AnyOperationMacro SetView = 
    {
      MacroStr = { "classoperation " + CompleteNameOf(&..ModelViews.Views.SelectedView) + strquote("Set View") };
    };
    AnyOperation &Study = .Study.Kinematics;
//    #ifdef ANYBODY_PATH_OUTPUT
//    AnyOperationMacro Save = 
//    {
//      MacroStr = {
//           "classoperation " + CompleteNameOf(&.Study.Output) + strquote("Save data") 
//           + " --type=" + strquote("Deep") +" --file=" + strquote(
//           ANYBODY_PATH_OUTPUT + .OutputFileName + ".anydata.h5")
//      };
//    #endif
};